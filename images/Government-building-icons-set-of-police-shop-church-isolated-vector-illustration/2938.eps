%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1409.i029.009.P.m005.c23.city buildings set.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Даша
%%CreationDate: 9/3/2014
%%BoundingBox: 0 0 421 410
%%HiResBoundingBox: 0 0 420.0352 409.0196
%%CropBox: 0 0 420.0352 409.0196
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 22132 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD3CFFA7FD7DFFA8A175A1FD7DFFA8A1A8FD7EFF7DFD7FFFA1FD7E
%FFCA8CCAFD7DFF92FCB5FD7CFF938C8CFC9AFD7AFFC3B492B5B4B4C9FD79
%FFCEC8C29AC9C8CFFD18FF9AC39AC39AC39AC39AC39AC39AC39AC39AC39A
%C39AC39AC39AC39AC39AC39ACFFD0FFFA8CAA8CAA8CAA8CAA8CAA8CAA8A8
%A8CAA8CAA8CACAFD1DFFCECEC2A8C2CECFFD18FFB58CB48CFC8CB48CFC8C
%B48CFC8CB48CFC8CB48CFC8CB48CFC8CB48CFC8CB4CFFD0EFF7D2E2F2F2E
%59FD062F2E355359FD042F067DFD1DFFCFC8C29AC2C8CFFD18FFA1FC8CB4
%8CB48CB48CB48CB48CB48CB48CB48CB48CB48CB48CB48CB48C8C9AFD0FFF
%A82F151461858B618B6161368B6161618B141514157DFD1DFFCECEC2CAC2
%CECFFD19FFC3BBB4B5B4B5B4B5B4BBB4B5B4BBB5B5B4B5B4B5B4BBB4B5B4
%B5B4B5C2FD10FFA1351414368B606136AF363684851485603614140D7DFD
%1DFFCFC9C9BBC9C9CFFD1AFFB599759A759A93BB6F9A759A93BB939A759A
%75BB939A759A7599B4CAFFA8A8FD0DFFA80D1B143D6115618B618B616161
%8B6161141514147DFD1DFFCFCFC1B4C2CECFFD19FFCABB6FC9CECFA0BBB5
%A0CECFA799B49AA7CECEA193B57CCFCECE93BBA1A851CAFD0DFFA12E0C2F
%2F2F0C2F2F2F2E592E2F2E352F2F2E2F2E7DFD1DFFCF9FB499B4C2CFFD19
%FFCFB4937CA7A0A092B575A7A0A76FB56FA7A0A775B5927CA0A7A099B4A1
%7D76A1FD0EFFA8FF8484CAFFCACFCAFFCACFA8FFCACF7EA8CACFCFFD0CFF
%CAC2C3C2C3C2C3C2C3C2C3C2C3C2C3C2C3C2B4C2CFC2B4C2C3C2C3C2C3C2
%C3C2C3C2C3C2C3C2C3BCFD09FFCABB93A7A7C9A0BBB5A0A7C9A79AB59AA7
%C9A7A0B5BB7CCEA7A793BBA1A876CAFD07FFA1A17C7D76A17CA17D7D53A1
%7DA17DA17DA17DA17DA17D7D76A17DA176A17C7D76A8FD06FFBBB5B4B5B4
%B5B4B5B4B5B4B5B4B5B4B5B4B4C2CEC9CF99FCB4B5B4B5B4B5B4B5B4B5B4
%B5B4B5B4B4C2FD09FFB56F7CC9A6A092B575A7A6A76FB56FA7A6C9759392
%7CA6C9A075B4C37D76A7FD07FFA14A754B6F4B754B6F4B754B6F4B754B6F
%4B754B6F4B754B6F4B754B6F4B754B4B7DFD06FFBBB5BBB5BBB5BBB5BBB5
%BBB5BBB5BBB5B4C1CFCECECECFBBB4B5BBB5BBB5BBB5BBB5BBB5BBB5BBB5
%BCFD08FFCABB4B4B4B514B9993514B4B4B7593754B514B4B6F994B4B4B51
%4BBBA1A876A8FD07FFA859527D5259527D5259527D5259527D5259527D52
%59527D5259527D5259525952A8FD05FFC9B4B5B4B5B4B5B4B5B4B5B4B5B4
%B5B4FC99CEC9C9BCC9C9CE93FCB4B5B4B5B4B5B4B5B4B5B4B5B4B5B4CAFD
%07FFCAB4B593B592BBB4B592BB939392B5929392BB93B592BB93B592B5B4
%A17D76A7FD07FFAFFD10613DFD0F61AFFD05FFC2FD0EBBB4BBCFCECEBCBC
%BCCFCECE93B5FD0EBBC3FD07FF92B4B4B4FCB4FCB48CB4FCB4FCB492B4FC
%B4FCB48CB5FCB4FCB4B4B48CA176CAFD07FFA96136613661366136613661
%366136615A8436615A613661366136613661366136AFFD05FFCAFD0DC8B5
%92C9C8C9C8C3A8C2C9C9C8C992BBFD0DC8CAFD06FFCAB48CB48CB48CB48C
%B48CB48CB48CB48CB48CB48CB48CB48CB48CB48CFC9A76A8FD08FF60615A
%6160615A6160615A61618483CEC8A7836160615A6160615A6160613661AF
%FD05FFCFCDC8CDC8CDC8CDC8CDC8CDC8C8B4C9C2CAC2CEBCCAC2CEC2CAC2
%C892C8C8CDC8CDC8CDC8CDC8CDC8CDFD08FFBBB492B5B4B592B5B4B592B5
%B4B592B5B4B592B5B4B592B5B4B592B5B5A176CAFD07FFA8613661366136
%613661366136615AC8A7A8C88436613661366136613661366136AFFD05FF
%CFC7C8C1C8C7C8C1C8C7C8C7C2C7CDC8C2A1C2C9C2A8C3C9C2A1C2C8C8C1
%C8C8C8C7C8C1C8C7C8C1C8C7FD09FFB5B5B4BBB5B5B4BBB5B5B4BBB5B5B4
%BBB5B5B4BBB5B5B4BBB5B5B4C37D76A1FD08FF6160537D597D597D597D59
%616161C86014CE83616160527D597D597D597D5961AFFD05FFCFCDC1BCBB
%CDC8C2BCC8C8C2BCC2C8CEC2CAC2CEC2FFC2CEC2CAC2CEC8C2BCC2C8C8BC
%C2C8CDBCBCC1CDCFFD07FFCABBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5
%BBB5BBB5BBB5BBB5BBA1A876CAFD07FFA86159A7A8AF5959A8AFA8593661
%59CEA784C8A73661597DA8AF7D537DAFA85336AFFD05FFCFC7C2A1BCC7C2
%9AC3C1C8BBC3BBC8C8C2A0C2CEC8C1C9CEC2A0C2C8C899C3BBCDBBC39AC8
%C7BC9AC1C8FD09FFB5B5B4BBB5BB93BBB5B5B4BBB5B5B4BBB5B5B4BB93BB
%B4BBB5B5B4C3A876A1FD07FFAF365AA8AFAF7D53AFAFAF53613661A7CEC8
%CE60613D5A83AFAF8453AEAFAF5361A9FD05FFCFC8C2AFC2C8C1CAA8C8C7
%C9A8C2C8CEC9CEC9C9C2C2C2C9CEC9C9CEC7C3A8C2C8C2A8C9C7C8A0CBC1
%CDCFFD07FFCABBB5BB93766F764B766FBBB5BBB5BBB5BB6F754B764B7593
%BBB5BBA0A876CAFD07FFA96135A8AFAF5959A8AF84593661366183A75A61
%36612FA8AFAF595984AF845936AFFD05FFCFC7C29AC2C7C29AC3C1C899C3
%BBC8C8CEC9C89AA89AA99AC9C9CEC8C899C399CDC1C39AC8C7BC9AC2C8FD
%08FFCAB4B56F4B4B51FD054B93B4BBB4934B514B514B514B514BBBB4A1A1
%76A7FD07FFAF3D5AA8AFAF7E59AFAFAF59616085616160FD04615A83FFAF
%8453AEAFAF5361A9FD05FFCFCDC2AFC2C8C1CAA8C8C7C9AFC2C8CECECFC2
%C29ABC9ABCC2CFC9CEC7C3A9C2C8C2A9CAC7C8A1FFC1CDCFFD07FFCABB93
%A0A0A076A07CA0A0A176BBB5BB6F767593757D759975766FBBA1A876CAFD
%07FFA96135A8AFAF5959A8AFA87D3784A0A1A0A77CA783612FA8AFAF7D59
%A8AFA85936AFFD05FFCFC8C29AC2C8C299C2C1C8BBC2BBC8C8CECEC26E75
%936F6EC2CECEC8C8BBC2BBCDC1C299C8C7BC9AC2C8FD08FFCAB499C9CEA0
%A7CECEA0CECEA792BBB5756FBBB4BB99BBB4BB6F75B5A17D76A8FD08FF61
%5A84FFAF7D53AFAFAF5361847620767C4B4BA8615A7DFFAF8452AFAFAF52
%61AFFD05FFCFCDC8C8C8CDC8C8C7CDC8C8C7C8C8CEC9CFC26F4B994B75C2
%CFCECEC8C8C7C8C8CDC7C8C8CDC8C8C8CDCFFD07FFCABB93CECEA7A0CEC9
%A0C9CFA0BBB5BB6FC2A7CAA1C3A1CAC39A6FBBA1A875CAFD07FFA86159A8
%AFAF595984AFA8593684754B51A0204B7D615983AFAF7D5384AFA85936AF
%FD05FFCFC7C8C1C8C7C8C1C8C7C8C7C7C7C8C8CEC9C24B7593756FC2C9CE
%C8C8C1C8C7C8C7C8C1C8C7C8C1C8C7FD08FFCFB4997CA1767CA0A075A07C
%A093B5926FA0AF8BAFA8AF8BAF756FB4C3A176A1FD07FFAF3D5AA8FFAF7D
%53FFAFAF53618476277C7C4B4BA83D5A83FFAF8452AFAFAF5361AFFD05FF
%CFCDC2C3BBCDC1C2A0C8C8C2A0C2C8CEC9CFC2754BBB4B75C2CFCECEC7C2
%C3C2C8C2C2C2C8C8BCC3C1CDCFFD07FFCABB93CECEA7A0CFC9A7C9CFA0BB
%B5BB6FA1AFAFAFFFAFAFAF9A6FBBA1A876CAFD07FF84152FA184A852537D
%A8A1531460754B51A0204B59152F7D84A859537DA8A15314AFFD05FFCFC7
%C2A1C2C7C2A1A1C1C8C2A899C8C9CEC9C26F7593766FC2C9CEC8C89ACABB
%CDBBCAA0C8C1C2A1C1C8FD09FFB599A7CEA0A0CECEA0CECEA793B5B4759A
%AFA8A8A1AFA8CF756FB4A17D76A7FD07FFAF14362F592F3636592F593515
%5A7C4BA0A0764B8414362F592F3636592F59351585FD05FFCFC8C1CABCC8
%C1C3A1C8C8C2A1C2C8CECECFC2756F994B99C2CFC9CEC8C2A1C2C8C2A1C3
%C8C89AC3C1CDCFFD07FFCABB937C767C75A0767676A075BBB5BB6FBBB5C2
%C9C9C9C2B5996FBBA1FF76A8FD07FF841414151415141514141415146075
%4B75A0274B5914141514141415141414151485FD05FFCFC7C29AC2C7C29A
%C3C1C899C3BBC8C8CECEC24B7593516FC2C9CEC8C899C3BBCDC1C39AC8C7
%BC9AC1C8FD08FFCAB4994B4B4B75FD064B92BBB56F6F9ABBCEC8CEBB9A6F
%75B4A17D76A7FD07FFAF1437143714371437143714155AA027767C4B4B84
%14371437143714371437141585FD05FFCFCDC8C8C8CDC8C8C7CDC8C8C7C8
%C8CECECFC2754B994B75C2CFCECEC8C8C1CDC8C8C1C8C8CDC7C8C8CDCFFD
%07FFCABB93764B764B764B764B764BBBB5BB6FC2C2C8C8CEC8C8C1A06FBB
%A1FF76CAFD07FF8414143614141436141414361460754B51A02075591514
%3614141436FD051485FD05FFCFC7FD05C8C7C8C8C8C7FD04C8CECEC26E99
%939992C2C9CEFD04C8C7C8C8C8C7FD06C8FD08FFCFB5994B754B764B754B
%764B7593BBB57575A0759F99A0759F7575B4CAFFCAA8FD07FFAF14141415
%14141415FD041452754B75754B4B7C14151415141414151414141585FD05
%FF51FD044B514B4B4B514B4B4B514B514B514B6F4A6F6F6F4B514B514B51
%4B4B4B514B4B4B51FD044B76FD07FF516F4B754B6F4B754B6F4B754B6F6F
%754B4B20FD064B6F4B754BA8FD09FFA885848560858485608584857EA1A1
%A77DA7A1A77D858485608584856085848560FD06FFA176A17D7D7DA17D7D
%7DA17D7D7DA17D7D7DA1FD077DA17D7D7DA17D7D7DA17D7D7DA17D7D76A8
%FD06FFA8FD047DA17D7D7DA17D7D7DA17D7D7DA17DA17DA17D7D7DA1FD04
%7DA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD08FFC393BBA0FD7BFF
%C38CCAC3FCC3FD1CFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFD25
%FF7DA17DA1A7FD19FFCACFCACACACFCACA93C3CACA9ABCCACACACFFD05CA
%FD12FFBCBBBBC2BCC2BBBBBBC3C2C2B5BBBBC3BCC2B5BBC2FD24FF7D4B4B
%26A8FD18FFCAB5B4B5B4B5B4BBB4BCFD04FFB5B4B4B5B4B5B4B5B4FD12FF
%CAB5B4BCFFFFCABBB4BBCAFFCAB5B4BCFFFFC9B5B4BBCAFD0FFFCAFFCACA
%CAFFCACFCAFFCACFCAFFCACFCAFFCAFFA1754B75A8FFCACFCAFFCAFD13FF
%A17D537D7D7D537E92FCCACA8C93597D7D7D537D77CAFD12FFCAB4BBC2FF
%FFCAB5B5BCFFFFFFB5BBBBFFFFFFBBBBB5CFFD0DFFCAB5BBB5BBB5C8C9BB
%B5BBB5BBB5BBB5BBB5BBB5BBB5BB4B764BBBB5BBB5BBBBBCCFFD12FFAF3D
%613D613D613D6093C2BC935A673D613D613D61AFFD12FFBCB5B4CAFFFFC3
%B5B4C2FFFFCABBB4BBCAFFFFC2B4B5C2FD0DFFBCB5B4BBB4C2A7CEC8B5B4
%BBB5B5B4BBB5B5B4BBB5B593764B7592BBB5B5B4BBB4CAFD12FFA961595A
%595A365959595276535959615959595A5AFD12FFCABBB5BBCAFFFFC3B4BB
%C2FFFFFFBBBBB5FFFFFFC3BBB5BCFD0CFFCABBB5BBB4C9CE7C4BCEC9BBB4
%BBB5BBB5BBB5BBB5BBB5BB4B766FBBB5BBB5BBB5B5C2FD12FFAF5A7DA8AF
%7D607DAFA85959AFA87D367DA8A85361AFFD11FFC98CB48CFFAFFF9AFC8C
%BCAFFFA8B58CFCA1FFAFC98CB48CCAFD0BFFC9B4B5B4C2A7764B4B4BC9C8
%BBB4BBB4B5B4BBB4B5B4BB93514B75B5B5B4BBB4B5B4BBCAFD11FFA86153
%A87D7D367D7DA7537D7DA7535A52A87D5936FD12FFCABB92BBC9FFCFC892
%B5C1CFCFCFBBB492C9CFFFC8BB92C2FD0CFFBCB5B5C9CE7C4B754B7575CE
%C9BBB5BBB5BBB5BBB5BBB5BB939993BBB5BBB5BBB5BBB5CAFD12FF5A7DA8
%AF7D617DAFA87D7DAFA87D5A7DA8A85961AFFD11FFCFC7C8C8C89FFD05C8
%C1C8A5CDC8C8A5C8A5FD04C8FD0BFFCABBB4C9C9764B53597E52754BA7C9
%BBB4BBB4BBB5B5B4BBB5B5B4BBB5B5B4BBB5B5B4B5C2FD11FFA96159A883
%7D367D7DA7537D7DA8595A7DA8835936FD0DFFC9C3C9C3CACFC8C8C87CA1
%76C8C8CD7B7D7D7CC8CDC87C7C7DA0CDC8CEFD0BFFCAB4C9C9764B5284CF
%CEAE52754BC9C9BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB4BCFD11
%FFAF36615A5A5A615A5A59615A5A356161605A605A61AFFD0CFFBBFFCACA
%BCC9C7C89FA8AFA97BC8C7A085AF7CC8C7C87CAF85A0C7C8C8FD0BFFBCC8
%A7764B6F5284838484594B754BA7C9BBB4B5B4BBB4B5B4BBB4B5B4BBB4B5
%B4BBB4B5B4CAFD10FFA9615359535A36595359595A535959615959525A36
%AFFD0CFFC9CAC3FFC3C2CDC8C87DA87DA6C8CD7BA8847DC7CDC87D84A87C
%CDC8CEFD0BFFCEC9764B764B7DA8AE84CF59764B764BC9C9BBB5BBB5BBB5
%BBB5BBB5BBB5BBB5BB93BB93BCC9FD05FFCAFFCAFFCAFFCAFFCAFFCAFF36
%7DA8AF7D617DAFA87D7DAFA87D5A7DA8AE5961A8FFCAFFCAFFCAFFCAFFCA
%FFCAC2CA93CAC3CFC7C89F7D7D7D9FCDC8A07DA876C8C8C876847DA0C8C8
%C8FD0BFFCF764B754B7553AEA7AECE594B754B514B7CFD124BA8FD05FFBB
%B5B4BBB4B5B4BBB4B5B4BBBB6152A77D7D367D7D7D537D7D7D526176837D
%595ABBB4BBB4B5B4BBB4B5B4BBB4BCC3CAC3CACAC9CDC8C884FFAFA6C8CD
%A0AFAFA7C7CDC7A7AFAF7CCDC8CEFD0CFF76754B764B9AC2C3A0C876754B
%764B75FD054B514B4B4B514B4B4B51FD054BFD06FFCA777D537D537D537D
%537D527D5A7DA8AF7D607DAFA87D59AFA87D367DA8A85961537D537D537D
%537D537D537DCAC2CAA8CFC3CFC7CD7B52525275C8A575527D4BA6C8A04B
%7D5251A5C8C8FD0CFF764B754B516E93929392934B514B754B4B264B4B4B
%264B4B4B264B4B4B264B4B4B264BA8FD05FFAF1514151415141514151415
%146153837D7D367D7DA7537D7DA8535A52A87D5936151415141514151415
%141514FFC9C2B5C3CACFCDCDA6517651A0C8CD75755176A6CDA076517575
%CDC8CEFD0CFF76764B764B764B764B764B764B764B764B514B4B4B514B4B
%4B514B4B4B514B4B4B514BFD07FF36151437143714371437143D6161365A
%5A615A5A5A615A5A5A6160615A5A5A61143714371437143714371461FFC2
%CAA1CAC3C3BBC1BBC1BBC2BBC1BBC2BBC1BBC2BBC1BBC2BBC1BBC1BBFD0C
%FF764B754B754B754B514B754B754B754B4B274B527D597E597D597D595A
%5983594B264BA8FD05FFAF372F5352590E36525952361461597D52593659
%527D5959527D5961537D525936150D53525914365259523636FFC3FFCACA
%CAC2B5B5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBB5BBCAFD0BFF76
%754B764B765384607D4B764B764B764B4B4B84CECF84CFCE84C9CF84CFCE
%844B4B4BFD07FF1459A7FF7D3635A8AFA80D3D367DAEAF7D607DAFA87D7D
%AFA87D5A7DAEAF59611436A7FFA7362FA8AFA82F3DFFC2C393C3C3CFC7C8
%C7C8C7C8C7C8C7C8C7C8C7C8C1C8C7C8C7C8C7C8C8FD0BFFA8764B754B75
%528584A884594B754B75FD044B59CEC984A7CE83CEC984C9CE594B264BA8
%FD05FFAF152F7D7D7C0D357C7D52361461527D7D7D367D7D7D537D7D7D52
%60527D7C7D36142F7D7D7D0D35767D763536FFC9C9C2CACACFCDC8CDA6C8
%9FCDC8CDC8CDC8CDC8CDC8C89FC8C8CDC8CEFD0CFF76754B764B84A88560
%AE84764B764B764B4B4B84ADCF84CFA784A7CF84CFA7844B4B4BFD07FF14
%59A7AF7D3635A8AFA80D3D5A7DAEAF7D6160613661606136615A7DAEAF59
%61145AA8AF83362FA8AFA82F3DFFC2FFC3FFC3CFC7C89F7D7D7D9FCDC8A8
%848584A7C7C8767D7DA0C8C8C8FD0CFF764B754B76599A777D9A7D4B754B
%75FD044B59FD0584608483848484594B4B4BA8FD05FFAF152F7D7D7D0D36
%7C7D52361461527D7D7D36595259527D52535361527D7C7D36152F7D7D7D
%0D36767D523636FFC3C3B5C9CACACDC8C884FFAFA0C7C98BAF8BAF84C8C1
%A1AFAF75CDC8CEFD0CFF76754B754B7DB49A9AB476524B764B764B4B4B7E
%CECE84CEC9A8C9CE84CECE84274B4BFD07FF14360D36143714360D36143D
%6161365A5A616FBBB59993BBB47636615A5A5A6114360D36143714360D36
%143DFFC3C39AFFC2C9C7C89F7D7D7D9FC8A68B858B8584C7C876A87DA0C7
%C8C8FD0CFF764B754B5253B59A9AB4A151754B754B4B264B59CEC884C9CE
%83CEC984C9CE594B264BA8FD05FFA8370D5959590D36527D53141461597D
%597D3699B4BB6F93B4B57661537D595936150D59597D0D36527D523614FF
%C3FFFFFFC3C2CDC8C87DAF84A6C8CE858B858B84CDC7A1A8A87CCDC8CEFD
%0CFF76764B76517DB5A176BB76524B764B764B514B7EA8AE84AEA88BA8AE
%84AEAE844B4B4BFD07FF1435A7FFA1362FCFAFA80D3D5A7DAFFF7D6175BB
%B59993BBB57636A8AFAF59611436A8FFA8362FA8AFA80D3DFFBCC3C2C3C3
%CFC7C89FA8AFAFA0C8A6AFAFAF8BA8C7C87CAFAFA0C7C8C8FD0CFF764B75
%4B5253BBA0A1B4A152754B754B4B274B4C5228522E5228522E522853524B
%264BA8FD05FFAF372F7C7D7D0D35767D76361461527D7C7D369AB4BB9399
%B4BB7660527D7C5936152F7C7D7D2F35767D763536FD06FFCFC8C8A04B52
%4B7CC8C985AF84AF83CD9F4B52524BC8C8CEFD0CFF76754B76517DB4A09A
%B576764B764B76FD064B4A4B4B4B4A4B4B4B4AFD044BFD07FF1459A8FF7D
%3635AEAFA80D3D367DAFAF7D6175BBB59993BBB49A367DAFAF59611436A8
%FFA7362FA8AFA82F3DFD06FFCFC7C89F7675759FC8A68B84858584C7C875
%7575A0C8C8C8FD0BFFA8764B754B5277B576A1B4774B754B75FD044B264B
%4B4B264B4B4B264B4B4B264B274BA8FD05FFAF150D7D52520D36527D5236
%1461527D5259369AB4B56F99B4B57561527D525936140D7D52520D36527D
%523636FD06FFCFCDC8CDC8CDC8CDC8CE8BAF8BAF84CDC8CDC8CDC8CDC8CE
%FD0CFF76754B76517DB4A19AB476524B764B76FD134BFD07FF1437141414
%3D14151437143D61615A61616199BBB59A93BBB49A616136616161143D14
%14143D14371437143DFD06FFCFC1C8C1C8C1C8C1C8A08484858483C1C8C1
%C8C1C8C1C8C2FD0CFFA0757675767DA07CA19A7D51767576757651754B75
%51754B7551754B7551754B754B75A8FD05FFA8360D360D360D360D360D36
%355A365A5A5A357692B56F9993B56F5A365A365A36360D360D360D360D36
%0D3635A8FD05FFBCB5B4B5B4BBB4B5B4BB93BB93BBB5B5B4BBB4B5B4BBB4
%BBCAFD0BFFC8CDC8C8C8CDC8C8C8CDC8C8C8CDC8C8C8CDC8C8C8CDC8C8C8
%CDC8C8C8CDC8C8C8CDC8FD05FFA84B274B274B4B4B274B4B4B274B4B4B27
%4B4B4B264B4B4B264B4B4B274B4B4B274B4B4B274B4B4B274B4B4B274B4B
%FD05FFCAC3C9C3C9C3C9C3C9C3C9C3C3C3C9C3C9C3C9C3C9C3C9C3FD0CFF
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFCFFD05FF7DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17D
%A77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA77DA17DA7FDFCFFFDFC
%FFFDFCFFFDD4FFCAFD21FFCAFD5DFFA8A8FD1FFFC9CEC8CFFD23FF8436A8
%FD35FFA1FD1DFFCFCFC8CEC9CEC8CEC9FD20FF8437143785FD34FFA7CAFD
%05FFA776CFFD13FFCECEC8CECECFA7CEA7CEC8CFFD1DFF5A140E14141460
%FD32FFA84AA1FD04FF857E2785A9FD10FFCFC8CEC9CEC8CE36363560C9CE
%C8CECAFD1AFF361514371437141560FD30FF6136353685FFFFFF36143714
%85FD0EFFCFCEC8CECECEC984363D83AE84CFC9CFC9CEC9FD18FFA8A1A9AF
%A6A6A7AFA8A0AFFD2DFFBCBB93BB93BB93BBB5BB93BB93BBB5BBCAFD0AFF
%CFC8CEC9CEC9CEC9A736A784A8A7AEA7CEC9CEC9CEC8CECFFD16FFC2FFFF
%CDC7CDCEFFBCFD2EFFC2B4BBB4BBB4BBB4B5B4BBB5B5B4BBB5FD09FFCFCE
%C8CEC9CEC9CEC9CEA884C984A7C9A0C9C9CEC9CECECEC8CEC9FD14FFCAC3
%FFCFC7C8C7C8CAC2CAFD2DFFBC936F9A75936F9A7599939A759A92BBCAFD
%06FFCFC8C8C8CEC9CEC9CEC9CEC9AE84CE83AEC2BBC2CEC9CEC9CEC9CEC9
%CEC8CECAFD12FFC3FFCECDC8CECFFFBCFD2EFFC293AEAFAF6FA1AFAF7C99
%84AF8B9AB5FD06FFCFC8CEC9CFCECEC9CFCECEC9CFA0C2C88584CEC9CFCE
%CEC9CFCECEC9CFCECEC8CEFD0FFFBBBCBBBBBBBCBBBCBBBCBBBBBBBCBBCA
%FD2AFFBC9383AF849376AFAF7D92A8AFAF6FBBFD06FFC9CEC9CEC9CEC9CE
%C9CEC9CEC9C8C1A71460C9CEC9CEC9CEC9CEC9CEC9CEC9CEC8FD0FFFBBB4
%B5B5B5B4B5B5B5B4BBB5B5B4BBCAFD11FF7DA7A1A17DA7A1A17DA7A1A17D
%A7A1A17DA7A1A17DA7A1A17DBC937D7D7D939A7D7D769976A17D99B5FD06
%FFCFC8CFC9CEC9CEC9CEC9CEC9CECECF36361484CECEC9CEC9CEC9CEC9CE
%C9CECECECFFD0EFFB59A769AB4B5BBC2BBBBB499769A92CAFD10FFA14B4A
%4B4A4B4A4B4A4B4A4B4A4B4A4B4A4B4A4B4A4B4A4B4A4B929984AF849376
%AFAFA192A8AFAF6FBBCAFD05FFCAC8C8C9C8C8C8CEC8C8C8C9C8C8C8C9A6
%C9A6CEC8C8C8C9C8C8C8C9C8C8C8C9C8FD0FFFBB7DAF7DB5C1CDA6CDC1BB
%9AAF84BBCAFD11FF767D527D527D527D527D527D527D527D527D527D527D
%527D52BC9384AFA893A084AF7C9983AF8499B5FD07FFCFCEC9CEC9CECECE
%C9CEC9CEC9FD07CEC9CEC9CEC9CEC9CEC9CEC9FD10FFB5A1AF7D92C8C8A0
%9FC8B49AAFA892CAFD11FFAF36613D6136613D6136613D6136613D613661
%3D6136613D619ABB6F6F6F996F756F9993756F7593BBCAFD07FFC9CEC9CE
%C9A7A0CEA7CEC9A0757C7576757CA6CEA7CEC9A0A0CEC9CEC9CFFD10FFBB
%7DAF7DB5C2CDC8CDC8BB75AF84BBCAFD11FFAF61366160615A6160615A61
%60615A6160615A6160615A6161BC937D7D7D939A7DA175BB7CA17D99B5FD
%09FFC9CEC9C94B76C9CEC8C975754B764B754BA0C9CEC9C94BA0C9CEC8CF
%FD07FF92B592B592B592B592B5929A767692BBA5C8A5C1B499767693B592
%B592B592B592B592CAFD07FFAF3661366136613661366136613661366136
%61366136613661999384FF8B9376AFAF7D6EAFAFAF6FBBCAFD08FFC9C8CE
%A64B4BC9C8CEA0754B754B754B4B4BCEC8CEA04B75CEC8C8C9FD07FFB48C
%936E928C936E928CBB939393BBB5BBBBBCB5BB939993BBFC926E938CB46E
%938CB4C9FD07FFA85A59605A5A595A5A5A595A5A5A595A5A5A595A5A5A59
%5A5ABC938484846FA084A876997DA87D9AB5FD09FFC9CEC9C94B76C8CEC8
%C951764B764B764B7CC9CEC9C94B7CC9CEC8CFFD07FF8C937DAF6F8C76AF
%7CB4927D847D92BBB4B5B4BBB476848393B46FAF7D926E8484938CCAFD06
%FFA17D7DA8767D7D837C7D7D837D7C7D837D7D7D837D7D76A87DA793937D
%A87D9375A87D76937D7D836FBBFD09FFCEC8CEA6754BC9C8CEA6764B754B
%754B4B75CEC8CEA07575CEC8CEC9FD07FFB492AFAF998C7DAFA18CB57DFF
%7DB56F9A769A75BB76AF84BBFC9AAFA88C9384AF6FFCC9FD06FFA884FFAF
%A884FFAFAF83FFAFAF7DAFAFFF7DAFAFAF84A8AFAFAFBC93AFAFAF6FA1AF
%FF7D9984FFAF99B5FD09FFC9CEC8C94B76C8CEC9C94B766F764B754B76C8
%CEC9C94BA0C9CEC8CFFD07FF8C9384AF6EFC7CAF7CB4927DAFA1927D8BAF
%8B7D8C9AAF8492B46FAF7D926EA88B938CCAFD06FFA1A8AFAF7DA8AFAF84
%84AFAFA87D84AFAF7D84AFAFA87DAFAFAF9399767D7699757D7D76937D7D
%7D93BBCAFD08FFCEC8CEA0754BC9C8CEA6754B5936362E7575C9C8CEA04B
%75CEC8C8C9FD07FFB4927D7D998C7C7DA08CBB76A876B57DFFAFFF7DB575
%A87CBBB4997DA192937DA893B4C9FD06FFA884FFAFA884FFAFAF83FFAFAF
%7DAFAFAF7DAFAFAF84A8AFAFAFBC93756F9A93996F996FBB6F996F99B5FD
%09FFC9CEC8C94B76C8CEC9C96F5937613D3D5276C8CECEC94BA0C9CEC8CF
%FD07FF8C92686E8CB46E6E68B4B5936E99927DAFAFAF7D92BB6E9393B48C
%6E68B48C6E68928CCAFD06FFA17D7DA8767D7DA87D7D7DA87D767DA87D7C
%7DA87D7D76A87D7D93997DAF839976AF847D938484A86FBBCAFD08FFCEC8
%CEA6764BC9C8CEA6752F3D1436142F75C9C8CEA04B75CEC8C8C9FD07FFB4
%6E8383938C7C847C8CBB76A876BB76A884AE7CB575A87DBBFC9A847D8C93
%7D846EB4CAFD06FFA884AFAFA784AFAFA87DAFA8AF7DAFA8AF7DA8AEAF83
%A7AFAFA8BB93AFAFAF6FA1AFAF7C99A8FFAF9AB5FD09FFC8CEC8C94B76C8
%CEC8C96F353D3D36612E76C9CEC8C94B7CC8CEC8CFFD07FF8C9384AF6F8C
%76AF7D8C927DAFA192BB92B592BBB476AFA892B46FAF838C68AFAF938CCA
%FD06FFA1A8AFAF7DA8AFAF84A8AFAF847DAFAFAF8484AFAFA87DAFAFAF93
%93527D52936F7D7D766F7D7D7D6FBBCAFD08FFC9C8CEA6514BC9C8CEA075
%2F61363D362F6FCEC8CEA04B75CEC8C8C9FD07FFB46EAFAF998CA1AFA18C
%B57DAF7DBB9399939993BB76AF84BBFC9AAFA88C9384AF6FB4CAFD06FFA8
%A8AFAFA8A8FFAFAF84FFAFAF7DAFAFFF83AFAFFF84A8AFFFAFBC93A8AFAE
%6FA1AFAF7C9984AF849AB5FD09FFC9CEC9C94B76C8CEC8C96F593D613661
%2F9AC9CEC9C94B7CC9CEC8CFFD07FF8C937DAF6F8C76AF76FC927D847D92
%A0A7A0A6A7939A848393B46FAF7D92688484938CCAFD06FFA183A8A876A7
%A8A87DA1A8A8837D84A8847D7DA884A17CA884A8939384AF849376AFAF7D
%92A8AFAF6FBBFD09FFCEC8CEA6754BC9C8CEA6752F61363D372F6FCEC8CE
%A07575CEC8CEC9FD07FFB4929368938C93689392BB939993B57CCEA0C9A0
%9993936FBBB493689392926E9392B4C9FD07FF7D59535953595359535953
%5953595359535953595359535953BC939A769A939A759A99BB759A7699B5
%FD09FFC9CEC8C94B76C8CEC9C94B5A605A59612F76C8CECEC94BA0C9CEC8
%CFFD07FF8C93767D6EFC757D75B492767D9A9276FD047C93997D7C92B46F
%7D76928C7C7C938CCAFD07FFAF3661366136613661366136613661366136
%6136613661366199B5767C75996F76769A9376767C93BBCAFD08FFCEC8CE
%A0754BC9C8CEA6752F613636362F75C9C8CEA04B75CEC8C8C9FD07FFB493
%AFAF998CA1AFA78CB57DFF7D93A0CFA0CFA7999AAF84BBB49AAFA88C9384
%AF6FB4C9FD07FFAFFD0B615A6161615A6161615AFD0461BC93AFAFAF93A1
%AFFF7D9984FFAF9AB5FD09FFC9CEC8C94B76C8CEC9C94B5A613D36612F76
%C8CECEC94BA0C9CEC8CFFD07FF8C9384AF6FFC7CAF7CB4927DAFA192A0A6
%A0A0A7929AAF8492B46FAF7D926EA88B938CCAFD06FFA87D535953595359
%535A36615A615A615A615A615A615A61606193997DAF7D9976A8847C9383
%84A893BBCAFD08FFCEC8CEA0754BC9C8CEA66F2F61363D36536FC9C8CEA0
%4B75CEC8C8C9FD07FFB46EAF8B998C7DAF7D8CB57DAF7DB5A0CE7CC9A699
%75AF8399FC9AAF848C9384AF6FB4CAFD06FFA87DAEA8A17DAEA8A8765A36
%3D363D363D363D363D363D363D52BB937D84836FA083A876997DA87D99B5
%FD09FFC9CECECE75A0CECEC9CE752F373D373D2FA0CECEC9CE4BA0CECEC9
%CFFD07FF8C926F7568FC6E996EB4B4996F9992A0CEA0C9C993936F9992B4
%68756F928C756F928CCAFD06FFA1AEAFAF7DA8AFAF84A87D2FFD04140E14
%14140E14141428A8999384FF8B9376AFAF7D6EAFAFAF6FBBCAFD07FFC8C8
%C8C9C8C8A0CEFD04C87C5F5983597CC8CEFD04C8A6C8C8C9C8C9FD06FFB4
%8CB4FCB48CB4FCB48CBBB5BBB5BB7CCE7CC9A099B5BBB5BBB4B4FCB48CB5
%FCB48CB4CAFD06FFA8A8AFAFA8A8AFAFAF84FF7D36143714371437143714
%3752AEAFBC937D847D6FA07DA876997DA87D9AB5FD07FFCFC8C8CDC8C8C8
%CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8CDC8C8C8FD06FF2F362F
%362F362F362F362F362F362F360D360D362F362F362F362F362F362F362F
%360DA9FD06FFA184A8AF7CA8A8AF7DA7AFAF762F14140EFD051452A7AFAF
%93B592B592B592B592B592B5929292BBCFFD05FFCACEC9CEC9CEC9CEC9CE
%C9CEC9CEC9CEC8CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9FD05FF613D6136
%613D6136613D6136613D6136613D6136613D6136613D6136613D6136613D
%61A9FD06FFCF7DA87D7D7D847D7D7D847D7D5361606136616061597D7D7E
%7DA1BCBC9ABC9ABCBCC2BCC2BCC2BCC2BCFD07FFC9CFCFCFC9CFCFCFC9CF
%CFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFFD35FFAFFFFFFFAF
%FD0BFFAFFFFFFFAFFFAFFFAFFFFFFFAFFD32FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-09-03T10:14:28+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-09-03T10:14:28+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-09-03T10:14:27+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>252</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FULqcOpTWpTTrqO0uagiaaE3C07jgHi6/62A30TEjqxz8sINUj8qWbXl3FcQP&#xA;GPqsUcJiaMB35c3MknOu1Nlp75DHdNucji2ZbljS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWI/mZ59tvJ/l9rkcX1O6rFp1ue703dh/JHWp+gd8&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:A73B78F13933E411B336B00FA2EC5609</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:A73B78F13933E411B336B00FA2EC5609</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3F72A1FDEB32E411B3B78DE984641042</stRef:instanceID>
            <stRef:documentID>xmp.did:3F72A1FDEB32E411B3B78DE984641042</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3E72A1FDEB32E411B3B78DE984641042</stEvt:instanceID>
                  <stEvt:when>2014-09-03T00:56:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3F72A1FDEB32E411B3B78DE984641042</stEvt:instanceID>
                  <stEvt:when>2014-09-03T00:56:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A73B78F13933E411B336B00FA2EC5609</stEvt:instanceID>
                  <stEvt:when>2014-09-03T10:14:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -409.02 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 409.02 li
420.035 409.02 li
420.035 0 li
cp
clp
339.922 123.519 mo
291.772 123.519 li
291.772 127.285 li
339.922 127.285 li
388.07 127.285 li
388.07 123.519 li
339.922 123.519 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.380392 .231373 .192157 rgb
f
394.506 120.272 mo
391.527 120.272 li
391.527 43.9688 li
394.506 43.9688 li
394.506 120.272 li
cp
.498039 .309804 .254902 rgb
f
393.017 48.207 mo
384.72 48.207 li
384.72 46.7178 li
393.017 46.7178 li
393.017 48.207 li
cp
f
393.017 52.4766 mo
384.72 52.4766 li
384.72 50.9883 li
393.017 50.9883 li
393.017 52.4766 li
cp
f
393.017 56.7471 mo
384.72 56.7471 li
384.72 55.2588 li
393.017 55.2588 li
393.017 56.7471 li
cp
f
393.017 61.0186 mo
384.72 61.0186 li
384.72 59.5293 li
393.017 59.5293 li
393.017 61.0186 li
cp
f
393.017 65.29 mo
384.72 65.29 li
384.72 63.8008 li
393.017 63.8008 li
393.017 65.29 li
cp
f
393.017 69.5596 mo
384.72 69.5596 li
384.72 68.0713 li
393.017 68.0713 li
393.017 69.5596 li
cp
f
393.017 73.8301 mo
384.72 73.8301 li
384.72 72.3418 li
393.017 72.3418 li
393.017 73.8301 li
cp
f
393.017 78.1016 mo
384.72 78.1016 li
384.72 76.6123 li
393.017 76.6123 li
393.017 78.1016 li
cp
f
393.017 82.3721 mo
384.72 82.3721 li
384.72 80.8838 li
393.017 80.8838 li
393.017 82.3721 li
cp
f
393.017 86.6426 mo
384.72 86.6426 li
384.72 85.1543 li
393.017 85.1543 li
393.017 86.6426 li
cp
f
393.017 90.9131 mo
384.72 90.9131 li
384.72 89.4248 li
393.017 89.4248 li
393.017 90.9131 li
cp
f
393.017 95.1846 mo
384.72 95.1846 li
384.72 93.6953 li
393.017 93.6953 li
393.017 95.1846 li
cp
f
393.017 99.4551 mo
384.72 99.4551 li
384.72 97.9658 li
393.017 97.9658 li
393.017 99.4551 li
cp
f
393.017 103.726 mo
384.72 103.726 li
384.72 102.236 li
393.017 102.236 li
393.017 103.726 li
cp
f
393.017 107.996 mo
384.72 107.996 li
384.72 106.507 li
393.017 106.507 li
393.017 107.996 li
cp
f
393.017 112.268 mo
384.72 112.268 li
384.72 110.778 li
393.017 110.778 li
393.017 112.268 li
cp
f
393.017 116.538 mo
384.72 116.538 li
384.72 115.05 li
393.017 115.05 li
393.017 116.538 li
cp
f
384.72 123.519 mo
295.124 123.519 li
295.124 39.1484 li
384.72 39.1484 li
384.72 123.519 li
cp
1 .286275 .168627 rgb
f
339.922 30.96 mo
288.524 30.96 li
292.124 39.6455 li
339.922 39.6455 li
387.72 39.6455 li
391.318 30.96 li
339.922 30.96 li
cp
.901961 .101961 0 rgb
f
339.922 64.459 mo
292.124 64.459 li
292.124 73.1455 li
339.922 73.1455 li
387.72 73.1455 li
387.72 64.459 li
339.922 64.459 li
cp
f
314.623 60.9854 mo
301.324 60.9854 li
301.324 43.9688 li
314.623 43.9688 li
314.623 60.9854 li
cp
1 .913725 .611765 rgb
f
302.068 60.2412 mo
313.879 60.2412 li
313.879 44.7129 li
302.068 44.7129 li
302.068 60.2412 li
cp
315.368 61.7305 mo
300.579 61.7305 li
300.579 43.2236 li
315.368 43.2236 li
315.368 61.7305 li
cp
.498039 .309804 .254902 rgb
f
317.324 57.4863 mo
298.925 57.4863 li
298.925 60.4648 li
317.324 60.4648 li
317.324 57.4863 li
cp
.380392 .231373 .192157 rgb
f
335.823 60.9854 mo
322.523 60.9854 li
322.523 43.9688 li
335.823 43.9688 li
335.823 60.9854 li
cp
1 .913725 .611765 rgb
f
323.268 60.2412 mo
335.078 60.2412 li
335.078 44.7129 li
323.268 44.7129 li
323.268 60.2412 li
cp
336.566 61.7305 mo
321.778 61.7305 li
321.778 43.2236 li
336.566 43.2236 li
336.566 61.7305 li
cp
.498039 .309804 .254902 rgb
f
338.522 57.4863 mo
320.123 57.4863 li
320.123 60.4648 li
338.522 60.4648 li
338.522 57.4863 li
cp
.380392 .231373 .192157 rgb
f
357.021 60.9854 mo
343.722 60.9854 li
343.722 43.9688 li
357.021 43.9688 li
357.021 60.9854 li
cp
1 .913725 .611765 rgb
f
344.466 60.2412 mo
356.276 60.2412 li
356.276 44.7129 li
344.466 44.7129 li
344.466 60.2412 li
cp
357.765 61.7305 mo
342.977 61.7305 li
342.977 43.2236 li
357.765 43.2236 li
357.765 61.7305 li
cp
.498039 .309804 .254902 rgb
f
359.721 57.4863 mo
341.321 57.4863 li
341.321 60.4648 li
359.721 60.4648 li
359.721 57.4863 li
cp
.380392 .231373 .192157 rgb
f
378.22 60.9854 mo
364.92 60.9854 li
364.92 43.9688 li
378.22 43.9688 li
378.22 60.9854 li
cp
1 .913725 .611765 rgb
f
365.665 60.2412 mo
377.476 60.2412 li
377.476 44.7129 li
365.665 44.7129 li
365.665 60.2412 li
cp
378.964 61.7305 mo
364.177 61.7305 li
364.177 43.2236 li
378.964 43.2236 li
378.964 61.7305 li
cp
.498039 .309804 .254902 rgb
f
380.919 57.4863 mo
362.521 57.4863 li
362.521 60.4648 li
380.919 60.4648 li
380.919 57.4863 li
cp
.380392 .231373 .192157 rgb
f
314.623 52.4766 mo
301.324 52.4766 li
301.324 50.9883 li
314.623 50.9883 li
314.623 52.4766 li
cp
.498039 .309804 .254902 rgb
f
335.823 52.4766 mo
322.523 52.4766 li
322.523 50.9883 li
335.823 50.9883 li
335.823 52.4766 li
cp
f
357.021 52.4766 mo
343.722 52.4766 li
343.722 50.9883 li
357.021 50.9883 li
357.021 52.4766 li
cp
f
378.22 52.4766 mo
364.92 52.4766 li
364.92 50.9883 li
378.22 50.9883 li
378.22 52.4766 li
cp
f
334.814 92.873 mo
334.517 89.1768 326.917 83.79 317.58 83.79 cv
308.242 83.79 300.642 89.1768 300.345 92.873 cv
300.33 92.873 li
300.33 123.519 li
334.829 123.519 li
334.829 92.873 li
334.814 92.873 li
cp
f
345.029 92.873 mo
345.327 89.1768 352.928 83.79 362.265 83.79 cv
371.603 83.79 379.202 89.1768 379.499 92.873 cv
379.515 92.873 li
379.515 123.519 li
345.016 123.519 li
345.016 92.873 li
345.029 92.873 li
cp
f
310.878 102.551 mo
301.944 102.551 li
301.944 110.491 li
310.878 110.491 li
310.878 102.551 li
cp
1 .913725 .611765 rgb
f
310.878 92.6875 mo
301.944 92.6875 li
301.944 100.627 li
310.878 100.627 li
310.878 92.6875 li
cp
f
322.046 102.551 mo
313.112 102.551 li
313.112 110.491 li
322.046 110.491 li
322.046 102.551 li
cp
f
322.046 92.6875 mo
313.112 92.6875 li
313.112 100.627 li
322.046 100.627 li
322.046 92.6875 li
cp
f
333.214 102.551 mo
324.281 102.551 li
324.281 110.491 li
333.214 110.491 li
333.214 102.551 li
cp
f
333.214 92.6875 mo
324.281 92.6875 li
324.281 100.627 li
333.214 100.627 li
333.214 92.6875 li
cp
f
358.636 121.862 mo
358.636 122.73 357.933 123.436 357.063 123.436 cv
352.646 123.436 li
351.777 123.436 351.074 122.73 351.074 121.862 cv
351.074 118.681 li
351.074 117.812 351.777 117.108 352.646 117.108 cv
357.063 117.108 li
357.933 117.108 358.636 117.812 358.636 118.681 cv
358.636 121.862 li
cp
.2 .164706 .145098 rgb
f
365.903 121.862 mo
365.903 122.73 366.606 123.436 367.476 123.436 cv
371.893 123.436 li
372.762 123.436 373.465 122.73 373.465 121.862 cv
373.465 118.681 li
373.465 117.812 372.762 117.108 371.893 117.108 cv
367.476 117.108 li
366.606 117.108 365.903 117.812 365.903 118.681 cv
365.903 121.862 li
cp
f
364.984 97.6191 mo
364.984 97.8213 364.82 97.9854 364.618 97.9854 cv
359.911 97.9854 li
359.709 97.9854 359.545 97.8213 359.545 97.6191 cv
359.545 93.1738 li
359.545 92.9717 359.709 92.8076 359.911 92.8076 cv
364.618 92.8076 li
364.82 92.8076 364.984 92.9717 364.984 93.1738 cv
364.984 97.6191 li
cp
.356863 .733333 .909804 rgb
f
371.464 98.21 mo
371.464 98.4365 371.28 98.6211 371.053 98.6211 cv
365.769 98.6211 li
365.541 98.6211 365.357 98.4365 365.357 98.21 cv
365.357 93.2188 li
365.357 92.9922 365.541 92.8076 365.769 92.8076 cv
371.053 92.8076 li
371.28 92.8076 371.464 92.9922 371.464 93.2188 cv
371.464 98.21 li
cp
.901961 .101961 0 rgb
f
353.065 98.21 mo
353.065 98.4365 353.249 98.6211 353.476 98.6211 cv
358.762 98.6211 li
358.988 98.6211 359.172 98.4365 359.172 98.21 cv
359.172 93.2188 li
359.172 92.9922 358.988 92.8076 358.762 92.8076 cv
353.476 92.8076 li
353.249 92.8076 353.065 92.9922 353.065 93.2188 cv
353.065 98.21 li
cp
f
360.482 95.873 mo
360.482 96.3232 359.969 96.6875 359.335 96.6875 cv
359.335 96.6875 li
358.702 96.6875 358.188 96.3232 358.188 95.873 cv
358.188 94.2822 li
358.188 93.8311 358.702 93.4668 359.335 93.4668 cv
359.335 93.4668 li
359.969 93.4668 360.482 93.8311 360.482 94.2822 cv
360.482 95.873 li
cp
.976471 .941176 .392157 rgb
f
354.212 95.873 mo
354.212 96.3232 353.698 96.6875 353.065 96.6875 cv
353.065 96.6875 li
352.432 96.6875 351.918 96.3232 351.918 95.873 cv
351.918 94.2822 li
351.918 93.8311 352.432 93.4668 353.065 93.4668 cv
353.065 93.4668 li
353.698 93.4668 354.212 93.8311 354.212 94.2822 cv
354.212 95.873 li
cp
f
366.307 95.873 mo
366.307 96.3232 365.793 96.6875 365.16 96.6875 cv
365.16 96.6875 li
364.526 96.6875 364.013 96.3232 364.013 95.873 cv
364.013 94.2822 li
364.013 93.8311 364.526 93.4668 365.16 93.4668 cv
365.16 93.4668 li
365.793 93.4668 366.307 93.8311 366.307 94.2822 cv
366.307 95.873 li
cp
f
372.611 95.873 mo
372.611 96.3232 372.098 96.6875 371.465 96.6875 cv
371.465 96.6875 li
370.831 96.6875 370.317 96.3232 370.317 95.873 cv
370.317 94.2822 li
370.317 93.8311 370.831 93.4668 371.465 93.4668 cv
371.465 93.4668 li
372.098 93.4668 372.611 93.8311 372.611 94.2822 cv
372.611 95.873 li
cp
f
376.031 119.012 mo
376.031 120.035 375.202 120.864 374.178 120.864 cv
350.352 120.864 li
349.328 120.864 348.498 120.035 348.498 119.012 cv
348.498 96.5078 li
348.498 95.4844 349.328 94.6553 350.352 94.6553 cv
374.178 94.6553 li
375.202 94.6553 376.031 95.4844 376.031 96.5078 cv
376.031 119.012 li
cp
1 .286275 .168627 rgb
f
361.587 108.409 mo
361.587 108.835 361.242 109.181 360.815 109.181 cv
350.893 109.181 li
350.466 109.181 350.12 108.835 350.12 108.409 cv
350.12 99.0361 li
350.12 98.6104 350.466 98.2646 350.893 98.2646 cv
360.815 98.2646 li
361.242 98.2646 361.587 98.6104 361.587 99.0361 cv
361.587 108.409 li
cp
.8 1 1 rgb
f
374.409 108.409 mo
374.409 108.835 374.063 109.181 373.638 109.181 cv
363.713 109.181 li
363.288 109.181 362.942 108.835 362.942 108.409 cv
362.942 99.0361 li
362.942 98.6104 363.288 98.2646 363.713 98.2646 cv
373.638 98.2646 li
374.063 98.2646 374.409 98.6104 374.409 99.0361 cv
374.409 108.409 li
cp
f
367.998 116.162 mo
367.998 116.39 367.653 116.573 367.227 116.573 cv
357.304 116.573 li
356.877 116.573 356.531 116.39 356.531 116.162 cv
356.531 111.17 li
356.531 110.943 356.877 110.76 357.304 110.76 cv
367.227 110.76 li
367.653 110.76 367.998 110.943 367.998 111.17 cv
367.998 116.162 li
cp
1 .831373 .380392 rgb
f
356.904 116.108 mo
356.956 116.143 357.094 116.201 357.304 116.201 cv
367.227 116.201 li
367.437 116.201 367.573 116.143 367.626 116.108 cv
367.626 111.17 li
367.621 111.211 367.478 111.131 367.227 111.132 cv
357.304 111.132 li
357.094 111.132 356.956 111.189 356.904 111.226 cv
356.904 116.108 li
cp
367.227 116.945 mo
357.304 116.945 li
356.652 116.945 356.159 116.608 356.159 116.162 cv
356.159 111.17 li
356.159 110.724 356.652 110.387 357.304 110.387 cv
367.227 110.387 li
367.879 110.387 368.37 110.724 368.37 111.17 cv
368.37 116.162 li
368.37 116.608 367.879 116.945 367.227 116.945 cv
cp
1 .913725 .611765 rgb
f
367.998 112.624 mo
356.531 112.624 li
356.531 111.88 li
367.998 111.88 li
367.998 112.624 li
cp
f
367.998 114.039 mo
356.531 114.039 li
356.531 113.294 li
367.998 113.294 li
367.998 114.039 li
cp
f
367.998 115.453 mo
356.531 115.453 li
356.531 114.709 li
367.998 114.709 li
367.998 115.453 li
cp
f
364.667 116.573 mo
363.922 116.573 li
363.922 110.76 li
364.667 110.76 li
364.667 116.573 li
cp
f
360.607 116.573 mo
359.863 116.573 li
359.863 110.76 li
360.607 110.76 li
360.607 116.573 li
cp
f
348.498 117.867 mo
348.498 119.012 li
348.498 120.035 349.328 120.864 350.352 120.864 cv
374.178 120.864 li
375.202 120.864 376.031 120.035 376.031 119.012 cv
376.031 117.867 li
348.498 117.867 li
cp
1 .831373 .380392 rgb
f
374.56 115.012 mo
374.56 115.068 374.413 115.114 374.231 115.114 cv
370.003 115.114 li
369.822 115.114 369.674 115.068 369.674 115.012 cv
369.674 113.746 li
369.674 113.688 369.822 113.642 370.003 113.642 cv
374.231 113.642 li
374.413 113.642 374.56 113.688 374.56 113.746 cv
374.56 115.012 li
cp
.901961 .101961 0 rgb
f
349.97 115.012 mo
349.97 115.068 350.117 115.114 350.298 115.114 cv
354.526 115.114 li
354.708 115.114 354.854 115.068 354.854 115.012 cv
354.854 113.746 li
354.854 113.688 354.708 113.642 354.526 113.642 cv
350.298 113.642 li
350.117 113.642 349.97 113.688 349.97 113.746 cv
349.97 115.012 li
cp
f
374.56 116.019 mo
374.56 116.037 374.413 116.053 374.231 116.053 cv
370.003 116.053 li
369.822 116.053 369.674 116.037 369.674 116.019 cv
369.674 115.605 li
369.674 115.587 369.822 115.571 370.003 115.571 cv
374.231 115.571 li
374.413 115.571 374.56 115.587 374.56 115.605 cv
374.56 116.019 li
cp
.976471 .941176 .392157 rgb
f
349.97 116.019 mo
349.97 116.037 350.117 116.053 350.298 116.053 cv
354.526 116.053 li
354.708 116.053 354.854 116.037 354.854 116.019 cv
354.854 115.605 li
354.854 115.587 354.708 115.571 354.526 115.571 cv
350.298 115.571 li
350.117 115.571 349.97 115.587 349.97 115.605 cv
349.97 116.019 li
cp
f
374.231 113.642 mo
372.117 113.642 li
372.117 115.114 li
374.231 115.114 li
374.413 115.114 374.56 115.068 374.56 115.012 cv
374.56 113.746 li
374.56 113.688 374.413 113.642 374.231 113.642 cv
cp
.356863 .733333 .909804 rgb
f
352.413 113.642 mo
350.298 113.642 li
350.117 113.642 349.97 113.688 349.97 113.746 cv
349.97 115.012 li
349.97 115.068 350.117 115.114 350.298 115.114 cv
352.413 115.114 li
352.413 113.642 li
cp
f
94.5034 226.785 mo
18.8413 226.785 li
18.8413 266.984 li
94.5034 266.984 li
94.5034 226.785 li
cp
1 .831373 .380392 rgb
f
94.5034 191.632 mo
18.8413 191.632 li
18.8413 226.62 li
94.5034 226.62 li
94.5034 191.632 li
cp
f
29.7754 191.632 mo
18.8413 191.632 li
24.3081 174.946 li
33.6807 174.946 li
29.7754 191.632 li
cp
1 .286275 .168627 rgb
f
40.7095 191.632 mo
29.7749 191.632 li
33.6802 174.946 li
43.0527 174.946 li
40.7095 191.632 li
cp
1 1 1 rgb
f
51.6436 191.632 mo
40.7085 191.632 li
43.0518 174.946 li
52.4238 174.946 li
51.6436 191.632 li
cp
1 .286275 .168627 rgb
f
62.5776 191.632 mo
51.6426 191.632 li
52.4238 174.946 li
61.7964 174.946 li
62.5776 191.632 li
cp
1 1 1 rgb
f
73.5112 191.632 mo
62.5767 191.632 li
61.7959 174.946 li
71.1685 174.946 li
73.5112 191.632 li
cp
1 .286275 .168627 rgb
f
84.4453 191.632 mo
73.5107 191.632 li
71.1675 174.946 li
80.54 174.946 li
84.4453 191.632 li
cp
1 1 1 rgb
f
95.3794 191.632 mo
84.4443 191.632 li
80.5391 174.946 li
89.9121 174.946 li
95.3794 191.632 li
cp
1 .286275 .168627 rgb
f
18.8413 191.632 mo
18.8418 194.377 21.2891 196.603 24.3081 196.603 cv
27.3271 196.603 29.7749 194.377 29.7749 191.632 cv
18.8413 191.632 li
cp
.901961 .101961 0 rgb
f
29.7749 191.632 mo
29.7754 194.377 32.2231 196.603 35.2417 196.603 cv
38.2617 196.603 40.7085 194.377 40.7085 191.632 cv
29.7749 191.632 li
cp
.945098 .94902 .94902 rgb
f
40.7085 191.632 mo
40.7095 194.377 43.1572 196.603 46.1758 196.603 cv
49.1953 196.603 51.6426 194.377 51.6426 191.632 cv
40.7085 191.632 li
cp
.901961 .101961 0 rgb
f
51.6426 191.632 mo
51.6436 194.377 54.0908 196.603 57.1099 196.603 cv
60.1294 196.603 62.5767 194.377 62.5767 191.632 cv
51.6426 191.632 li
cp
.945098 .94902 .94902 rgb
f
62.5767 191.632 mo
62.5776 194.377 65.0249 196.603 68.0439 196.603 cv
71.0635 196.603 73.5107 194.377 73.5107 191.632 cv
62.5767 191.632 li
cp
.901961 .101961 0 rgb
f
73.5107 191.632 mo
73.5112 194.377 75.959 196.603 78.978 196.603 cv
81.9976 196.603 84.4443 194.377 84.4443 191.632 cv
73.5107 191.632 li
cp
.945098 .94902 .94902 rgb
f
84.4443 191.632 mo
84.4453 194.377 86.8931 196.603 89.9116 196.603 cv
92.9312 196.603 95.3784 194.377 95.3784 191.632 cv
84.4443 191.632 li
cp
.901961 .101961 0 rgb
f
89.9116 176.833 mo
24.3081 176.833 li
24.3081 174.946 li
89.9116 174.946 li
89.9116 176.833 li
cp
1 .286275 .168627 rgb
f
.974609 250.499 mo
14.8115 250.499 li
14.8115 202.912 li
.974609 202.912 li
.974609 250.499 li
cp
1 1 1 rgb
f
1.71924 249.754 mo
14.0669 249.754 li
14.0669 203.657 li
1.71924 203.657 li
1.71924 249.754 li
cp
15.5557 251.243 mo
.230469 251.243 li
.230469 202.168 li
15.5557 202.168 li
15.5557 251.243 li
cp
1 .286275 .168627 rgb
f
8.88574 213.236 mo
8.88574 213.018 8.80615 212.841 8.64551 212.704 cv
8.48535 212.566 8.28418 212.442 8.0415 212.33 cv
7.7998 212.217 7.53711 212.102 7.25342 211.981 cv
6.97021 211.863 6.70801 211.716 6.46582 211.542 cv
6.22363 211.368 6.02295 211.151 5.86182 210.892 cv
5.70215 210.633 5.62109 210.302 5.62109 209.898 cv
5.62109 209.551 5.67969 209.249 5.79492 208.993 cv
5.91113 208.738 6.07666 208.524 6.2915 208.354 cv
6.50635 208.183 6.76074 208.057 7.05469 207.976 cv
7.34766 207.893 7.67529 207.853 8.03662 207.853 cv
8.45313 207.853 8.84521 207.888 9.21338 207.959 cv
9.58252 208.031 9.88574 208.136 10.1245 208.271 cv
9.68457 209.449 li
9.53418 209.354 9.30908 209.266 9.00928 209.188 cv
8.7085 209.109 8.38477 209.07 8.03662 209.07 cv
7.70947 209.07 7.45898 209.136 7.28467 209.266 cv
7.11035 209.395 7.02393 209.567 7.02393 209.787 cv
7.02393 209.991 7.104 210.162 7.26465 210.299 cv
7.42432 210.435 7.62646 210.561 7.86816 210.677 cv
8.10986 210.793 8.37305 210.913 8.65625 211.035 cv
8.93945 211.158 9.20166 211.307 9.44434 211.48 cv
9.68652 211.655 9.88721 211.869 10.0479 212.125 cv
10.208 212.381 10.2886 212.7 10.2886 213.081 cv
10.2886 213.464 10.2256 213.794 10.0986 214.07 cv
9.97266 214.346 9.79541 214.576 9.56641 214.762 cv
9.33838 214.945 9.06201 215.08 8.73779 215.17 cv
8.41406 215.259 8.05713 215.304 7.66797 215.304 cv
7.15723 215.304 6.70654 215.255 6.31738 215.159 cv
5.92822 215.063 5.64209 214.969 5.45801 214.873 cv
5.9082 213.676 li
5.98291 213.718 6.08008 213.762 6.2002 213.809 cv
6.31934 213.857 6.4541 213.9 6.604 213.941 cv
6.75439 213.983 6.91309 214.017 7.0791 214.044 cv
7.24707 214.072 7.41943 214.085 7.59668 214.085 cv
8.01318 214.085 8.33252 214.015 8.55371 213.875 cv
8.77539 213.735 8.88574 213.521 8.88574 213.236 cv
cp
.901961 .101961 0 rgb
f
9.19775 222.396 mo
6.57813 222.396 li
6.57813 225.394 li
5.17578 225.394 li
5.17578 218.23 li
6.57813 218.23 li
6.57813 221.146 li
9.19775 221.146 li
9.19775 218.23 li
10.6006 218.23 li
10.6006 225.394 li
9.19775 225.394 li
9.19775 222.396 li
cp
f
6.32666 232.046 mo
6.32666 232.408 6.35742 232.741 6.41895 233.045 cv
6.48096 233.348 6.57422 233.608 6.70068 233.827 cv
6.82666 234.045 6.98926 234.217 7.18701 234.339 cv
7.38428 234.462 7.62061 234.524 7.89258 234.524 cv
8.39063 234.524 8.77637 234.329 9.04932 233.939 cv
9.32275 233.551 9.45898 232.92 9.45898 232.046 cv
9.45898 231.698 9.43018 231.374 9.37207 231.075 cv
9.31348 230.773 9.22363 230.512 9.1001 230.286 cv
8.97803 230.062 8.81689 229.886 8.61963 229.76 cv
8.42139 229.633 8.17969 229.57 7.89258 229.57 cv
7.39453 229.57 7.00928 229.77 6.73633 230.169 cv
6.46338 230.567 6.32666 231.194 6.32666 232.046 cv
cp
4.85303 232.046 mo
4.85303 230.853 5.11572 229.933 5.64111 229.288 cv
6.1665 228.644 6.91699 228.321 7.89258 228.321 cv
8.40479 228.321 8.85107 228.409 9.2334 228.587 cv
9.61572 228.765 9.93311 229.017 10.1855 229.345 cv
10.438 229.672 10.6255 230.064 10.7485 230.522 cv
10.8706 230.979 10.9326 231.486 10.9326 232.046 cv
10.9326 233.241 10.668 234.16 10.1396 234.805 cv
9.61084 235.45 8.86182 235.771 7.89258 235.771 cv
7.375 235.771 6.92383 235.684 6.5415 235.506 cv
6.16016 235.328 5.84473 235.076 5.59521 234.748 cv
5.34619 234.42 5.16016 234.028 5.03711 233.571 cv
4.91455 233.115 4.85303 232.605 4.85303 232.046 cv
cp
f
7.66797 239.805 mo
7.53174 239.805 7.40283 239.809 7.2793 239.819 cv
7.15723 239.829 7.05811 239.842 6.9834 239.855 cv
6.9834 242.179 li
7.00928 242.186 7.05127 242.193 7.10547 242.199 cv
7.16016 242.205 7.21826 242.211 7.2793 242.215 cv
7.34131 242.218 7.40039 242.22 7.45898 242.22 cv
7.51709 242.22 7.55957 242.22 7.58691 242.22 cv
7.771 242.22 7.95313 242.202 8.13428 242.169 cv
8.31445 242.134 8.47705 242.071 8.62061 241.979 cv
8.76318 241.887 8.87744 241.759 8.96289 241.596 cv
9.04834 241.432 9.09082 241.216 9.09082 240.95 cv
9.09082 240.725 9.05029 240.54 8.96875 240.393 cv
8.88574 240.246 8.77881 240.129 8.646 240.04 cv
8.51318 239.951 8.36035 239.89 8.19043 239.855 cv
8.02002 239.821 7.8457 239.805 7.66797 239.805 cv
cp
5.58057 238.771 mo
5.8667 238.716 6.18262 238.674 6.52734 238.643 cv
6.87158 238.612 7.21484 238.596 7.55615 238.596 cv
7.91113 238.596 8.26758 238.625 8.62549 238.684 cv
8.9834 238.741 9.30566 238.858 9.59229 239.032 cv
9.87939 239.205 10.1128 239.448 10.2935 239.758 cv
10.4746 240.069 10.5654 240.473 10.5654 240.971 cv
10.5654 241.422 10.4863 241.803 10.3296 242.112 cv
10.1719 242.423 9.96484 242.677 9.70508 242.875 cv
9.4458 243.072 9.15137 243.216 8.81934 243.305 cv
8.48877 243.394 8.146 243.438 7.79102 243.438 cv
7.75684 243.438 7.70215 243.438 7.62744 243.438 cv
7.55273 243.438 7.47461 243.437 7.39209 243.433 cv
7.31055 243.429 7.22998 243.423 7.15137 243.417 cv
7.07324 243.411 7.01758 243.403 6.9834 243.396 cv
6.9834 245.863 li
5.58057 245.863 li
5.58057 238.771 li
cp
f
18.8413 207.853 mo
13.9912 207.853 li
18.8413 207.853 li
cp
1 1 1 rgb
f
18.8413 208.597 mo
13.9912 208.597 li
13.9912 207.108 li
18.8413 207.108 li
18.8413 208.597 li
cp
1 .286275 .168627 rgb
f
18.8413 245.56 mo
13.9912 245.56 li
18.8413 245.56 li
cp
1 1 1 rgb
f
18.8413 246.305 mo
13.9912 246.305 li
13.9912 244.814 li
18.8413 244.814 li
18.8413 246.305 li
cp
1 .286275 .168627 rgb
f
95.3794 229.182 mo
17.9609 229.182 li
17.9609 224.599 li
95.3794 224.599 li
95.3794 229.182 li
cp
f
95.3794 269.275 mo
17.9609 269.275 li
17.9609 264.692 li
95.3794 264.692 li
95.3794 269.275 li
cp
f
56.4858 236.315 mo
54.3672 236.315 48.8555 236.791 48.8555 239.997 cv
48.8555 264.75 li
64.1167 264.75 li
64.1167 239.997 li
64.1167 236.791 58.6045 236.315 56.4858 236.315 cv
cp
.356863 .733333 .909804 rgb
f
39.7358 256.292 mo
29.8721 256.292 li
29.8721 236.415 li
39.7358 236.415 li
39.7358 256.292 li
cp
.8 1 1 rgb
f
30.6167 255.547 mo
38.9917 255.547 li
38.9917 237.16 li
30.6167 237.16 li
30.6167 255.547 li
cp
40.4805 257.035 mo
29.1279 257.035 li
29.1279 235.671 li
40.4805 235.671 li
40.4805 257.035 li
cp
.498039 .309804 .254902 rgb
f
30.6167 244.956 mo
39.7358 244.956 li
30.6167 244.956 li
cp
.8 1 1 rgb
f
39.7358 245.701 mo
30.6167 245.701 li
30.6167 244.211 li
39.7358 244.211 li
39.7358 245.701 li
cp
.498039 .309804 .254902 rgb
f
41.6509 252.896 mo
27.9575 252.896 li
27.9575 255.873 li
41.6509 255.873 li
41.6509 252.896 li
cp
.380392 .231373 .192157 rgb
f
73.2358 256.292 mo
83.0996 256.292 li
83.0996 236.415 li
73.2358 236.415 li
73.2358 256.292 li
cp
.8 1 1 rgb
f
73.9805 255.547 mo
82.355 255.547 li
82.355 237.16 li
73.9805 237.16 li
73.9805 255.547 li
cp
83.8442 257.035 mo
72.4912 257.035 li
72.4912 235.671 li
83.8442 235.671 li
83.8442 257.035 li
cp
.498039 .309804 .254902 rgb
f
82.355 244.956 mo
73.2358 244.956 li
82.355 244.956 li
cp
.8 1 1 rgb
f
82.355 245.701 mo
73.2358 245.701 li
73.2358 244.211 li
82.355 244.211 li
82.355 245.701 li
cp
.498039 .309804 .254902 rgb
f
71.3208 252.896 mo
85.0146 252.896 li
85.0146 255.873 li
71.3208 255.873 li
71.3208 252.896 li
cp
.380392 .231373 .192157 rgb
f
73.2358 221.516 mo
83.0996 221.516 li
83.0996 201.639 li
73.2358 201.639 li
73.2358 221.516 li
cp
.8 1 1 rgb
f
73.9805 220.772 mo
82.355 220.772 li
82.355 202.384 li
73.9805 202.384 li
73.9805 220.772 li
cp
83.8442 222.261 mo
72.4912 222.261 li
72.4912 200.895 li
83.8442 200.895 li
83.8442 222.261 li
cp
.498039 .309804 .254902 rgb
f
82.355 210.182 mo
73.2358 210.182 li
82.355 210.182 li
cp
.8 1 1 rgb
f
82.355 210.925 mo
73.2358 210.925 li
73.2358 209.437 li
82.355 209.437 li
82.355 210.925 li
cp
.498039 .309804 .254902 rgb
f
71.3208 218.119 mo
85.0146 218.119 li
85.0146 221.097 li
71.3208 221.097 li
71.3208 218.119 li
cp
.380392 .231373 .192157 rgb
f
51.3662 221.516 mo
61.23 221.516 li
61.23 201.639 li
51.3662 201.639 li
51.3662 221.516 li
cp
.8 1 1 rgb
f
52.1108 220.772 mo
60.4858 220.772 li
60.4858 202.384 li
52.1108 202.384 li
52.1108 220.772 li
cp
61.9751 222.261 mo
50.6221 222.261 li
50.6221 200.895 li
61.9751 200.895 li
61.9751 222.261 li
cp
.498039 .309804 .254902 rgb
f
60.4858 210.182 mo
51.3662 210.182 li
60.4858 210.182 li
cp
.8 1 1 rgb
f
60.4858 210.925 mo
51.3662 210.925 li
51.3662 209.437 li
60.4858 209.437 li
60.4858 210.925 li
cp
.498039 .309804 .254902 rgb
f
49.4517 218.119 mo
63.1455 218.119 li
63.1455 221.097 li
49.4517 221.097 li
49.4517 218.119 li
cp
.380392 .231373 .192157 rgb
f
29.8691 221.516 mo
39.7329 221.516 li
39.7329 201.639 li
29.8691 201.639 li
29.8691 221.516 li
cp
.8 1 1 rgb
f
30.6138 220.772 mo
38.9888 220.772 li
38.9888 202.384 li
30.6138 202.384 li
30.6138 220.772 li
cp
40.4775 222.261 mo
29.125 222.261 li
29.125 200.895 li
40.4775 200.895 li
40.4775 222.261 li
cp
.498039 .309804 .254902 rgb
f
38.9888 210.182 mo
29.8691 210.182 li
38.9888 210.182 li
cp
.8 1 1 rgb
f
38.9888 210.925 mo
29.8691 210.925 li
29.8691 209.437 li
38.9888 209.437 li
38.9888 210.925 li
cp
.498039 .309804 .254902 rgb
f
27.9546 218.119 mo
41.6479 218.119 li
41.6479 221.097 li
27.9546 221.097 li
27.9546 218.119 li
cp
.380392 .231373 .192157 rgb
f
55.8618 237.819 mo
53.3892 237.919 50.3442 238.604 50.3442 239.997 cv
50.3442 245.349 li
55.8618 245.349 li
55.8618 237.819 li
cp
.8 1 1 rgb
f
57.1099 237.819 mo
57.1099 245.349 li
62.6274 245.349 li
62.6274 239.997 li
62.6274 238.604 59.583 237.919 57.1099 237.819 cv
cp
f
55.9316 247.488 mo
50.3442 247.488 li
50.3442 253.352 li
50.3442 254.188 li
50.3442 263.262 li
55.9316 263.262 li
55.9316 247.488 li
cp
f
57.1099 247.488 mo
57.1099 263.262 li
62.6274 263.262 li
62.6274 254.188 li
62.6274 253.352 li
62.6274 247.488 li
57.1099 247.488 li
cp
f
55.2554 254.535 mo
55.2554 254.979 54.8955 255.337 54.4517 255.337 cv
54.0083 255.337 53.6494 254.979 53.6494 254.535 cv
53.6494 254.091 54.0083 253.732 54.4517 253.732 cv
54.8955 253.732 55.2554 254.091 55.2554 254.535 cv
cp
.380392 .231373 .192157 rgb
f
57.7168 254.535 mo
57.7168 254.979 58.0762 255.337 58.52 255.337 cv
58.9634 255.337 59.3228 254.979 59.3228 254.535 cv
59.3228 254.091 58.9634 253.732 58.52 253.732 cv
58.0762 253.732 57.7168 254.091 57.7168 254.535 cv
cp
f
377.6 176.796 mo
311.115 176.796 li
311.115 265.806 li
377.6 265.806 li
377.6 176.796 li
cp
.356863 .733333 .909804 rgb
f
416.313 214.479 mo
377.6 214.479 li
377.6 265.806 li
416.313 265.806 li
416.313 214.479 li
cp
.0588235 .6 .85098 rgb
f
272.402 214.479 mo
311.115 214.479 li
311.115 265.806 li
272.402 265.806 li
272.402 214.479 li
cp
f
332.655 265.806 mo
344.358 265.806 li
344.358 238.082 li
332.655 238.082 li
332.655 265.806 li
cp
1 .286275 .168627 rgb
f
333.399 265.062 mo
343.613 265.062 li
343.613 238.826 li
333.399 238.826 li
333.399 265.062 li
cp
345.102 266.551 mo
331.911 266.551 li
331.911 237.338 li
345.102 237.338 li
345.102 266.551 li
cp
.498039 .309804 .254902 rgb
f
356.061 265.806 mo
344.358 265.806 li
344.358 238.082 li
356.061 238.082 li
356.061 265.806 li
cp
1 .286275 .168627 rgb
f
345.102 265.062 mo
355.315 265.062 li
355.315 238.826 li
345.102 238.826 li
345.102 265.062 li
cp
356.805 266.551 mo
343.613 266.551 li
343.613 237.338 li
356.805 237.338 li
356.805 266.551 li
cp
.498039 .309804 .254902 rgb
f
278.731 238.082 mo
288.596 238.082 li
288.596 225.016 li
278.731 225.016 li
278.731 238.082 li
cp
.8 1 1 rgb
f
279.476 237.338 mo
287.851 237.338 li
287.851 225.76 li
279.476 225.76 li
279.476 237.338 li
cp
289.339 238.826 mo
277.987 238.826 li
277.987 224.271 li
289.339 224.271 li
289.339 238.826 li
cp
.498039 .309804 .254902 rgb
f
288.223 231.548 mo
279.104 231.548 li
288.223 231.548 li
cp
.8 1 1 rgb
f
288.223 232.292 mo
279.104 232.292 li
279.104 230.804 li
288.223 230.804 li
288.223 232.292 li
cp
.498039 .309804 .254902 rgb
f
294.923 238.082 mo
304.787 238.082 li
304.787 225.016 li
294.923 225.016 li
294.923 238.082 li
cp
.8 1 1 rgb
f
295.668 237.338 mo
304.042 237.338 li
304.042 225.76 li
295.668 225.76 li
295.668 237.338 li
cp
305.531 238.826 mo
294.179 238.826 li
294.179 224.271 li
305.531 224.271 li
305.531 238.826 li
cp
.498039 .309804 .254902 rgb
f
304.415 231.548 mo
295.295 231.548 li
304.415 231.548 li
cp
.8 1 1 rgb
f
304.415 232.292 mo
295.295 232.292 li
295.295 230.804 li
304.415 230.804 li
304.415 232.292 li
cp
.498039 .309804 .254902 rgb
f
278.731 257.065 mo
288.596 257.065 li
288.596 243.998 li
278.731 243.998 li
278.731 257.065 li
cp
.8 1 1 rgb
f
279.476 256.321 mo
287.851 256.321 li
287.851 244.743 li
279.476 244.743 li
279.476 256.321 li
cp
289.339 257.811 mo
277.987 257.811 li
277.987 243.255 li
289.339 243.255 li
289.339 257.811 li
cp
.498039 .309804 .254902 rgb
f
288.223 250.531 mo
279.104 250.531 li
288.223 250.531 li
cp
.8 1 1 rgb
f
288.223 251.275 mo
279.104 251.275 li
279.104 249.787 li
288.223 249.787 li
288.223 251.275 li
cp
.498039 .309804 .254902 rgb
f
294.923 257.065 mo
304.787 257.065 li
304.787 243.998 li
294.923 243.998 li
294.923 257.065 li
cp
.8 1 1 rgb
f
295.668 256.321 mo
304.042 256.321 li
304.042 244.743 li
295.668 244.743 li
295.668 256.321 li
cp
305.531 257.811 mo
294.179 257.811 li
294.179 243.255 li
305.531 243.255 li
305.531 257.811 li
cp
.498039 .309804 .254902 rgb
f
304.415 250.531 mo
295.295 250.531 li
304.415 250.531 li
cp
.8 1 1 rgb
f
304.415 251.275 mo
295.295 251.275 li
295.295 249.787 li
304.415 249.787 li
304.415 251.275 li
cp
.498039 .309804 .254902 rgb
f
409.984 238.082 mo
400.12 238.082 li
400.12 225.016 li
409.984 225.016 li
409.984 238.082 li
cp
.8 1 1 rgb
f
400.864 237.338 mo
409.24 237.338 li
409.24 225.76 li
400.864 225.76 li
400.864 237.338 li
cp
410.729 238.826 mo
399.376 238.826 li
399.376 224.271 li
410.729 224.271 li
410.729 238.826 li
cp
.498039 .309804 .254902 rgb
f
400.493 231.548 mo
409.611 231.548 li
400.493 231.548 li
cp
.8 1 1 rgb
f
409.611 232.292 mo
400.493 232.292 li
400.493 230.804 li
409.611 230.804 li
409.611 232.292 li
cp
.498039 .309804 .254902 rgb
f
393.792 238.082 mo
383.929 238.082 li
383.929 225.016 li
393.792 225.016 li
393.792 238.082 li
cp
.8 1 1 rgb
f
384.673 237.338 mo
393.049 237.338 li
393.049 225.76 li
384.673 225.76 li
384.673 237.338 li
cp
394.537 238.826 mo
383.185 238.826 li
383.185 224.271 li
394.537 224.271 li
394.537 238.826 li
cp
.498039 .309804 .254902 rgb
f
384.302 231.548 mo
393.42 231.548 li
384.302 231.548 li
cp
.8 1 1 rgb
f
393.42 232.292 mo
384.302 232.292 li
384.302 230.804 li
393.42 230.804 li
393.42 232.292 li
cp
.498039 .309804 .254902 rgb
f
409.984 257.065 mo
400.12 257.065 li
400.12 243.998 li
409.984 243.998 li
409.984 257.065 li
cp
.8 1 1 rgb
f
400.864 256.321 mo
409.24 256.321 li
409.24 244.743 li
400.864 244.743 li
400.864 256.321 li
cp
410.729 257.811 mo
399.376 257.811 li
399.376 243.255 li
410.729 243.255 li
410.729 257.811 li
cp
.498039 .309804 .254902 rgb
f
400.493 250.531 mo
409.611 250.531 li
400.493 250.531 li
cp
.8 1 1 rgb
f
409.611 251.275 mo
400.493 251.275 li
400.493 249.787 li
409.611 249.787 li
409.611 251.275 li
cp
.498039 .309804 .254902 rgb
f
393.792 257.065 mo
383.929 257.065 li
383.929 243.998 li
393.792 243.998 li
393.792 257.065 li
cp
.8 1 1 rgb
f
384.673 256.321 mo
393.049 256.321 li
393.049 244.743 li
384.673 244.743 li
384.673 256.321 li
cp
394.537 257.811 mo
383.185 257.811 li
383.185 243.255 li
394.537 243.255 li
394.537 257.811 li
cp
.498039 .309804 .254902 rgb
f
384.302 250.531 mo
393.42 250.531 li
384.302 250.531 li
cp
.8 1 1 rgb
f
393.42 251.275 mo
384.302 251.275 li
384.302 249.787 li
393.42 249.787 li
393.42 251.275 li
cp
.498039 .309804 .254902 rgb
f
326.545 257.065 mo
316.681 257.065 li
316.681 243.998 li
326.545 243.998 li
326.545 257.065 li
cp
.8 1 1 rgb
f
317.425 256.321 mo
325.8 256.321 li
325.8 244.743 li
317.425 244.743 li
317.425 256.321 li
cp
327.288 257.811 mo
315.937 257.811 li
315.937 243.255 li
327.288 243.255 li
327.288 257.811 li
cp
.498039 .309804 .254902 rgb
f
317.053 250.531 mo
326.172 250.531 li
317.053 250.531 li
cp
.8 1 1 rgb
f
326.172 251.275 mo
317.053 251.275 li
317.053 249.787 li
326.172 249.787 li
326.172 251.275 li
cp
.498039 .309804 .254902 rgb
f
326.545 238.082 mo
316.681 238.082 li
316.681 225.016 li
326.545 225.016 li
326.545 238.082 li
cp
.8 1 1 rgb
f
317.425 237.337 mo
325.8 237.337 li
325.8 225.76 li
317.425 225.76 li
317.425 237.337 li
cp
327.288 238.825 mo
315.937 238.825 li
315.937 224.271 li
327.288 224.271 li
327.288 238.825 li
cp
.498039 .309804 .254902 rgb
f
342.52 231.547 mo
332.655 231.547 li
332.655 225.079 li
342.52 225.079 li
342.52 231.547 li
cp
.8 1 1 rgb
f
333.399 230.803 mo
341.774 230.803 li
341.774 225.823 li
333.399 225.823 li
333.399 230.803 li
cp
343.264 232.291 mo
331.911 232.291 li
331.911 224.335 li
343.264 224.335 li
343.264 232.291 li
cp
.498039 .309804 .254902 rgb
f
346.196 231.547 mo
356.061 231.547 li
356.061 225.079 li
346.196 225.079 li
346.196 231.547 li
cp
.8 1 1 rgb
f
346.94 230.803 mo
355.315 230.803 li
355.315 225.823 li
346.94 225.823 li
346.94 230.803 li
cp
356.805 232.291 mo
345.452 232.291 li
345.452 224.335 li
356.805 224.335 li
356.805 232.291 li
cp
.498039 .309804 .254902 rgb
f
317.053 231.548 mo
326.172 231.548 li
317.053 231.548 li
cp
.8 1 1 rgb
f
326.172 232.292 mo
317.053 232.292 li
317.053 230.804 li
326.172 230.804 li
326.172 232.292 li
cp
.498039 .309804 .254902 rgb
f
326.545 219.098 mo
316.681 219.098 li
316.681 206.031 li
326.545 206.031 li
326.545 219.098 li
cp
.8 1 1 rgb
f
317.425 218.354 mo
325.8 218.354 li
325.8 206.775 li
317.425 206.775 li
317.425 218.354 li
cp
327.288 219.842 mo
315.937 219.842 li
315.937 205.287 li
327.288 205.287 li
327.288 219.842 li
cp
.498039 .309804 .254902 rgb
f
317.053 212.564 mo
326.172 212.564 li
317.053 212.564 li
cp
.8 1 1 rgb
f
326.172 213.31 mo
317.053 213.31 li
317.053 211.82 li
326.172 211.82 li
326.172 213.31 li
cp
.498039 .309804 .254902 rgb
f
326.545 200.114 mo
316.681 200.114 li
316.681 187.047 li
326.545 187.047 li
326.545 200.114 li
cp
.8 1 1 rgb
f
317.425 199.37 mo
325.8 199.37 li
325.8 187.792 li
317.425 187.792 li
317.425 199.37 li
cp
327.288 200.859 mo
315.937 200.859 li
315.937 186.303 li
327.288 186.303 li
327.288 200.859 li
cp
.498039 .309804 .254902 rgb
f
317.053 193.581 mo
326.172 193.581 li
317.053 193.581 li
cp
.8 1 1 rgb
f
326.172 194.325 mo
317.053 194.325 li
317.053 192.837 li
326.172 192.837 li
326.172 194.325 li
cp
.498039 .309804 .254902 rgb
f
362.171 257.065 mo
372.035 257.065 li
372.035 243.998 li
362.171 243.998 li
362.171 257.065 li
cp
.8 1 1 rgb
f
362.916 256.321 mo
371.291 256.321 li
371.291 244.743 li
362.916 244.743 li
362.916 256.321 li
cp
372.779 257.811 mo
361.427 257.811 li
361.427 243.255 li
372.779 243.255 li
372.779 257.811 li
cp
.498039 .309804 .254902 rgb
f
371.663 250.531 mo
362.544 250.531 li
371.663 250.531 li
cp
.8 1 1 rgb
f
371.663 251.275 mo
362.544 251.275 li
362.544 249.787 li
371.663 249.787 li
371.663 251.275 li
cp
.498039 .309804 .254902 rgb
f
362.171 238.082 mo
372.035 238.082 li
372.035 225.016 li
362.171 225.016 li
362.171 238.082 li
cp
.8 1 1 rgb
f
362.916 237.337 mo
371.291 237.337 li
371.291 225.76 li
362.916 225.76 li
362.916 237.337 li
cp
372.779 238.825 mo
361.427 238.825 li
361.427 224.271 li
372.779 224.271 li
372.779 238.825 li
cp
.498039 .309804 .254902 rgb
f
371.663 231.548 mo
362.544 231.548 li
371.663 231.548 li
cp
.8 1 1 rgb
f
371.663 232.292 mo
362.544 232.292 li
362.544 230.804 li
371.663 230.804 li
371.663 232.292 li
cp
.498039 .309804 .254902 rgb
f
362.171 219.098 mo
372.035 219.098 li
372.035 206.031 li
362.171 206.031 li
362.171 219.098 li
cp
.8 1 1 rgb
f
362.916 218.354 mo
371.291 218.354 li
371.291 206.775 li
362.916 206.775 li
362.916 218.354 li
cp
372.779 219.842 mo
361.427 219.842 li
361.427 205.287 li
372.779 205.287 li
372.779 219.842 li
cp
.498039 .309804 .254902 rgb
f
371.663 212.564 mo
362.544 212.564 li
371.663 212.564 li
cp
.8 1 1 rgb
f
371.663 213.31 mo
362.544 213.31 li
362.544 211.82 li
371.663 211.82 li
371.663 213.31 li
cp
.498039 .309804 .254902 rgb
f
346.196 219.098 mo
356.061 219.098 li
356.061 206.031 li
346.196 206.031 li
346.196 219.098 li
cp
.8 1 1 rgb
f
346.94 218.354 mo
355.315 218.354 li
355.315 206.775 li
346.94 206.775 li
346.94 218.354 li
cp
356.805 219.842 mo
345.452 219.842 li
345.452 205.287 li
356.805 205.287 li
356.805 219.842 li
cp
.498039 .309804 .254902 rgb
f
355.688 212.564 mo
346.568 212.564 li
355.688 212.564 li
cp
.8 1 1 rgb
f
355.688 213.31 mo
346.568 213.31 li
346.568 211.82 li
355.688 211.82 li
355.688 213.31 li
cp
.498039 .309804 .254902 rgb
f
346.196 199.965 mo
356.061 199.965 li
356.061 186.897 li
346.196 186.897 li
346.196 199.965 li
cp
.8 1 1 rgb
f
346.94 199.22 mo
355.315 199.22 li
355.315 187.643 li
346.94 187.643 li
346.94 199.22 li
cp
356.805 200.709 mo
345.452 200.709 li
345.452 186.152 li
356.805 186.152 li
356.805 200.709 li
cp
.498039 .309804 .254902 rgb
f
355.688 193.431 mo
346.568 193.431 li
355.688 193.431 li
cp
.8 1 1 rgb
f
355.688 194.175 mo
346.568 194.175 li
346.568 192.687 li
355.688 192.687 li
355.688 194.175 li
cp
.498039 .309804 .254902 rgb
f
342.52 219.098 mo
332.655 219.098 li
332.655 206.031 li
342.52 206.031 li
342.52 219.098 li
cp
.8 1 1 rgb
f
333.399 218.354 mo
341.774 218.354 li
341.774 206.775 li
333.399 206.775 li
333.399 218.354 li
cp
343.264 219.842 mo
331.911 219.842 li
331.911 205.287 li
343.264 205.287 li
343.264 219.842 li
cp
.498039 .309804 .254902 rgb
f
333.027 212.564 mo
342.146 212.564 li
333.027 212.564 li
cp
.8 1 1 rgb
f
342.146 213.31 mo
333.027 213.31 li
333.027 211.82 li
342.146 211.82 li
342.146 213.31 li
cp
.498039 .309804 .254902 rgb
f
342.52 199.965 mo
332.655 199.965 li
332.655 186.897 li
342.52 186.897 li
342.52 199.965 li
cp
.8 1 1 rgb
f
333.399 199.22 mo
341.774 199.22 li
341.774 187.643 li
333.399 187.643 li
333.399 199.22 li
cp
343.264 200.709 mo
331.911 200.709 li
331.911 186.152 li
343.264 186.152 li
343.264 200.709 li
cp
.498039 .309804 .254902 rgb
f
333.027 193.431 mo
342.146 193.431 li
333.027 193.431 li
cp
.8 1 1 rgb
f
342.146 194.175 mo
333.027 194.175 li
333.027 192.687 li
342.146 192.687 li
342.146 194.175 li
cp
.498039 .309804 .254902 rgb
f
362.171 200.114 mo
372.035 200.114 li
372.035 187.047 li
362.171 187.047 li
362.171 200.114 li
cp
.8 1 1 rgb
f
362.916 199.37 mo
371.291 199.37 li
371.291 187.792 li
362.916 187.792 li
362.916 199.37 li
cp
372.779 200.859 mo
361.427 200.859 li
361.427 186.303 li
372.779 186.303 li
372.779 200.859 li
cp
.498039 .309804 .254902 rgb
f
371.663 193.581 mo
362.544 193.581 li
371.663 193.581 li
cp
.8 1 1 rgb
f
371.663 194.325 mo
362.544 194.325 li
362.544 192.837 li
371.663 192.837 li
371.663 194.325 li
cp
.498039 .309804 .254902 rgb
f
311.115 209.911 mo
268.68 209.911 li
270.913 214.479 li
311.115 214.479 li
311.115 209.911 li
cp
1 .286275 .168627 rgb
f
354.044 174.138 mo
307.142 174.138 li
309.375 178.706 li
354.044 178.706 li
354.044 174.138 li
cp
f
334.672 174.138 mo
381.573 174.138 li
379.34 178.706 li
334.672 178.706 li
334.672 174.138 li
cp
f
377.6 209.911 mo
420.035 209.911 li
417.803 214.479 li
377.6 214.479 li
377.6 209.911 li
cp
f
354.044 175.136 mo
354.044 180.484 349.707 184.821 344.358 184.821 cv
339.008 184.821 334.672 180.484 334.672 175.136 cv
334.672 169.786 339.008 165.449 344.358 165.449 cv
349.707 165.449 354.044 169.786 354.044 175.136 cv
cp
.901961 .101961 0 rgb
f
342.409 167.847 mo
346.31 167.847 li
346.31 182.424 li
342.409 182.424 li
342.409 167.847 li
cp
1 1 1 rgb
f
337.072 177.087 mo
337.072 173.186 li
351.649 173.186 li
351.649 177.087 li
337.072 177.087 li
cp
f
420.035 269.276 mo
268.68 269.276 li
268.68 264.692 li
420.035 264.692 li
420.035 269.276 li
cp
.380392 .231373 .192157 rgb
f
198.993 19.2646 mo
197.505 19.2646 li
197.505 0 li
198.993 0 li
198.993 19.2646 li
cp
.498039 .309804 .254902 rgb
f
203.306 6.25879 mo
193.192 6.25879 li
193.192 4.77051 li
203.306 4.77051 li
203.306 6.25879 li
cp
f
128.498 68.3496 mo
133.536 52.9707 li
190.532 52.9707 li
190.532 68.3496 li
128.498 68.3496 li
cp
1 .286275 .168627 rgb
f
268 68.3496 mo
262.962 52.9707 li
205.967 52.9707 li
205.967 68.3496 li
268 68.3496 li
cp
f
218.478 123.067 mo
178.021 123.067 li
178.021 68.3496 li
218.478 68.3496 li
218.478 123.067 li
cp
1 .913725 .611765 rgb
f
208.363 66.0693 mo
188.135 66.0693 li
188.135 28.8174 li
208.363 28.8174 li
208.363 66.0693 li
cp
f
218.478 123.067 mo
265.942 123.067 li
265.942 68.3496 li
218.478 68.3496 li
218.478 123.067 li
cp
1 .831373 .380392 rgb
f
178.021 123.067 mo
130.557 123.067 li
130.557 68.3496 li
178.021 68.3496 li
178.021 123.067 li
cp
f
198.249 68.3496 mo
198.249 46.2695 li
178.021 68.3496 li
198.249 68.3496 li
cp
1 .913725 .611765 rgb
f
198.249 68.3496 mo
198.249 46.2695 li
218.478 68.3496 li
198.249 68.3496 li
cp
f
175.12 74.0508 mo
173.079 72.2158 li
198.249 44.3145 li
199.27 47.1865 li
175.12 74.0508 li
cp
.901961 .101961 0 rgb
f
221.378 74.0508 mo
197.229 47.1865 li
198.249 44.3145 li
223.419 72.2158 li
221.378 74.0508 li
cp
f
198.249 15.2002 mo
198.249 28.8174 li
188.135 28.8174 li
198.249 15.2002 li
cp
f
198.249 15.2002 mo
198.249 28.8174 li
208.363 28.8174 li
198.249 15.2002 li
cp
f
188.135 82.7969 mo
181.82 82.7969 li
181.82 71.7607 li
188.135 71.7607 li
188.135 82.7969 li
cp
.8 1 1 rgb
f
182.564 82.0527 mo
187.391 82.0527 li
187.391 72.5049 li
182.564 72.5049 li
182.564 82.0527 li
cp
188.88 83.541 mo
181.075 83.541 li
181.075 71.0156 li
188.88 71.0156 li
188.88 83.541 li
cp
1 .286275 .168627 rgb
f
208.363 82.7969 mo
214.678 82.7969 li
214.678 71.7607 li
208.363 71.7607 li
208.363 82.7969 li
cp
.8 1 1 rgb
f
209.107 82.0527 mo
213.934 82.0527 li
213.934 72.5049 li
209.107 72.5049 li
209.107 82.0527 li
cp
215.423 83.541 mo
207.618 83.541 li
207.618 71.0156 li
215.423 71.0156 li
215.423 83.541 li
cp
1 .286275 .168627 rgb
f
195.092 81.2168 mo
201.406 81.2168 li
201.406 66.8418 li
198.249 66.8418 li
195.092 66.8418 li
195.092 81.2168 li
cp
.8 1 1 rgb
f
195.836 80.4727 mo
200.662 80.4727 li
200.662 67.5859 li
195.836 67.5859 li
195.836 80.4727 li
cp
202.15 81.9619 mo
194.348 81.9619 li
194.348 66.0967 li
202.15 66.0967 li
202.15 81.9619 li
cp
1 .286275 .168627 rgb
f
198.249 63.3545 mo
197.072 63.3545 195.092 63.9238 195.092 66.8418 cv
198.249 66.8418 li
201.406 66.8418 li
201.406 63.9238 199.426 63.3545 198.249 63.3545 cv
cp
.8 1 1 rgb
f
195.893 66.0967 mo
200.605 66.0967 li
200.322 64.3789 199.047 64.0996 198.249 64.0996 cv
197.451 64.0996 196.176 64.3789 195.893 66.0967 cv
cp
202.15 67.5859 mo
194.348 67.5859 li
194.348 66.8418 li
194.348 63.7227 196.362 62.6104 198.249 62.6104 cv
200.136 62.6104 202.15 63.7227 202.15 66.8418 cv
202.15 67.5859 li
cp
1 .286275 .168627 rgb
f
181.82 77.2793 mo
188.135 77.2793 li
181.82 77.2793 li
cp
.8 1 1 rgb
f
188.135 78.0234 mo
181.82 78.0234 li
181.82 76.5342 li
188.135 76.5342 li
188.135 78.0234 li
cp
1 .286275 .168627 rgb
f
142.854 115.533 mo
136.539 115.533 li
136.539 104.497 li
142.854 104.497 li
142.854 115.533 li
cp
.8 1 1 rgb
f
137.283 114.788 mo
142.109 114.788 li
142.109 105.241 li
137.283 105.241 li
137.283 114.788 li
cp
143.599 116.277 mo
135.795 116.277 li
135.795 103.753 li
143.599 103.753 li
143.599 116.277 li
cp
1 .286275 .168627 rgb
f
136.539 110.015 mo
142.854 110.015 li
136.539 110.015 li
cp
.8 1 1 rgb
f
142.854 110.76 mo
136.539 110.76 li
136.539 109.271 li
142.854 109.271 li
142.854 110.76 li
cp
1 .286275 .168627 rgb
f
157.445 115.533 mo
151.131 115.533 li
151.131 104.497 li
157.445 104.497 li
157.445 115.533 li
cp
.8 1 1 rgb
f
151.876 114.788 mo
156.701 114.788 li
156.701 105.241 li
151.876 105.241 li
151.876 114.788 li
cp
158.19 116.277 mo
150.387 116.277 li
150.387 103.753 li
158.19 103.753 li
158.19 116.277 li
cp
1 .286275 .168627 rgb
f
151.131 110.015 mo
157.445 110.015 li
151.131 110.015 li
cp
.8 1 1 rgb
f
157.445 110.76 mo
151.131 110.76 li
151.131 109.271 li
157.445 109.271 li
157.445 110.76 li
cp
1 .286275 .168627 rgb
f
172.039 115.533 mo
165.724 115.533 li
165.724 104.497 li
172.039 104.497 li
172.039 115.533 li
cp
.8 1 1 rgb
f
166.468 114.788 mo
171.294 114.788 li
171.294 105.241 li
166.468 105.241 li
166.468 114.788 li
cp
172.783 116.277 mo
164.979 116.277 li
164.979 103.753 li
172.783 103.753 li
172.783 116.277 li
cp
1 .286275 .168627 rgb
f
165.724 110.015 mo
172.039 110.015 li
165.724 110.015 li
cp
.8 1 1 rgb
f
172.039 110.76 mo
165.724 110.76 li
165.724 109.271 li
172.039 109.271 li
172.039 110.76 li
cp
1 .286275 .168627 rgb
f
208.363 77.2793 mo
214.678 77.2793 li
208.363 77.2793 li
cp
.8 1 1 rgb
f
214.678 78.0234 mo
208.363 78.0234 li
208.363 76.5342 li
214.678 76.5342 li
214.678 78.0234 li
cp
1 .286275 .168627 rgb
f
195.092 42.5986 mo
201.406 42.5986 li
201.406 31.5635 li
195.092 31.5635 li
195.092 42.5986 li
cp
.8 1 1 rgb
f
195.836 41.8545 mo
200.662 41.8545 li
200.662 32.3076 li
195.836 32.3076 li
195.836 41.8545 li
cp
202.15 43.3438 mo
194.348 43.3438 li
194.348 30.8184 li
202.15 30.8184 li
202.15 43.3438 li
cp
1 .286275 .168627 rgb
f
195.092 37.0811 mo
201.406 37.0811 li
195.092 37.0811 li
cp
.8 1 1 rgb
f
201.406 37.8252 mo
195.092 37.8252 li
195.092 36.3359 li
201.406 36.3359 li
201.406 37.8252 li
cp
1 .286275 .168627 rgb
f
195.092 73.8193 mo
201.406 73.8193 li
195.092 73.8193 li
cp
.8 1 1 rgb
f
201.406 74.5635 mo
195.092 74.5635 li
195.092 73.0752 li
201.406 73.0752 li
201.406 74.5635 li
cp
1 .286275 .168627 rgb
f
136.539 95.6846 mo
142.854 95.6846 li
142.854 81.3096 li
139.696 81.3096 li
136.539 81.3096 li
136.539 95.6846 li
cp
.8 1 1 rgb
f
137.283 94.9404 mo
142.109 94.9404 li
142.109 82.0537 li
137.283 82.0537 li
137.283 94.9404 li
cp
143.599 96.4287 mo
135.795 96.4287 li
135.795 80.5654 li
143.599 80.5654 li
143.599 96.4287 li
cp
1 .286275 .168627 rgb
f
139.696 77.8242 mo
138.52 77.8242 136.539 78.3926 136.539 81.3096 cv
139.696 81.3096 li
142.854 81.3096 li
142.854 78.3926 140.873 77.8242 139.696 77.8242 cv
cp
.8 1 1 rgb
f
137.34 80.5654 mo
142.052 80.5654 li
141.77 78.8477 140.493 78.5684 139.696 78.5684 cv
138.898 78.5684 137.623 78.8477 137.34 80.5654 cv
cp
143.599 82.0537 mo
135.795 82.0537 li
135.795 81.3096 li
135.795 78.1904 137.81 77.0791 139.696 77.0791 cv
141.582 77.0791 143.599 78.1904 143.599 81.3096 cv
143.599 82.0537 li
cp
1 .286275 .168627 rgb
f
136.539 88.2871 mo
142.854 88.2871 li
136.539 88.2871 li
cp
.8 1 1 rgb
f
142.854 89.0313 mo
136.539 89.0313 li
136.539 87.543 li
142.854 87.543 li
142.854 89.0313 li
cp
1 .286275 .168627 rgb
f
151.131 95.6846 mo
157.445 95.6846 li
157.445 81.3096 li
154.289 81.3096 li
151.131 81.3096 li
151.131 95.6846 li
cp
.8 1 1 rgb
f
151.876 94.9404 mo
156.701 94.9404 li
156.701 82.0537 li
151.876 82.0537 li
151.876 94.9404 li
cp
158.19 96.4287 mo
150.387 96.4287 li
150.387 80.5654 li
158.19 80.5654 li
158.19 96.4287 li
cp
1 .286275 .168627 rgb
f
154.289 77.8242 mo
153.112 77.8242 151.131 78.3926 151.131 81.3096 cv
154.289 81.3096 li
157.445 81.3096 li
157.445 78.3926 155.465 77.8242 154.289 77.8242 cv
cp
.8 1 1 rgb
f
151.933 80.5654 mo
156.645 80.5654 li
156.361 78.8477 155.086 78.5684 154.289 78.5684 cv
153.49 78.5684 152.215 78.8477 151.933 80.5654 cv
cp
158.19 82.0537 mo
150.387 82.0537 li
150.387 81.3096 li
150.387 78.1904 152.401 77.0791 154.289 77.0791 cv
156.175 77.0791 158.19 78.1904 158.19 81.3096 cv
158.19 82.0537 li
cp
1 .286275 .168627 rgb
f
151.131 88.2871 mo
157.445 88.2871 li
151.131 88.2871 li
cp
.8 1 1 rgb
f
157.445 89.0313 mo
151.131 89.0313 li
151.131 87.543 li
157.445 87.543 li
157.445 89.0313 li
cp
1 .286275 .168627 rgb
f
165.724 95.6846 mo
172.039 95.6846 li
172.039 81.3096 li
168.881 81.3096 li
165.724 81.3096 li
165.724 95.6846 li
cp
.8 1 1 rgb
f
166.468 94.9404 mo
171.294 94.9404 li
171.294 82.0537 li
166.468 82.0537 li
166.468 94.9404 li
cp
172.783 96.4287 mo
164.979 96.4287 li
164.979 80.5654 li
172.783 80.5654 li
172.783 96.4287 li
cp
1 .286275 .168627 rgb
f
168.881 77.8242 mo
167.705 77.8242 165.724 78.3926 165.724 81.3096 cv
168.881 81.3096 li
172.039 81.3096 li
172.039 78.3926 170.058 77.8242 168.881 77.8242 cv
cp
.8 1 1 rgb
f
166.524 80.5654 mo
171.237 80.5654 li
170.955 78.8477 169.679 78.5684 168.881 78.5684 cv
168.084 78.5684 166.807 78.8477 166.524 80.5654 cv
cp
172.783 82.0537 mo
164.979 82.0537 li
164.979 81.3096 li
164.979 78.1904 166.995 77.0791 168.881 77.0791 cv
170.768 77.0791 172.783 78.1904 172.783 81.3096 cv
172.783 82.0537 li
cp
1 .286275 .168627 rgb
f
165.724 88.2871 mo
172.039 88.2871 li
165.724 88.2871 li
cp
.8 1 1 rgb
f
172.039 89.0313 mo
165.724 89.0313 li
165.724 87.543 li
172.039 87.543 li
172.039 89.0313 li
cp
1 .286275 .168627 rgb
f
253.645 115.533 mo
259.96 115.533 li
259.96 104.497 li
253.645 104.497 li
253.645 115.533 li
cp
.8 1 1 rgb
f
254.389 114.788 mo
259.215 114.788 li
259.215 105.241 li
254.389 105.241 li
254.389 114.788 li
cp
260.703 116.277 mo
252.899 116.277 li
252.899 103.753 li
260.703 103.753 li
260.703 116.277 li
cp
1 .286275 .168627 rgb
f
259.96 110.015 mo
253.645 110.015 li
259.96 110.015 li
cp
.8 1 1 rgb
f
259.96 110.76 mo
253.645 110.76 li
253.645 109.271 li
259.96 109.271 li
259.96 110.76 li
cp
1 .286275 .168627 rgb
f
239.053 115.533 mo
245.367 115.533 li
245.367 104.497 li
239.053 104.497 li
239.053 115.533 li
cp
.8 1 1 rgb
f
239.797 114.788 mo
244.622 114.788 li
244.622 105.241 li
239.797 105.241 li
239.797 114.788 li
cp
246.111 116.277 mo
238.308 116.277 li
238.308 103.753 li
246.111 103.753 li
246.111 116.277 li
cp
1 .286275 .168627 rgb
f
245.367 110.015 mo
239.053 110.015 li
245.367 110.015 li
cp
.8 1 1 rgb
f
245.367 110.76 mo
239.053 110.76 li
239.053 109.271 li
245.367 109.271 li
245.367 110.76 li
cp
1 .286275 .168627 rgb
f
224.459 115.533 mo
230.774 115.533 li
230.774 104.497 li
224.459 104.497 li
224.459 115.533 li
cp
.8 1 1 rgb
f
225.204 114.788 mo
230.03 114.788 li
230.03 105.241 li
225.204 105.241 li
225.204 114.788 li
cp
231.519 116.277 mo
223.715 116.277 li
223.715 103.753 li
231.519 103.753 li
231.519 116.277 li
cp
1 .286275 .168627 rgb
f
230.774 110.015 mo
224.459 110.015 li
230.774 110.015 li
cp
.8 1 1 rgb
f
230.774 110.76 mo
224.459 110.76 li
224.459 109.271 li
230.774 109.271 li
230.774 110.76 li
cp
1 .286275 .168627 rgb
f
259.96 95.6846 mo
253.645 95.6846 li
253.645 81.3096 li
256.802 81.3096 li
259.96 81.3096 li
259.96 95.6846 li
cp
.8 1 1 rgb
f
254.389 94.9404 mo
259.215 94.9404 li
259.215 82.0537 li
254.389 82.0537 li
254.389 94.9404 li
cp
260.703 96.4287 mo
252.899 96.4287 li
252.899 80.5654 li
260.703 80.5654 li
260.703 96.4287 li
cp
1 .286275 .168627 rgb
f
256.802 77.8242 mo
257.978 77.8242 259.96 78.3926 259.96 81.3096 cv
256.802 81.3096 li
253.645 81.3096 li
253.645 78.3926 255.625 77.8242 256.802 77.8242 cv
cp
.8 1 1 rgb
f
254.446 80.5654 mo
259.158 80.5654 li
258.875 78.8477 257.6 78.5684 256.802 78.5684 cv
256.005 78.5684 254.729 78.8477 254.446 80.5654 cv
cp
260.703 82.0537 mo
252.899 82.0537 li
252.899 81.3096 li
252.899 78.1904 254.916 77.0791 256.802 77.0791 cv
258.688 77.0791 260.703 78.1904 260.703 81.3096 cv
260.703 82.0537 li
cp
1 .286275 .168627 rgb
f
259.96 88.2871 mo
253.645 88.2871 li
259.96 88.2871 li
cp
.8 1 1 rgb
f
259.96 89.0313 mo
253.645 89.0313 li
253.645 87.543 li
259.96 87.543 li
259.96 89.0313 li
cp
1 .286275 .168627 rgb
f
245.367 95.6846 mo
239.053 95.6846 li
239.053 81.3096 li
242.209 81.3096 li
245.367 81.3096 li
245.367 95.6846 li
cp
.8 1 1 rgb
f
239.797 94.9404 mo
244.622 94.9404 li
244.622 82.0537 li
239.797 82.0537 li
239.797 94.9404 li
cp
246.111 96.4287 mo
238.308 96.4287 li
238.308 80.5654 li
246.111 80.5654 li
246.111 96.4287 li
cp
1 .286275 .168627 rgb
f
242.209 77.8242 mo
243.385 77.8242 245.367 78.3926 245.367 81.3096 cv
242.209 81.3096 li
239.053 81.3096 li
239.053 78.3926 241.033 77.8242 242.209 77.8242 cv
cp
.8 1 1 rgb
f
239.854 80.5654 mo
244.565 80.5654 li
244.283 78.8477 243.007 78.5684 242.209 78.5684 cv
241.412 78.5684 240.137 78.8477 239.854 80.5654 cv
cp
246.111 82.0537 mo
238.308 82.0537 li
238.308 81.3096 li
238.308 78.1904 240.323 77.0791 242.209 77.0791 cv
244.097 77.0791 246.111 78.1904 246.111 81.3096 cv
246.111 82.0537 li
cp
1 .286275 .168627 rgb
f
245.367 88.2871 mo
239.053 88.2871 li
245.367 88.2871 li
cp
.8 1 1 rgb
f
245.367 89.0313 mo
239.053 89.0313 li
239.053 87.543 li
245.367 87.543 li
245.367 89.0313 li
cp
1 .286275 .168627 rgb
f
230.774 95.6846 mo
224.459 95.6846 li
224.459 81.3096 li
227.617 81.3096 li
230.774 81.3096 li
230.774 95.6846 li
cp
.8 1 1 rgb
f
225.204 94.9404 mo
230.03 94.9404 li
230.03 82.0537 li
225.204 82.0537 li
225.204 94.9404 li
cp
231.519 96.4287 mo
223.715 96.4287 li
223.715 80.5654 li
231.519 80.5654 li
231.519 96.4287 li
cp
1 .286275 .168627 rgb
f
227.617 77.8242 mo
228.793 77.8242 230.774 78.3926 230.774 81.3096 cv
227.617 81.3096 li
224.459 81.3096 li
224.459 78.3926 226.44 77.8242 227.617 77.8242 cv
cp
.8 1 1 rgb
f
225.261 80.5654 mo
229.974 80.5654 li
229.691 78.8477 228.414 78.5684 227.617 78.5684 cv
226.819 78.5684 225.543 78.8477 225.261 80.5654 cv
cp
231.519 82.0537 mo
223.715 82.0537 li
223.715 81.3096 li
223.715 78.1904 225.73 77.0791 227.617 77.0791 cv
229.503 77.0791 231.519 78.1904 231.519 81.3096 cv
231.519 82.0537 li
cp
1 .286275 .168627 rgb
f
230.774 88.2871 mo
224.459 88.2871 li
230.774 88.2871 li
cp
.8 1 1 rgb
f
230.774 89.0313 mo
224.459 89.0313 li
224.459 87.543 li
230.774 87.543 li
230.774 89.0313 li
cp
1 .286275 .168627 rgb
f
268 127.285 mo
128.498 127.285 li
128.498 123.067 li
268 123.067 li
268 127.285 li
cp
.380392 .231373 .192157 rgb
f
198.249 92.0391 mo
198.249 122.381 li
189.672 122.381 li
189.672 92.0391 li
198.249 92.0391 li
cp
.498039 .309804 .254902 rgb
f
190.417 121.637 mo
197.505 121.637 li
197.505 92.7842 li
190.417 92.7842 li
190.417 121.637 li
cp
198.993 123.126 mo
188.927 123.126 li
188.927 91.2949 li
198.993 91.2949 li
198.993 123.126 li
cp
1 .286275 .168627 rgb
f
198.249 92.0391 mo
198.249 122.381 li
206.826 122.381 li
206.826 92.0391 li
198.249 92.0391 li
cp
.498039 .309804 .254902 rgb
f
198.993 121.637 mo
206.081 121.637 li
206.081 92.7842 li
198.993 92.7842 li
198.993 121.637 li
cp
207.571 123.126 mo
197.505 123.126 li
197.505 91.2949 li
207.571 91.2949 li
207.571 123.126 li
cp
1 .286275 .168627 rgb
f
198.249 92.0391 mo
198.249 85.5771 li
198.249 85.5771 189.672 85.7295 189.672 92.0391 cv
198.249 92.0391 li
cp
.8 1 1 rgb
f
190.465 91.2949 mo
197.505 91.2949 li
197.505 86.3721 li
195.641 86.5547 190.992 87.4023 190.465 91.2949 cv
cp
198.993 92.7842 mo
188.927 92.7842 li
188.927 92.0391 li
188.927 86.4697 195.016 84.8896 198.236 84.833 cv
198.993 84.8193 li
198.993 92.7842 li
cp
1 .286275 .168627 rgb
f
198.249 92.0391 mo
198.249 85.5771 li
198.249 85.5771 206.826 85.7295 206.826 92.0391 cv
198.249 92.0391 li
cp
.8 1 1 rgb
f
198.993 91.2949 mo
206.033 91.2949 li
205.506 87.4023 200.857 86.5547 198.993 86.3721 cv
198.993 91.2949 li
cp
207.571 92.7842 mo
197.505 92.7842 li
197.505 84.8193 li
198.262 84.833 li
201.482 84.8896 207.571 86.4697 207.571 92.0391 cv
207.571 92.7842 li
cp
1 .286275 .168627 rgb
f
33.6499 61.7852 mo
32.1611 61.7852 li
32.1611 50.1865 li
33.6499 50.1865 li
33.6499 61.7852 li
cp
.0588235 .6 .85098 rgb
f
79.0762 61.7852 mo
77.5869 61.7852 li
77.5869 50.1865 li
79.0762 50.1865 li
79.0762 61.7852 li
cp
f
108.792 126.936 mo
2.7583 126.936 li
2.7583 62.9922 li
108.792 62.9922 li
108.792 126.936 li
cp
.356863 .733333 .909804 rgb
f
108.792 106.466 mo
2.7583 106.466 li
2.7583 126.936 li
108.792 126.936 li
108.792 106.466 li
cp
.0588235 .6 .85098 rgb
f
21.5303 110.188 mo
9.87695 110.188 li
9.87695 79.7402 li
21.5303 79.7402 li
21.5303 110.188 li
cp
.8 1 1 rgb
f
10.6216 109.442 mo
20.7861 109.442 li
20.7861 80.4854 li
10.6216 80.4854 li
10.6216 109.442 li
cp
22.2744 110.932 mo
9.13281 110.932 li
9.13281 78.9961 li
22.2744 78.9961 li
22.2744 110.932 li
cp
.498039 .309804 .254902 rgb
f
37.0254 110.188 mo
25.3721 110.188 li
25.3721 79.7402 li
37.0254 79.7402 li
37.0254 110.188 li
cp
.8 1 1 rgb
f
26.1172 109.442 mo
36.2808 109.442 li
36.2808 80.4854 li
26.1172 80.4854 li
26.1172 109.442 li
cp
37.7695 110.932 mo
24.6279 110.932 li
24.6279 78.9961 li
37.7695 78.9961 li
37.7695 110.932 li
cp
.498039 .309804 .254902 rgb
f
91.1602 110.188 mo
102.813 110.188 li
102.813 79.7402 li
91.1602 79.7402 li
91.1602 110.188 li
cp
.8 1 1 rgb
f
91.9048 109.442 mo
102.068 109.442 li
102.068 80.4854 li
91.9048 80.4854 li
91.9048 109.442 li
cp
103.557 110.932 mo
90.4155 110.932 li
90.4155 78.9961 li
103.557 78.9961 li
103.557 110.932 li
cp
.498039 .309804 .254902 rgb
f
75.665 110.188 mo
87.3179 110.188 li
87.3179 79.7402 li
75.665 79.7402 li
75.665 110.188 li
cp
.8 1 1 rgb
f
76.4097 109.442 mo
86.5737 109.442 li
86.5737 80.4854 li
76.4097 80.4854 li
76.4097 109.442 li
cp
88.0625 110.932 mo
74.9204 110.932 li
74.9204 78.9961 li
88.0625 78.9961 li
88.0625 110.932 li
cp
.498039 .309804 .254902 rgb
f
66.8408 126.54 mo
45.8491 126.54 li
45.8491 94.9404 li
66.8408 94.9404 li
66.8408 126.54 li
cp
.380392 .231373 .192157 rgb
f
46.5933 125.796 mo
66.0967 125.796 li
66.0967 95.6846 li
46.5933 95.6846 li
46.5933 125.796 li
cp
67.5854 127.285 mo
45.1045 127.285 li
45.1045 94.1953 li
67.5854 94.1953 li
67.5854 127.285 li
cp
1 .913725 .611765 rgb
f
57.0898 126.936 mo
55.6011 126.936 li
55.6011 95.1123 li
57.0898 95.1123 li
57.0898 126.936 li
cp
f
42.6509 126.936 mo
55.7749 126.936 li
55.7749 124.431 li
42.6509 124.431 li
42.6509 126.936 li
cp
.498039 .309804 .254902 rgb
f
68.8994 126.936 mo
55.7749 126.936 li
55.7749 124.431 li
68.8994 124.431 li
68.8994 126.936 li
cp
f
60.5029 112.555 mo
60.5029 113.187 59.9912 113.698 59.3594 113.698 cv
58.7275 113.698 58.2158 113.187 58.2158 112.555 cv
58.2158 111.923 58.7275 111.411 59.3594 111.411 cv
59.9912 111.411 60.5029 111.923 60.5029 112.555 cv
cp
1 .913725 .611765 rgb
f
52.1875 112.555 mo
52.1875 113.187 52.6997 113.698 53.3311 113.698 cv
53.9629 113.698 54.4746 113.187 54.4746 112.555 cv
54.4746 111.923 53.9629 111.411 53.3311 111.411 cv
52.6997 111.411 52.1875 111.923 52.1875 112.555 cv
cp
f
64.3403 72.2129 mo
64.3403 72.2129 62.4355 73.0537 60.3413 72.7705 cv
58.2793 72.4922 56.3452 69.7959 56.3452 69.7959 cv
56.3452 69.7959 54.4106 72.4922 52.3486 72.7705 cv
50.2554 73.0537 48.3496 72.2129 48.3496 72.2129 cv
48.3496 72.2129 50.1147 75.1865 49.9399 77.3252 cv
49.7637 79.4629 46.9561 83.0879 50.2031 85.7822 cv
53.4487 88.4775 55.6128 88.5469 56.3452 89.6855 cv
56.9375 88.5137 59.2407 88.4775 62.4883 85.7822 cv
65.7339 83.0879 62.9268 79.4629 62.7515 77.3252 cv
62.5752 75.1865 64.3403 72.2129 64.3403 72.2129 cv
cp
1 .831373 .380392 rgb
f
56.3027 87.4873 mo
55.9663 87.2959 55.6021 87.124 55.2183 86.9414 cv
54.1797 86.4482 52.8862 85.835 51.2705 84.4961 cv
49.9399 83.3887 50.1709 82.1836 50.9736 79.8809 cv
51.2656 79.042 51.542 78.25 51.6069 77.4619 cv
51.686 76.4941 51.4819 75.4473 51.1841 74.498 cv
51.2759 74.5 51.3682 74.501 51.4604 74.501 cv
51.8389 74.501 52.2124 74.4775 52.5728 74.4287 cv
54.0679 74.2266 55.4067 73.2295 56.3452 72.3232 cv
57.2837 73.2295 58.6221 74.2266 60.1177 74.4287 cv
60.4775 74.4775 60.8521 74.501 61.229 74.501 cv
61.3223 74.501 61.4136 74.5 61.5054 74.498 cv
61.208 75.4473 61.0029 76.4941 61.084 77.4619 cv
61.1484 78.25 61.4243 79.042 61.7168 79.8809 cv
62.5195 82.1836 62.752 83.3887 61.4194 84.4961 cv
59.8501 85.7988 58.5479 86.4033 57.501 86.8877 cv
57.0742 87.085 56.6685 87.2734 56.3027 87.4873 cv
cp
1 .913725 .611765 rgb
f
57.4458 77.7813 mo
59.9243 78.1074 li
58.1582 79.876 li
58.6133 82.332 li
56.3862 81.1992 li
54.1895 82.3926 li
54.5786 79.9238 li
52.7661 78.2041 li
55.2344 77.8105 li
56.3096 75.5557 li
57.4458 77.7813 li
cp
.0588235 .6 .85098 rgb
f
110.281 56.5645 mo
1.26953 56.5645 li
2.7583 62.9922 li
108.792 62.9922 li
110.281 56.5645 li
cp
.498039 .309804 .254902 rgb
f
56.3452 35.793 mo
22.8647 35.793 li
22.8647 51.5195 li
56.3452 51.5195 li
89.8252 51.5195 li
89.8252 35.793 li
56.3452 35.793 li
cp
.0588235 .6 .85098 rgb
f
23.6094 50.7754 mo
89.0811 50.7754 li
89.0811 36.5371 li
23.6094 36.5371 li
23.6094 50.7754 li
cp
90.5698 52.2637 mo
22.1206 52.2637 li
22.1206 35.0488 li
90.5698 35.0488 li
90.5698 52.2637 li
cp
.498039 .309804 .254902 rgb
f
38.1431 40.1357 mo
37.9663 40.1357 37.7974 40.1416 37.6382 40.1563 cv
37.4785 40.1699 37.3496 40.1846 37.2524 40.2021 cv
37.2524 43.2217 li
37.2861 43.2314 37.3418 43.2393 37.4121 43.248 cv
37.4834 43.2568 37.5571 43.2637 37.6382 43.2676 cv
37.7173 43.2715 37.7944 43.2744 37.8701 43.2744 cv
37.9463 43.2744 38.001 43.2744 38.0371 43.2744 cv
38.2764 43.2744 38.5137 43.252 38.7476 43.208 cv
38.9824 43.1631 39.1938 43.082 39.3804 42.9619 cv
39.5659 42.8428 39.7144 42.6768 39.8247 42.4639 cv
39.9355 42.251 39.9917 41.9717 39.9917 41.626 cv
39.9917 41.332 39.9385 41.0928 39.8325 40.9004 cv
39.7256 40.7109 39.5859 40.5576 39.4136 40.4424 cv
39.2397 40.3271 39.043 40.2471 38.8213 40.2021 cv
38.6001 40.1592 38.374 40.1357 38.1431 40.1357 cv
cp
35.4297 38.7939 mo
35.8027 38.7227 36.2119 38.667 36.6606 38.6279 cv
37.1069 38.5869 37.5542 38.5664 37.9966 38.5664 cv
38.4585 38.5664 38.9214 38.6045 39.3862 38.6797 cv
39.8521 38.7549 40.2705 38.9063 40.6431 39.1318 cv
41.0151 39.3594 41.3188 39.6738 41.5537 40.0762 cv
41.7896 40.4805 41.9072 41.0068 41.9072 41.6533 cv
41.9072 42.2383 41.8037 42.7314 41.6011 43.1357 cv
41.396 43.5391 41.1265 43.8691 40.7891 44.126 cv
40.4517 44.3828 40.0693 44.5684 39.6382 44.6846 cv
39.2085 44.7998 38.7632 44.8564 38.3022 44.8564 cv
38.2578 44.8564 38.187 44.8564 38.0903 44.8564 cv
37.9927 44.8564 37.8911 44.8555 37.7832 44.8506 cv
37.6772 44.8447 37.5742 44.8389 37.4707 44.8301 cv
37.3691 44.8213 37.2974 44.8125 37.2524 44.8037 cv
37.2524 48.0088 li
35.4297 48.0088 li
35.4297 38.7939 li
cp
.8 1 1 rgb
f
44.5137 43.3545 mo
44.5137 43.8242 44.5532 44.2568 44.6328 44.6504 cv
44.7134 45.0459 44.835 45.3848 44.999 45.668 cv
45.1621 45.9521 45.3735 46.1748 45.6309 46.332 cv
45.8877 46.4932 46.1934 46.5723 46.5474 46.5723 cv
47.1953 46.5723 47.6963 46.3193 48.0508 45.8154 cv
48.4058 45.3086 48.583 44.4893 48.583 43.3545 cv
48.583 42.9023 48.5454 42.4824 48.4697 42.0908 cv
48.394 41.7002 48.2769 41.3604 48.1167 41.0664 cv
47.9575 40.7744 47.749 40.5469 47.4927 40.3828 cv
47.2344 40.2178 46.9204 40.1357 46.5474 40.1357 cv
45.9004 40.1357 45.3989 40.3955 45.0454 40.915 cv
44.6899 41.4326 44.5137 42.2461 44.5137 43.3545 cv
cp
42.5991 43.3545 mo
42.5991 41.8027 42.939 40.6084 43.6221 39.7705 cv
44.3047 38.9316 45.2803 38.5146 46.5474 38.5146 cv
47.2134 38.5146 47.7935 38.6289 48.29 38.8594 cv
48.7866 39.0898 49.1987 39.418 49.5273 39.8438 cv
49.8555 40.2695 50.0981 40.7783 50.2583 41.374 cv
50.418 41.9668 50.4971 42.627 50.4971 43.3545 cv
50.4971 44.9063 50.1533 46.1006 49.4678 46.9385 cv
48.7803 47.7764 47.8071 48.1953 46.5474 48.1953 cv
45.874 48.1953 45.2891 48.0791 44.7925 47.8506 cv
44.2964 47.6182 43.8857 47.291 43.5625 46.8652 cv
43.2388 46.4404 42.998 45.9307 42.8379 45.3359 cv
42.6787 44.7422 42.5991 44.082 42.5991 43.3545 cv
cp
f
57.6924 48.0088 mo
51.8008 48.0088 li
51.8008 38.7002 li
53.6226 38.7002 li
53.6226 46.3867 li
57.6924 46.3867 li
57.6924 48.0088 li
cp
f
58.8213 38.7002 mo
60.644 38.7002 li
60.644 48.0088 li
58.8213 48.0088 li
58.8213 38.7002 li
cp
f
68.7295 47.6279 mo
68.4458 47.8311 68.085 47.9756 67.6445 48.0635 cv
67.207 48.1504 66.7563 48.1953 66.2949 48.1953 cv
65.7368 48.1953 65.2065 48.1084 64.707 47.9365 cv
64.2056 47.7637 63.7632 47.4844 63.3823 47.0986 cv
63.0024 46.7129 62.6978 46.2109 62.4722 45.5947 cv
62.2456 44.9795 62.1328 44.2324 62.1328 43.3545 cv
62.1328 42.4414 62.2598 41.6777 62.5112 41.0605 cv
62.7646 40.4443 63.0923 39.9473 63.4961 39.5713 cv
63.8989 39.1953 64.3491 38.9238 64.8457 38.7607 cv
65.3418 38.5957 65.8384 38.5146 66.3345 38.5146 cv
66.8672 38.5146 67.3169 38.5488 67.6851 38.6211 cv
68.0527 38.6914 68.3564 38.7754 68.5957 38.873 cv
68.2363 40.415 li
68.0337 40.3184 67.791 40.2471 67.5117 40.2021 cv
67.2329 40.1592 66.8936 40.1357 66.4937 40.1357 cv
65.7583 40.1357 65.167 40.3984 64.7202 40.9229 cv
64.2715 41.4473 64.0469 42.2588 64.0469 43.3604 cv
64.0469 43.8418 64.1016 44.2783 64.2075 44.6738 cv
64.314 45.0693 64.4761 45.4053 64.6919 45.6865 cv
64.9102 45.9668 65.1807 46.1836 65.5039 46.3389 cv
65.8281 46.4941 66.2026 46.5723 66.6279 46.5723 cv
67.0273 46.5723 67.3633 46.5322 67.6387 46.4541 cv
67.9131 46.374 68.1523 46.2725 68.3564 46.1465 cv
68.7295 47.6279 li
cp
f
69.8589 38.7002 mo
75.3784 38.7002 li
75.3784 40.3213 li
71.6821 40.3213 li
71.6821 42.4912 li
75.0464 42.4912 li
75.0464 44.1123 li
71.6821 44.1123 li
71.6821 46.3867 li
75.4448 46.3867 li
75.4448 48.0088 li
69.8589 48.0088 li
69.8589 38.7002 li
cp
f
392.803 398.893 mo
311.684 398.893 li
311.684 334.976 li
392.803 334.976 li
392.803 398.893 li
cp
.498039 .309804 .254902 rgb
f
317.816 396.019 mo
305.551 396.019 li
305.551 343.535 li
317.816 343.535 li
317.816 396.019 li
cp
1 .913725 .611765 rgb
f
308.44 396.019 mo
307.199 396.019 li
307.199 343.535 li
308.44 343.535 li
308.44 396.019 li
cp
1 .831373 .380392 rgb
f
312.305 396.019 mo
311.063 396.019 li
311.063 343.535 li
312.305 343.535 li
312.305 396.019 li
cp
f
316.169 396.019 mo
314.928 396.019 li
314.928 343.535 li
316.169 343.535 li
316.169 396.019 li
cp
f
318.862 341.847 mo
304.505 341.847 li
304.505 343.592 li
318.862 343.592 li
318.862 341.847 li
cp
1 .913725 .611765 rgb
f
320.104 340.04 mo
303.265 340.04 li
303.265 342.086 li
320.104 342.086 li
320.104 340.04 li
cp
f
318.862 397.087 mo
304.505 397.087 li
304.505 395.343 li
318.862 395.343 li
318.862 397.087 li
cp
f
320.104 398.893 mo
303.265 398.893 li
303.265 396.847 li
320.104 396.847 li
320.104 398.893 li
cp
f
337.279 396.019 mo
325.014 396.019 li
325.014 343.535 li
337.279 343.535 li
337.279 396.019 li
cp
f
327.902 396.019 mo
326.661 396.019 li
326.661 343.535 li
327.902 343.535 li
327.902 396.019 li
cp
1 .831373 .380392 rgb
f
331.768 396.019 mo
330.526 396.019 li
330.526 343.535 li
331.768 343.535 li
331.768 396.019 li
cp
f
335.632 396.019 mo
334.391 396.019 li
334.391 343.535 li
335.632 343.535 li
335.632 396.019 li
cp
f
338.324 341.847 mo
323.968 341.847 li
323.968 343.592 li
338.324 343.592 li
338.324 341.847 li
cp
1 .913725 .611765 rgb
f
339.565 340.04 mo
322.727 340.04 li
322.727 342.086 li
339.565 342.086 li
339.565 340.04 li
cp
f
338.324 397.087 mo
323.968 397.087 li
323.968 395.343 li
338.324 395.343 li
338.324 397.087 li
cp
f
339.565 398.893 mo
322.727 398.893 li
322.727 396.847 li
339.565 396.847 li
339.565 398.893 li
cp
f
383.426 396.019 mo
395.692 396.019 li
395.692 343.535 li
383.426 343.535 li
383.426 396.019 li
cp
f
392.803 396.019 mo
394.044 396.019 li
394.044 343.535 li
392.803 343.535 li
392.803 396.019 li
cp
1 .831373 .380392 rgb
f
388.938 396.019 mo
390.179 396.019 li
390.179 343.535 li
388.938 343.535 li
388.938 396.019 li
cp
f
385.073 396.019 mo
386.314 396.019 li
386.314 343.535 li
385.073 343.535 li
385.073 396.019 li
cp
f
382.381 341.847 mo
396.737 341.847 li
396.737 343.592 li
382.381 343.592 li
382.381 341.847 li
cp
1 .913725 .611765 rgb
f
381.141 340.04 mo
397.979 340.04 li
397.979 342.086 li
381.141 342.086 li
381.141 340.04 li
cp
f
382.381 397.087 mo
396.737 397.087 li
396.737 395.343 li
382.381 395.343 li
382.381 397.087 li
cp
f
381.141 398.893 mo
397.979 398.893 li
397.979 396.847 li
381.141 396.847 li
381.141 398.893 li
cp
f
363.964 396.019 mo
376.23 396.019 li
376.23 343.535 li
363.964 343.535 li
363.964 396.019 li
cp
f
373.341 396.019 mo
374.582 396.019 li
374.582 343.535 li
373.341 343.535 li
373.341 396.019 li
cp
1 .831373 .380392 rgb
f
369.477 396.019 mo
370.717 396.019 li
370.717 343.535 li
369.477 343.535 li
369.477 396.019 li
cp
f
365.611 396.019 mo
366.852 396.019 li
366.852 343.535 li
365.611 343.535 li
365.611 396.019 li
cp
f
362.919 341.847 mo
377.275 341.847 li
377.275 343.592 li
362.919 343.592 li
362.919 341.847 li
cp
1 .913725 .611765 rgb
f
361.678 340.04 mo
378.516 340.04 li
378.516 342.086 li
361.678 342.086 li
361.678 340.04 li
cp
f
362.919 397.087 mo
377.275 397.087 li
377.275 395.343 li
362.919 395.343 li
362.919 397.087 li
cp
f
361.678 398.893 mo
378.516 398.893 li
378.516 396.847 li
361.678 396.847 li
361.678 398.893 li
cp
f
400.056 403.957 mo
301.187 403.957 li
301.187 398.893 li
400.056 398.893 li
400.056 403.957 li
cp
1 .831373 .380392 rgb
f
400.056 340.04 mo
301.187 340.04 li
301.187 334.976 li
400.056 334.976 li
400.056 340.04 li
cp
1 .913725 .611765 rgb
f
403.17 409.02 mo
298.072 409.02 li
298.072 403.957 li
403.17 403.957 li
403.17 409.02 li
cp
f
343.548 366.064 mo
350.887 366.064 li
350.887 398.169 li
343.548 398.169 li
343.548 366.064 li
cp
.356863 .733333 .909804 rgb
f
344.291 397.425 mo
350.143 397.425 li
350.143 366.81 li
344.291 366.81 li
344.291 397.425 li
cp
351.631 398.913 mo
342.803 398.913 li
342.803 365.32 li
351.631 365.32 li
351.631 398.913 li
cp
.0588235 .6 .85098 rgb
f
358.227 366.064 mo
350.887 366.064 li
350.887 398.169 li
358.227 398.169 li
358.227 366.064 li
cp
.356863 .733333 .909804 rgb
f
351.631 397.425 mo
357.482 397.425 li
357.482 366.81 li
351.631 366.81 li
351.631 397.425 li
cp
358.971 398.913 mo
350.143 398.913 li
350.143 365.32 li
358.971 365.32 li
358.971 398.913 li
cp
.0588235 .6 .85098 rgb
f
350.887 359.922 mo
348.493 359.922 343.548 361.288 343.548 366.064 cv
350.887 366.064 li
358.227 366.064 li
358.227 361.288 353.28 359.922 350.887 359.922 cv
cp
.356863 .733333 .909804 rgb
f
344.342 365.32 mo
357.433 365.32 li
356.917 361.544 352.497 360.667 350.887 360.667 cv
349.276 360.667 344.856 361.544 344.342 365.32 cv
cp
358.971 366.81 mo
342.803 366.81 li
342.803 366.064 li
342.803 361.047 347.762 359.177 350.887 359.177 cv
354.012 359.177 358.971 361.047 358.971 366.064 cv
358.971 366.81 li
cp
.0588235 .6 .85098 rgb
f
349.651 382.962 mo
349.651 383.429 349.273 383.807 348.806 383.807 cv
348.34 383.807 347.961 383.429 347.961 382.962 cv
347.961 382.495 348.34 382.116 348.806 382.116 cv
349.273 382.116 349.651 382.495 349.651 382.962 cv
cp
1 .286275 .168627 rgb
f
352.123 382.962 mo
352.123 383.429 352.501 383.807 352.968 383.807 cv
353.435 383.807 353.813 383.429 353.813 382.962 cv
353.813 382.495 353.435 382.116 352.968 382.116 cv
352.501 382.116 352.123 382.495 352.123 382.962 cv
cp
f
351.281 297.796 mo
350.919 297.606 350.324 297.606 349.961 297.796 cv
298.732 324.465 li
298.37 324.654 298.072 325.144 298.072 325.554 cv
298.072 334.231 li
298.072 334.642 298.407 334.976 298.817 334.976 cv
349.877 334.976 li
350.286 334.976 350.956 334.976 351.366 334.976 cv
402.427 334.976 li
402.835 334.976 403.171 334.642 403.171 334.231 cv
403.171 325.554 li
403.171 325.144 402.874 324.654 402.511 324.465 cv
351.281 297.796 li
cp
1 .913725 .611765 rgb
f
350.621 298.398 mo
350.469 298.398 350.356 298.43 350.306 298.456 cv
299.076 325.125 li
298.96 325.187 298.817 325.422 298.817 325.554 cv
298.817 334.231 li
402.424 334.231 li
402.427 325.554 li
402.427 325.422 402.283 325.187 402.167 325.125 cv
350.938 298.456 li
350.887 298.43 350.773 298.398 350.621 298.398 cv
cp
402.427 334.231 mo
402.427 334.976 li
402.427 334.231 li
402.427 334.231 li
402.427 334.231 li
cp
402.427 335.721 mo
298.817 335.721 li
297.996 335.721 297.327 335.052 297.327 334.231 cv
297.327 325.554 li
297.327 324.872 297.784 324.119 298.389 323.805 cv
349.617 297.136 li
350.178 296.844 351.066 296.844 351.625 297.136 cv
402.854 323.805 li
403.46 324.119 403.915 324.872 403.915 325.554 cv
403.915 334.231 li
403.915 335.052 403.247 335.721 402.427 335.721 cv
cp
1 .831373 .380392 rgb
f
359.71 320.293 mo
359.088 320.293 li
359.088 308.144 li
359.71 308.144 li
359.71 320.293 li
cp
.356863 .733333 .909804 rgb
f
342.55 325.538 mo
341.929 325.538 li
341.929 313.389 li
342.55 313.389 li
342.55 325.538 li
cp
f
362.802 320.007 mo
359.101 307.384 li
359.698 307.209 li
363.398 319.832 li
362.802 320.007 li
cp
f
355.997 320.007 mo
355.4 319.832 li
359.101 307.209 li
359.698 307.384 li
355.997 320.007 li
cp
f
359.399 322.097 mo
361.737 322.097 363.633 320.884 363.633 319.386 cv
355.165 319.386 li
355.165 320.884 357.061 322.097 359.399 322.097 cv
cp
1 .286275 .168627 rgb
f
338.836 325.624 mo
338.24 325.449 li
341.94 312.825 li
342.537 313.001 li
338.836 325.624 li
cp
.356863 .733333 .909804 rgb
f
345.641 325.624 mo
341.94 313.001 li
342.537 312.825 li
346.237 325.449 li
345.641 325.624 li
cp
f
342.238 327.713 mo
339.901 327.713 338.006 326.5 338.006 325.003 cv
346.473 325.003 li
346.473 326.5 344.578 327.713 342.238 327.713 cv
cp
1 .286275 .168627 rgb
f
351.761 325.773 mo
349.449 325.773 li
349.449 310.882 li
351.761 310.882 li
351.761 325.773 li
cp
.356863 .733333 .909804 rgb
f
351.761 325.773 mo
351.761 325.657 351.761 325.557 351.761 325.463 cv
350.605 325.762 li
349.449 325.463 li
349.449 325.557 349.449 325.657 349.449 325.773 cv
349.449 327.951 345.271 330.264 345.271 330.264 cv
345.271 332.487 li
350.605 332.487 li
355.939 332.487 li
355.939 330.264 li
355.939 330.264 351.761 327.951 351.761 325.773 cv
cp
.0588235 .6 .85098 rgb
f
350.649 305.014 mo
347.271 308.385 350.649 309.061 350.649 309.061 cv
350.649 309.061 354.028 308.385 350.649 305.014 cv
cp
.356863 .733333 .909804 rgb
f
360.403 307.423 mo
360.405 307.414 360.407 307.407 360.408 307.398 cv
360.494 307.075 360.47 306.721 360.306 306.4 cv
359.952 305.71 359.104 305.438 358.414 305.791 cv
357.725 306.146 357.451 306.992 357.806 307.681 cv
357.878 307.824 357.976 307.941 358.083 308.047 cv
357.096 308.521 355.529 308.521 353.877 307.854 cv
351.421 306.865 351.299 308.576 351.299 308.576 cv
351.021 310.468 li
352.643 309.636 355.412 310.763 357.79 309.882 cv
359.324 309.313 360.199 308.441 360.385 307.491 cv
360.393 307.469 360.397 307.445 360.403 307.423 cv
cp
.0588235 .6 .85098 rgb
f
341.432 313.918 mo
341.426 313.912 341.419 313.907 341.412 313.901 cv
341.146 313.699 340.949 313.404 340.882 313.049 cv
340.739 312.287 341.24 311.553 342.003 311.409 cv
342.766 311.268 343.5 311.769 343.644 312.531 cv
343.673 312.686 343.668 312.839 343.646 312.989 cv
344.717 312.759 345.955 311.797 346.853 310.26 cv
348.188 307.973 349.332 309.251 349.332 309.251 cv
350.712 310.574 li
348.921 310.91 347.422 313.497 345.003 314.259 cv
343.442 314.75 342.219 314.598 341.488 313.959 cv
341.469 313.947 341.45 313.932 341.432 313.918 cv
cp
f
352.428 309.535 mo
352.59 310.528 351.916 311.465 350.922 311.626 cv
349.929 311.789 348.991 311.115 348.829 310.122 cv
348.668 309.128 349.342 308.191 350.336 308.029 cv
351.329 307.867 352.267 308.541 352.428 309.535 cv
cp
f
352.473 325.773 mo
352.473 326.779 351.656 327.597 350.649 327.597 cv
349.643 327.597 348.827 326.779 348.827 325.773 cv
348.827 324.768 349.643 323.952 350.649 323.952 cv
351.656 323.952 352.473 324.768 352.473 325.773 cv
cp
f
248.249 406.983 mo
143.881 406.983 li
143.881 335.809 li
248.249 335.809 li
248.249 406.983 li
cp
.356863 .733333 .909804 rgb
f
251.168 381.681 mo
140.758 381.681 li
140.758 352.591 li
251.168 352.591 li
251.168 381.681 li
cp
.8 1 1 rgb
f
141.502 380.936 mo
250.423 380.936 li
250.423 353.335 li
141.502 353.335 li
141.502 380.936 li
cp
251.912 382.424 mo
140.013 382.424 li
140.013 351.847 li
251.912 351.847 li
251.912 382.424 li
cp
.498039 .309804 .254902 rgb
f
251.168 367.88 mo
140.758 367.88 li
140.758 366.392 li
251.168 366.392 li
251.168 367.88 li
cp
f
154.325 381.681 mo
152.837 381.681 li
152.837 352.591 li
154.325 352.591 li
154.325 381.681 li
cp
f
168.512 381.681 mo
167.022 381.681 li
167.022 352.591 li
168.512 352.591 li
168.512 381.681 li
cp
f
182.696 381.681 mo
181.208 381.681 li
181.208 352.591 li
182.696 352.591 li
182.696 381.681 li
cp
f
196.882 381.681 mo
195.394 381.681 li
195.394 352.591 li
196.882 352.591 li
196.882 381.681 li
cp
f
211.068 381.681 mo
209.579 381.681 li
209.579 352.591 li
211.068 352.591 li
211.068 381.681 li
cp
f
225.253 381.681 mo
223.765 381.681 li
223.765 352.591 li
225.253 352.591 li
225.253 381.681 li
cp
f
239.439 381.681 mo
237.95 381.681 li
237.95 352.591 li
239.439 352.591 li
239.439 381.681 li
cp
f
245.414 396.226 mo
146.717 396.226 li
146.717 409.02 li
245.414 409.02 li
245.414 396.226 li
cp
.0588235 .6 .85098 rgb
f
140.758 393.487 mo
140.758 408.199 li
182.588 408.199 li
167.767 393.487 li
140.758 393.487 li
cp
.8 1 1 rgb
f
141.502 407.455 mo
180.781 407.455 li
167.46 394.231 li
141.502 394.231 li
141.502 407.455 li
cp
184.395 408.944 mo
140.013 408.944 li
140.013 392.742 li
168.073 392.742 li
184.395 408.944 li
cp
.498039 .309804 .254902 rgb
f
153.581 393.487 mo
153.581 408.199 li
153.581 393.487 li
cp
.8 1 1 rgb
f
154.325 408.199 mo
152.837 408.199 li
152.837 393.487 li
154.325 393.487 li
154.325 408.199 li
cp
.498039 .309804 .254902 rgb
f
167.767 393.487 mo
167.767 408.199 li
167.767 393.487 li
cp
.8 1 1 rgb
f
168.512 408.199 mo
167.022 408.199 li
167.022 393.487 li
168.512 393.487 li
168.512 408.199 li
cp
.498039 .309804 .254902 rgb
f
251.518 393.487 mo
251.518 408.199 li
209.688 408.199 li
224.508 393.487 li
251.518 393.487 li
cp
.8 1 1 rgb
f
211.494 407.455 mo
250.773 407.455 li
250.773 394.231 li
224.815 394.231 li
211.494 407.455 li
cp
252.263 408.944 mo
207.881 408.944 li
224.201 392.742 li
252.263 392.742 li
252.263 408.944 li
cp
.498039 .309804 .254902 rgb
f
238.695 393.487 mo
238.695 408.199 li
238.695 393.487 li
cp
.8 1 1 rgb
f
239.439 408.199 mo
237.95 408.199 li
237.95 393.487 li
239.439 393.487 li
239.439 408.199 li
cp
.498039 .309804 .254902 rgb
f
224.508 393.487 mo
224.508 408.199 li
224.508 393.487 li
cp
.8 1 1 rgb
f
225.253 408.199 mo
223.765 408.199 li
223.765 393.487 li
225.253 393.487 li
225.253 408.199 li
cp
.498039 .309804 .254902 rgb
f
140.375 331.193 mo
195.962 331.193 li
195.962 337.906 li
140.375 337.906 li
140.375 331.193 li
cp
f
251.55 331.193 mo
195.962 331.193 li
195.962 337.906 li
251.55 337.906 li
251.55 331.193 li
cp
f
266.101 315.259 mo
261.536 315.259 li
261.536 304.331 li
266.101 304.331 li
266.101 315.259 li
cp
f
241.492 315.054 mo
235.189 315.054 li
235.189 306.901 li
241.492 306.901 li
241.492 315.054 li
cp
f
239.151 310.977 mo
238.113 310.977 li
238.113 297.235 li
239.151 297.235 li
239.151 310.977 li
cp
f
270.867 314.484 mo
255.997 314.484 li
255.997 309.677 li
270.867 309.677 li
270.867 314.484 li
cp
.0588235 .6 .85098 rgb
f
244.738 315.054 mo
229.868 315.054 li
229.868 311.036 li
244.738 311.036 li
244.738 315.054 li
cp
f
275.365 409.02 mo
224.024 409.02 li
224.024 313.6 li
275.365 313.6 li
275.365 409.02 li
cp
1 .286275 .168627 rgb
f
240.184 339.847 mo
229.484 339.847 li
229.484 321.98 li
240.184 321.98 li
240.184 339.847 li
cp
.8 1 1 rgb
f
230.229 339.102 mo
239.439 339.102 li
239.439 322.724 li
230.229 322.724 li
230.229 339.102 li
cp
240.929 340.591 mo
228.739 340.591 li
228.739 321.235 li
240.929 321.235 li
240.929 340.591 li
cp
.498039 .309804 .254902 rgb
f
255.045 339.847 mo
244.347 339.847 li
244.347 321.98 li
255.045 321.98 li
255.045 339.847 li
cp
.8 1 1 rgb
f
245.092 339.102 mo
254.301 339.102 li
254.301 322.724 li
245.092 322.724 li
245.092 339.102 li
cp
255.789 340.591 mo
243.603 340.591 li
243.603 321.235 li
255.789 321.235 li
255.789 340.591 li
cp
.498039 .309804 .254902 rgb
f
269.906 339.847 mo
259.207 339.847 li
259.207 321.98 li
269.906 321.98 li
269.906 339.847 li
cp
.8 1 1 rgb
f
259.95 339.102 mo
269.162 339.102 li
269.162 322.724 li
259.95 322.724 li
259.95 339.102 li
cp
270.651 340.591 mo
258.462 340.591 li
258.462 321.235 li
270.651 321.235 li
270.651 340.591 li
cp
.498039 .309804 .254902 rgb
f
240.184 361.078 mo
229.484 361.078 li
229.484 343.212 li
240.184 343.212 li
240.184 361.078 li
cp
.8 1 1 rgb
f
230.229 360.334 mo
239.439 360.334 li
239.439 343.955 li
230.229 343.955 li
230.229 360.334 li
cp
240.929 361.823 mo
228.739 361.823 li
228.739 342.467 li
240.929 342.467 li
240.929 361.823 li
cp
.498039 .309804 .254902 rgb
f
255.045 361.078 mo
244.347 361.078 li
244.347 343.212 li
255.045 343.212 li
255.045 361.078 li
cp
.8 1 1 rgb
f
245.092 360.334 mo
254.301 360.334 li
254.301 343.955 li
245.092 343.955 li
245.092 360.334 li
cp
255.789 361.823 mo
243.603 361.823 li
243.603 342.467 li
255.789 342.467 li
255.789 361.823 li
cp
.498039 .309804 .254902 rgb
f
269.906 361.078 mo
259.207 361.078 li
259.207 343.212 li
269.906 343.212 li
269.906 361.078 li
cp
.8 1 1 rgb
f
259.95 360.334 mo
269.162 360.334 li
269.162 343.955 li
259.95 343.955 li
259.95 360.334 li
cp
270.651 361.823 mo
258.462 361.823 li
258.462 342.467 li
270.651 342.467 li
270.651 361.823 li
cp
.498039 .309804 .254902 rgb
f
240.184 382.31 mo
229.484 382.31 li
229.484 364.442 li
240.184 364.442 li
240.184 382.31 li
cp
.8 1 1 rgb
f
230.229 381.564 mo
239.439 381.564 li
239.439 365.187 li
230.229 365.187 li
230.229 381.564 li
cp
240.929 383.055 mo
228.739 383.055 li
228.739 363.698 li
240.929 363.698 li
240.929 383.055 li
cp
.498039 .309804 .254902 rgb
f
255.045 382.31 mo
244.347 382.31 li
244.347 364.442 li
255.045 364.442 li
255.045 382.31 li
cp
.8 1 1 rgb
f
245.092 381.564 mo
254.301 381.564 li
254.301 365.187 li
245.092 365.187 li
245.092 381.564 li
cp
255.789 383.055 mo
243.603 383.055 li
243.603 363.698 li
255.789 363.698 li
255.789 383.055 li
cp
.498039 .309804 .254902 rgb
f
269.906 382.31 mo
259.207 382.31 li
259.207 364.442 li
269.906 364.442 li
269.906 382.31 li
cp
.8 1 1 rgb
f
259.95 381.564 mo
269.162 381.564 li
269.162 365.187 li
259.95 365.187 li
259.95 381.564 li
cp
270.651 383.055 mo
258.462 383.055 li
258.462 363.698 li
270.651 363.698 li
270.651 383.055 li
cp
.498039 .309804 .254902 rgb
f
240.184 403.541 mo
229.484 403.541 li
229.484 385.673 li
240.184 385.673 li
240.184 403.541 li
cp
.8 1 1 rgb
f
230.229 402.796 mo
239.439 402.796 li
239.439 386.417 li
230.229 386.417 li
230.229 402.796 li
cp
240.929 404.285 mo
228.739 404.285 li
228.739 384.928 li
240.929 384.928 li
240.929 404.285 li
cp
.498039 .309804 .254902 rgb
f
255.045 403.541 mo
244.347 403.541 li
244.347 385.673 li
255.045 385.673 li
255.045 403.541 li
cp
.8 1 1 rgb
f
245.092 402.796 mo
254.301 402.796 li
254.301 386.417 li
245.092 386.417 li
245.092 402.796 li
cp
255.789 404.285 mo
243.603 404.285 li
243.603 384.928 li
255.789 384.928 li
255.789 404.285 li
cp
.498039 .309804 .254902 rgb
f
269.906 403.541 mo
259.207 403.541 li
259.207 385.673 li
269.906 385.673 li
269.906 403.541 li
cp
.8 1 1 rgb
f
259.95 402.796 mo
269.162 402.796 li
269.162 386.417 li
259.95 386.417 li
259.95 402.796 li
cp
270.651 404.285 mo
258.462 404.285 li
258.462 384.928 li
270.651 384.928 li
270.651 404.285 li
cp
.498039 .309804 .254902 rgb
f
240.184 331.657 mo
229.485 331.657 li
229.485 330.169 li
240.184 330.169 li
240.184 331.657 li
cp
f
255.044 331.657 mo
244.345 331.657 li
244.345 330.169 li
255.044 330.169 li
255.044 331.657 li
cp
f
269.903 331.657 mo
259.205 331.657 li
259.205 330.169 li
269.903 330.169 li
269.903 331.657 li
cp
f
240.184 352.889 mo
229.485 352.889 li
229.485 351.4 li
240.184 351.4 li
240.184 352.889 li
cp
f
255.044 352.889 mo
244.345 352.889 li
244.345 351.4 li
255.044 351.4 li
255.044 352.889 li
cp
f
269.903 352.889 mo
259.205 352.889 li
259.205 351.4 li
269.903 351.4 li
269.903 352.889 li
cp
f
240.184 374.121 mo
229.485 374.121 li
229.485 372.632 li
240.184 372.632 li
240.184 374.121 li
cp
f
255.044 374.121 mo
244.345 374.121 li
244.345 372.632 li
255.044 372.632 li
255.044 374.121 li
cp
f
269.903 374.121 mo
259.205 374.121 li
259.205 372.632 li
269.903 372.632 li
269.903 374.121 li
cp
f
240.184 395.352 mo
229.485 395.352 li
229.485 393.863 li
240.184 393.863 li
240.184 395.352 li
cp
f
255.044 395.352 mo
244.345 395.352 li
244.345 393.863 li
255.044 393.863 li
255.044 395.352 li
cp
f
269.903 395.352 mo
259.205 395.352 li
259.205 393.863 li
269.903 393.863 li
269.903 395.352 li
cp
f
249.627 264.925 mo
187.299 264.925 li
187.299 208.683 li
249.627 208.683 li
249.627 264.925 li
cp
.380392 .231373 .192157 rgb
f
254.329 209.325 mo
245.542 181.046 li
146.143 181.046 li
146.143 209.325 li
254.329 209.325 li
cp
1 .286275 .168627 rgb
f
131.514 209.325 mo
140.302 181.046 li
239.702 181.046 li
239.702 209.325 li
131.514 209.325 li
cp
f
187.299 264.925 mo
135.252 264.925 li
135.252 208.683 li
187.299 208.683 li
187.299 264.925 li
cp
.498039 .309804 .254902 rgb
f
161.275 183.493 mo
135.252 208.683 li
161.275 208.683 li
187.298 208.683 li
161.275 183.493 li
cp
f
133.822 211.601 mo
131.586 209.226 li
161.275 181.046 li
162.395 184.681 li
133.822 211.601 li
cp
1 .913725 .611765 rgb
f
188.728 211.601 mo
160.156 184.681 li
161.275 181.046 li
190.965 209.226 li
188.728 211.601 li
cp
f
169.798 264.184 mo
152.44 264.184 li
152.44 235.926 li
169.798 235.926 li
169.798 264.184 li
cp
1 .286275 .168627 rgb
f
153.184 263.439 mo
169.054 263.439 li
169.054 236.669 li
153.184 236.669 li
153.184 263.439 li
cp
170.543 264.928 mo
151.695 264.928 li
151.695 235.181 li
170.543 235.181 li
170.543 264.928 li
cp
.356863 .733333 .909804 rgb
f
161.118 227.47 mo
158.09 227.47 152.44 228.915 152.44 235.926 cv
161.118 235.926 li
169.798 235.926 li
169.798 228.915 164.148 227.47 161.118 227.47 cv
cp
1 .913725 .611765 rgb
f
153.208 235.181 mo
169.03 235.181 li
168.598 228.562 162.397 228.215 161.118 228.215 cv
159.84 228.215 153.641 228.562 153.208 235.181 cv
cp
170.543 236.669 mo
151.695 236.669 li
151.695 235.926 li
151.695 229.135 156.771 226.727 161.118 226.727 cv
165.467 226.727 170.543 229.135 170.543 235.926 cv
170.543 236.669 li
cp
.356863 .733333 .909804 rgb
f
161.118 198.852 mo
158.626 198.852 153.977 200.041 153.977 205.811 cv
161.118 205.811 li
168.262 205.811 li
168.262 200.041 163.611 198.852 161.118 198.852 cv
cp
1 .913725 .611765 rgb
f
154.75 205.065 mo
167.488 205.065 li
167.06 199.87 162.141 199.597 161.118 199.597 cv
160.098 199.597 155.178 199.87 154.75 205.065 cv
cp
169.007 206.555 mo
153.231 206.555 li
153.231 205.811 li
153.231 200.124 157.479 198.106 161.118 198.106 cv
164.757 198.106 169.007 200.124 169.007 205.811 cv
169.007 206.555 li
cp
.356863 .733333 .909804 rgb
f
161.863 235.926 mo
160.374 235.926 li
160.374 227.47 li
161.863 227.47 li
161.863 235.926 li
cp
f
160.592 236.451 mo
154.613 230.473 li
155.666 229.419 li
161.646 235.399 li
160.592 236.451 li
cp
f
161.863 264.184 mo
160.374 264.184 li
160.374 235.617 li
166.572 229.419 li
167.624 230.473 li
161.863 236.233 li
161.863 264.184 li
cp
f
159.617 250.055 mo
159.617 250.653 159.132 251.139 158.531 251.139 cv
157.932 251.139 157.447 250.653 157.447 250.055 cv
157.447 249.455 157.932 248.969 158.531 248.969 cv
159.132 248.969 159.617 249.455 159.617 250.055 cv
cp
1 .913725 .611765 rgb
f
162.621 250.055 mo
162.621 250.653 163.106 251.139 163.707 251.139 cv
164.306 251.139 164.791 250.653 164.791 250.055 cv
164.791 249.455 164.306 248.969 163.707 248.969 cv
163.106 248.969 162.621 249.455 162.621 250.055 cv
cp
f
168.262 216.124 mo
153.977 216.124 li
153.977 205.811 li
168.262 205.811 li
168.262 216.124 li
cp
f
154.72 215.379 mo
167.518 215.379 li
167.518 206.555 li
154.72 206.555 li
154.72 215.379 li
cp
169.007 216.868 mo
153.231 216.868 li
153.231 205.065 li
169.007 205.065 li
169.007 216.868 li
cp
.356863 .733333 .909804 rgb
f
161.863 216.124 mo
160.374 216.124 li
160.374 205.811 li
161.863 205.811 li
161.863 216.124 li
cp
f
152.44 218.298 mo
161.275 218.298 li
161.275 215.308 li
152.44 215.308 li
152.44 218.298 li
cp
1 .286275 .168627 rgb
f
170.11 218.298 mo
161.275 218.298 li
161.275 215.308 li
170.11 215.308 li
170.11 218.298 li
cp
f
249.627 269.276 mo
135.252 269.276 li
135.252 264.925 li
249.627 264.925 li
249.627 269.276 li
cp
1 .831373 .380392 rgb
f
238.214 248.896 mo
198.713 248.896 li
198.713 224.751 li
238.214 224.751 li
238.214 248.896 li
cp
1 .913725 .611765 rgb
f
199.458 248.151 mo
237.469 248.151 li
237.469 225.496 li
199.458 225.496 li
199.458 248.151 li
cp
238.957 249.64 mo
197.97 249.64 li
197.97 224.007 li
238.957 224.007 li
238.957 249.64 li
cp
.356863 .733333 .909804 rgb
f
209.422 248.896 mo
207.934 248.896 li
207.934 224.751 li
209.422 224.751 li
209.422 248.896 li
cp
f
219.207 248.857 mo
217.719 248.857 li
217.719 224.712 li
219.207 224.712 li
219.207 248.857 li
cp
f
228.993 248.857 mo
227.505 248.857 li
227.505 224.712 li
228.993 224.712 li
228.993 248.857 li
cp
f
238.214 237.568 mo
198.713 237.568 li
198.713 236.078 li
238.214 236.078 li
238.214 237.568 li
cp
f
223.116 195.186 mo
212.51 195.186 li
212.51 175.556 li
223.116 175.556 li
223.116 195.186 li
cp
.498039 .309804 .254902 rgb
f
225.155 176.591 mo
210.471 176.591 li
210.471 173.108 li
225.155 173.108 li
225.155 176.591 li
cp
.380392 .231373 .192157 rgb
f
62.9316 317.886 mo
59.9858 317.751 61.9717 310.55 55.5396 312.02 cv
49.2339 313.963 54.5542 319.206 52.0703 320.796 cv
50.0176 322.11 50.4053 325.244 50.4053 325.244 cv
50.4053 325.244 53.2056 327.048 59.5737 325.342 cv
66.3374 323.53 66.5981 320.905 66.5981 320.905 cv
66.5981 320.905 65.3672 317.998 62.9316 317.886 cv
cp
1 .831373 .380392 rgb
f
35.917 404.642 mo
0 404.642 li
0 346.22 li
35.917 346.22 li
35.917 404.642 li
cp
.901961 .101961 0 rgb
f
79.6821 404.642 mo
115.599 404.642 li
115.599 346.22 li
79.6821 346.22 li
79.6821 404.642 li
cp
f
82.6597 327.157 mo
32.9395 327.157 li
32.9395 404.642 li
82.6597 404.642 li
82.6597 327.157 li
cp
1 .286275 .168627 rgb
f
14.1807 364.532 mo
6.48291 364.532 li
6.48291 351.612 li
14.1807 351.612 li
14.1807 364.532 li
cp
.8 1 1 rgb
f
7.22705 363.788 mo
13.4355 363.788 li
13.4355 352.356 li
7.22705 352.356 li
7.22705 363.788 li
cp
14.9248 365.276 mo
5.73828 365.276 li
5.73828 350.868 li
14.9248 350.868 li
14.9248 365.276 li
cp
.498039 .309804 .254902 rgb
f
28.3247 364.532 mo
20.627 364.532 li
20.627 351.612 li
28.3247 351.612 li
28.3247 364.532 li
cp
.8 1 1 rgb
f
21.3721 363.788 mo
27.5806 363.788 li
27.5806 352.356 li
21.3721 352.356 li
21.3721 363.788 li
cp
29.0693 365.276 mo
19.8828 365.276 li
19.8828 350.868 li
29.0693 350.868 li
29.0693 365.276 li
cp
.498039 .309804 .254902 rgb
f
14.1807 381.464 mo
6.48291 381.464 li
6.48291 368.543 li
14.1807 368.543 li
14.1807 381.464 li
cp
.8 1 1 rgb
f
7.22705 380.72 mo
13.4355 380.72 li
13.4355 369.287 li
7.22705 369.287 li
7.22705 380.72 li
cp
14.9248 382.209 mo
5.73828 382.209 li
5.73828 367.799 li
14.9248 367.799 li
14.9248 382.209 li
cp
.498039 .309804 .254902 rgb
f
28.3247 381.464 mo
20.627 381.464 li
20.627 368.543 li
28.3247 368.543 li
28.3247 381.464 li
cp
.8 1 1 rgb
f
21.3721 380.72 mo
27.5806 380.72 li
27.5806 369.287 li
21.3721 369.287 li
21.3721 380.72 li
cp
29.0693 382.209 mo
19.8828 382.209 li
19.8828 367.799 li
29.0693 367.799 li
29.0693 382.209 li
cp
.498039 .309804 .254902 rgb
f
14.1807 398.395 mo
6.48291 398.395 li
6.48291 385.474 li
14.1807 385.474 li
14.1807 398.395 li
cp
.8 1 1 rgb
f
7.22705 397.65 mo
13.4355 397.65 li
13.4355 386.219 li
7.22705 386.219 li
7.22705 397.65 li
cp
14.9248 399.14 mo
5.73828 399.14 li
5.73828 384.73 li
14.9248 384.73 li
14.9248 399.14 li
cp
.498039 .309804 .254902 rgb
f
28.3247 398.395 mo
20.627 398.395 li
20.627 385.474 li
28.3247 385.474 li
28.3247 398.395 li
cp
.8 1 1 rgb
f
21.3721 397.65 mo
27.5806 397.65 li
27.5806 386.219 li
21.3721 386.219 li
21.3721 397.65 li
cp
29.0693 399.14 mo
19.8828 399.14 li
19.8828 384.73 li
29.0693 384.73 li
29.0693 399.14 li
cp
.498039 .309804 .254902 rgb
f
101.418 364.532 mo
109.116 364.532 li
109.116 351.612 li
101.418 351.612 li
101.418 364.532 li
cp
.8 1 1 rgb
f
102.164 363.788 mo
108.372 363.788 li
108.372 352.356 li
102.164 352.356 li
102.164 363.788 li
cp
109.861 365.276 mo
100.674 365.276 li
100.674 350.868 li
109.861 350.868 li
109.861 365.276 li
cp
.498039 .309804 .254902 rgb
f
87.2744 364.532 mo
94.9722 364.532 li
94.9722 351.612 li
87.2744 351.612 li
87.2744 364.532 li
cp
.8 1 1 rgb
f
88.0186 363.788 mo
94.2271 363.788 li
94.2271 352.356 li
88.0186 352.356 li
88.0186 363.788 li
cp
95.7163 365.276 mo
86.5298 365.276 li
86.5298 350.868 li
95.7163 350.868 li
95.7163 365.276 li
cp
.498039 .309804 .254902 rgb
f
101.418 381.464 mo
109.116 381.464 li
109.116 368.543 li
101.418 368.543 li
101.418 381.464 li
cp
.8 1 1 rgb
f
102.164 380.72 mo
108.372 380.72 li
108.372 369.287 li
102.164 369.287 li
102.164 380.72 li
cp
109.861 382.209 mo
100.674 382.209 li
100.674 367.799 li
109.861 367.799 li
109.861 382.209 li
cp
.498039 .309804 .254902 rgb
f
87.2744 381.464 mo
94.9722 381.464 li
94.9722 368.543 li
87.2744 368.543 li
87.2744 381.464 li
cp
.8 1 1 rgb
f
88.0186 380.72 mo
94.2271 380.72 li
94.2271 369.287 li
88.0186 369.287 li
88.0186 380.72 li
cp
95.7163 382.209 mo
86.5298 382.209 li
86.5298 367.799 li
95.7163 367.799 li
95.7163 382.209 li
cp
.498039 .309804 .254902 rgb
f
101.418 398.395 mo
109.116 398.395 li
109.116 385.474 li
101.418 385.474 li
101.418 398.395 li
cp
.8 1 1 rgb
f
102.164 397.65 mo
108.372 397.65 li
108.372 386.219 li
102.164 386.219 li
102.164 397.65 li
cp
109.861 399.14 mo
100.674 399.14 li
100.674 384.73 li
109.861 384.73 li
109.861 399.14 li
cp
.498039 .309804 .254902 rgb
f
87.2744 398.395 mo
94.9722 398.395 li
94.9722 385.474 li
87.2744 385.474 li
87.2744 398.395 li
cp
.8 1 1 rgb
f
88.0186 397.65 mo
94.2271 397.65 li
94.2271 386.219 li
88.0186 386.219 li
88.0186 397.65 li
cp
95.7163 399.14 mo
86.5298 399.14 li
86.5298 384.73 li
95.7163 384.73 li
95.7163 399.14 li
cp
.498039 .309804 .254902 rgb
f
70.8218 364.532 mo
78.5195 364.532 li
78.5195 351.612 li
70.8218 351.612 li
70.8218 364.532 li
cp
.8 1 1 rgb
f
71.5659 363.788 mo
77.7749 363.788 li
77.7749 352.356 li
71.5659 352.356 li
71.5659 363.788 li
cp
79.2637 365.276 mo
70.0771 365.276 li
70.0771 350.868 li
79.2637 350.868 li
79.2637 365.276 li
cp
.498039 .309804 .254902 rgb
f
70.8218 381.464 mo
78.5195 381.464 li
78.5195 368.543 li
70.8218 368.543 li
70.8218 381.464 li
cp
.8 1 1 rgb
f
71.5659 380.72 mo
77.7749 380.72 li
77.7749 369.287 li
71.5659 369.287 li
71.5659 380.72 li
cp
79.2637 382.209 mo
70.0771 382.209 li
70.0771 367.799 li
79.2637 367.799 li
79.2637 382.209 li
cp
.498039 .309804 .254902 rgb
f
70.8218 398.395 mo
78.5195 398.395 li
78.5195 385.474 li
70.8218 385.474 li
70.8218 398.395 li
cp
.8 1 1 rgb
f
71.5659 397.65 mo
77.7749 397.65 li
77.7749 386.219 li
71.5659 386.219 li
71.5659 397.65 li
cp
79.2637 399.14 mo
70.0771 399.14 li
70.0771 384.73 li
79.2637 384.73 li
79.2637 399.14 li
cp
.498039 .309804 .254902 rgb
f
44.7773 364.532 mo
37.0796 364.532 li
37.0796 351.612 li
44.7773 351.612 li
44.7773 364.532 li
cp
.8 1 1 rgb
f
37.8242 363.788 mo
44.0327 363.788 li
44.0327 352.356 li
37.8242 352.356 li
37.8242 363.788 li
cp
45.522 365.276 mo
36.3354 365.276 li
36.3354 350.868 li
45.522 350.868 li
45.522 365.276 li
cp
.498039 .309804 .254902 rgb
f
65.1289 371.188 mo
50.3037 371.188 li
50.3037 357.607 li
65.1289 357.607 li
65.1289 371.188 li
cp
.8 1 1 rgb
f
51.0479 370.442 mo
64.3848 370.442 li
64.3848 358.353 li
51.0479 358.353 li
51.0479 370.442 li
cp
65.8735 371.932 mo
49.5591 371.932 li
49.5591 356.863 li
65.8735 356.863 li
65.8735 371.932 li
cp
.498039 .309804 .254902 rgb
f
44.7773 381.464 mo
37.0796 381.464 li
37.0796 368.543 li
44.7773 368.543 li
44.7773 381.464 li
cp
.8 1 1 rgb
f
37.8242 380.72 mo
44.0327 380.72 li
44.0327 369.287 li
37.8242 369.287 li
37.8242 380.72 li
cp
45.522 382.209 mo
36.3354 382.209 li
36.3354 367.799 li
45.522 367.799 li
45.522 382.209 li
cp
.498039 .309804 .254902 rgb
f
71.0391 347.601 mo
78.7368 347.601 li
78.7368 334.681 li
71.0391 334.681 li
71.0391 347.601 li
cp
.8 1 1 rgb
f
71.7832 346.856 mo
77.9922 346.856 li
77.9922 335.425 li
71.7832 335.425 li
71.7832 346.856 li
cp
79.481 348.345 mo
70.2949 348.345 li
70.2949 333.936 li
79.481 333.936 li
79.481 348.345 li
cp
.498039 .309804 .254902 rgb
f
44.9946 347.601 mo
37.2974 347.601 li
37.2974 334.681 li
44.9946 334.681 li
44.9946 347.601 li
cp
.8 1 1 rgb
f
38.0415 346.856 mo
44.25 346.856 li
44.25 335.425 li
38.0415 335.425 li
38.0415 346.856 li
cp
45.7393 348.345 mo
36.5527 348.345 li
36.5527 333.936 li
45.7393 333.936 li
45.7393 348.345 li
cp
.498039 .309804 .254902 rgb
f
44.7773 398.395 mo
37.0796 398.395 li
37.0796 385.474 li
44.7773 385.474 li
44.7773 398.395 li
cp
.8 1 1 rgb
f
37.8242 397.65 mo
44.0327 397.65 li
44.0327 386.219 li
37.8242 386.219 li
37.8242 397.65 li
cp
45.522 399.14 mo
36.3354 399.14 li
36.3354 384.73 li
45.522 384.73 li
45.522 399.14 li
cp
.498039 .309804 .254902 rgb
f
65.8184 404.18 mo
49.7813 404.18 li
49.7813 377.67 li
65.8184 377.67 li
65.8184 404.18 li
cp
1 .913725 .611765 rgb
f
50.5254 403.437 mo
65.0737 403.437 li
65.0737 378.415 li
50.5254 378.415 li
50.5254 403.437 li
cp
66.563 404.925 mo
49.0366 404.925 li
49.0366 376.927 li
66.563 376.927 li
66.563 404.925 li
cp
.498039 .309804 .254902 rgb
f
57.7998 377.67 mo
57.7998 404.68 li
57.7998 377.67 li
cp
1 .913725 .611765 rgb
f
58.5439 404.68 mo
57.0552 404.68 li
57.0552 377.67 li
58.5439 377.67 li
58.5439 404.68 li
cp
.498039 .309804 .254902 rgb
f
65.8184 385.063 mo
49.7813 385.063 li
65.8184 385.063 li
cp
1 .913725 .611765 rgb
f
65.8184 385.808 mo
49.7813 385.808 li
49.7813 384.318 li
65.8184 384.318 li
65.8184 385.808 li
cp
.498039 .309804 .254902 rgb
f
62.1362 393.857 mo
62.1362 394.498 61.6172 395.017 60.9775 395.017 cv
60.3374 395.017 59.8184 394.498 59.8184 393.857 cv
59.8184 393.218 60.3374 392.699 60.9775 392.699 cv
61.6172 392.699 62.1362 393.218 62.1362 393.857 cv
cp
f
53.4629 393.857 mo
53.4629 394.498 53.9819 395.017 54.6216 395.017 cv
55.2617 395.017 55.7803 394.498 55.7803 393.857 cv
55.7803 393.218 55.2617 392.699 54.6216 392.699 cv
53.9819 392.699 53.4629 393.218 53.4629 393.857 cv
cp
f
65.7197 341.989 mo
65.7197 346.363 62.1733 349.91 57.7993 349.91 cv
53.4253 349.91 49.8789 346.363 49.8789 341.989 cv
49.8789 337.615 53.4253 334.068 57.7993 334.068 cv
62.1733 334.068 65.7197 337.615 65.7197 341.989 cv
cp
1 .831373 .380392 rgb
f
58.4868 335.075 mo
58.4868 335.455 58.1792 335.763 57.7993 335.763 cv
57.4199 335.763 57.1113 335.455 57.1113 335.075 cv
57.1113 334.695 57.4199 334.388 57.7993 334.388 cv
58.1792 334.388 58.4868 334.695 58.4868 335.075 cv
cp
.498039 .309804 .254902 rgb
f
50.8848 341.302 mo
51.2646 341.302 51.5723 341.61 51.5723 341.989 cv
51.5723 342.37 51.2646 342.678 50.8848 342.678 cv
50.5049 342.678 50.1973 342.37 50.1973 341.989 cv
50.1973 341.61 50.5049 341.302 50.8848 341.302 cv
cp
f
57.1118 348.903 mo
57.1118 348.524 57.4199 348.217 57.7993 348.217 cv
58.1792 348.217 58.4873 348.524 58.4873 348.903 cv
58.4873 349.283 58.1792 349.592 57.7993 349.592 cv
57.4199 349.592 57.1118 349.283 57.1118 348.903 cv
cp
f
64.7134 342.678 mo
64.334 342.678 64.0259 342.369 64.0259 341.989 cv
64.0259 341.609 64.334 341.301 64.7134 341.301 cv
65.0933 341.301 65.4014 341.609 65.4014 341.989 cv
65.4014 342.369 65.0933 342.678 64.7134 342.678 cv
cp
f
53.2021 336.809 mo
53.3633 336.97 53.3633 337.231 53.2021 337.392 cv
53.0405 337.554 52.7793 337.554 52.6187 337.392 cv
52.4565 337.23 52.457 336.969 52.6187 336.809 cv
52.7793 336.648 53.0405 336.647 53.2021 336.809 cv
cp
f
52.6187 346.587 mo
52.7793 346.427 53.0405 346.427 53.2021 346.587 cv
53.3633 346.748 53.3633 347.01 53.2021 347.171 cv
53.041 347.333 52.7798 347.333 52.6187 347.171 cv
52.457 347.01 52.457 346.748 52.6187 346.587 cv
cp
f
62.3965 347.171 mo
62.2354 347.01 62.2358 346.747 62.3965 346.587 cv
62.5576 346.426 62.8188 346.426 62.9805 346.586 cv
63.1421 346.747 63.1416 347.01 62.9805 347.171 cv
62.8193 347.332 62.5581 347.332 62.3965 347.171 cv
cp
f
62.9805 337.392 mo
62.8188 337.554 62.5576 337.554 62.3965 337.392 cv
62.2349 337.23 62.2349 336.969 62.396 336.809 cv
62.5576 336.647 62.8184 336.647 62.9805 336.809 cv
63.1416 336.969 63.1411 337.23 62.9805 337.392 cv
cp
f
58.2207 339.748 mo
58.2207 341.548 58.0293 343.01 57.7925 343.01 cv
57.5562 343.01 57.3643 341.548 57.3643 339.748 cv
57.3643 337.947 57.5562 336.486 57.7925 336.486 cv
58.0293 336.486 58.2207 337.947 58.2207 339.748 cv
cp
f
59.7651 341.306 mo
58.8188 342.319 57.9429 343.08 57.8096 343.004 cv
57.6763 342.927 58.3369 342.041 59.2827 341.027 cv
60.2295 340.014 61.105 339.253 61.2383 339.33 cv
61.3716 339.407 60.7114 340.292 59.7651 341.306 cv
cp
f
115.599 409.02 mo
0 409.02 li
0 404.642 li
115.599 404.642 li
115.599 409.02 li
cp
.0588235 .6 .85098 rgb
f
57.1113 313.474 mo
57.1113 300.867 li
41.146 313.68 li
57.1113 313.474 li
cp
f
57.1113 313.474 mo
57.1113 300.867 li
73.0767 313.68 li
57.1113 313.474 li
cp
f
71.0293 327.157 mo
69.5405 327.157 li
69.5405 313.68 li
71.0293 313.68 li
71.0293 327.157 li
cp
.901961 .101961 0 rgb
f
44.6821 327.157 mo
43.1934 327.157 li
43.1934 313.68 li
44.6821 313.68 li
44.6821 327.157 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\704\740\770\740) ()
%%Title: (1409.i029.009.P.m005.c23.city buildings set.eps)
%%CreationDate: 9/3/2014 10:14 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBm\Q'fC8Ytf9QA$RO69k7gn%61pn*`4a(=JBsTc9A=FEg$TN"k&'o0DcS?`)KE+#*!>eOfKJXUlR<.NW1L.I'oM9i$:@B=h
%s)Y)MBXP7Z@FXRb]sadW(GB%(o!%^0)&=^(]=)3W9mtjG4;Y#5l^h^Uprn%)cLAZKh`<nqHD@T.^Qf4_@DCP=%.D]_0?mhj=n;X]
%1i%Rdh/<8]>0q,pNo1fTOgQ-P\k1[!*&gAFHX3D)jt8gpEX5H,"*dSmS_ZfVE+qBONM(4:2HIT`i^'6O'!>-Cp@^pqcl%iJbu(Cr
%H[d':qN#H1H94-$ndT:!:/-La%;sakAA<ED*Uu4,=Y2TR?*@ZM2f"m1G\'EAg$g2VMC&[[e(sYJ/8I5^9""1F4?%"eXj6Cgg5>A?
%#$8%:>2=ebL3Ps*HN@H`7\.I0ge!N%]$4*h(c8=:X1$"Qoo#m[31u.E[^L).)W9=-!S<WMf.:34dTs@lCV"a;6[/+3PPfj,p+U3h
%PC^NL58\6]rWh)V>M*pi>^g\H9a37tSIl:&:"MKsaKp=WklSBJj)MP"-s!";s$_p<k27@"!NGe)VhgBq2-6"9St@&gD15'<qK27j
%c'+s4dsje,?*c)_k0su;L??u:a-$/fi68D>4N\H0EI:kHlQD(nJ/1'KSV']+cC,-n[1-E'l%;:"SP^h0*LHdN!7kH;j2mAG-U9g5
%,sBq$h:N1/.J0dF5MHn@fJu&WhWm$\3,41@*uB8=!7gh<k,=,Mf1cA:nkUk41.m:?=+``d`;]k7nE5)lIi->/VMRgl`4Mn'G>4:i
%`\BX%O4cElZYfVPgK;_/Z'oOMZ#%q]Y`@mT*=r/5ER2O;Sqkkc%0+@_@>NIN&0D?K]G$$%-][_7*8<A7*lhA+Nqjjd1j>@7`:)d!
%po(iDRd`9XYStB4s'mp>91$hr&1IGulQB%!5J\t-K-*Rmn:1@j5iMaq'Fts<NBlJ&"?W45AV:HKb%&RW^hO,nrf;3](p?L^;<N5#
%Gq=6>n:,nOTk=A8qqO8^5BU;,8ljn8XG/Fgs4A#1Os0"8!c`I:eIY3,Bc\1A(h(A_nJ_PNFFaCLcJp5K+0-QDpcg!eab9tdH[tRL
%Zp:1KPU',H?0&92C-6`]C`%I&J3)"^j#;&6&oClBra?fM:sp`n8<5RfHlHM4s03Kk3l8tu_@P],=9ek[a!I"oRDd"`mpJbSj=H-W
%dN*J%8VW'g:(iCf*e!GuO$17G#ELo!&L68pmUJ-MIVt_ri;<F"3mSJ).@Y>'"2mpPoZ*btc$k*G*ga2lRqHcGZ?a6M0'>JhM=c$^
%9lfB/fTp$<@0?BPLQ`e*L.$2dG$2PI)s0Y5?)'VH$<F-a5JuD`foc;"&#-i*aFE]hAauV`aFB5fhm4R-\LrAUh=U*;q"&pJPo]ZR
%#l&aij?IlOMYL(mjM+0:^Lp(9e'^Isk7NLE5NA*FbAVbr(l`iD\)PJ^;>$J>E[!KS^@#+;Spg393,c_iI#f7lOR=tC6,":m5$.E9
%3"2H7#I/!STc;"FL\H1pB*NM)#cs[?e3abL0mSE]W+C4&k[Ej<dTq+I&'`cLV!Ua_TcjON]&o?/I$Cu&,m6MpW'?9gJ1CgD7=PB^
%%>-\CP9&WPihaael44>rd4f#X3-5oEJnF$Ze$;[D<]=L4`\F?^`+!89Ch-r/WBkd!gHWm%-!Y,BGMb8eh9tVtmTOK.s22n.9q.4=
%?*E::h+IQ3,6K0EQ@]qnO74%f:+bQ@UdqKP3Y!09$4UZ86`<\+;k;dJ@5%Q2[,G6FL$L?>XJV!O2'fI5*Z)`SKjG>Ks3qi,&`n:u
%jn\]ATO2l4SU2]U_rHcBI>*^e#kEhtJ]]jEGV.>EIP\9Ph;Y]%j+8LOVdao9$G,4nLSbJkCjbROoFJ,"34DI^fBB8fn+D(c_/]-j
%kb@/=CVt)C?(>u%N`8S5dZ&tc_Zc)GrST-ROl[0D!=A:?r+%t]@X*SsIA.eQN5LRN'Dd`mq&3""R-T"bfJ%i!bi^ZLco0D%n2iPf
%,OA1dfJr\hRUN^85S4GHO@:^]GTDi?K-jVme1ZIe;R8C^_qc%tjZ:Z\@eCjs[`(da-?Rc=,,^RCNl/Efq#C[/1Ht4M/3nO_N-#.P
%bE6sa)JKFH)L,W1?ios]S4/_m@)oIiO/Rs!G5<U"&dThQ!I:+eq(Tnj&VCc*bNl*ff5]Leb_ReM`:IgLNOFF.42ff[H8p!HMiC(+
%Gcc`JFjcB`f3oHEJPbYuq%4[?FGl4LJ##>7pgE:89D)+o3lcLgQpSo)lJm\3Qa'en!`La;%1nTmIXi)Y_V\eYHa4]8?=K<6K.sp'
%B,Q5&A(HbZp%U-::h(:5b+!q6$un#eAIW*N+YbO8j-+F65=gnb`uTaN/g6,Q4O\i>&MRuEhE?LOJ\3Xrr,s:3%+iQ)OM`9R@N0S>
%K7G5tTV_h29b7LSj"cp2EL"o3VVhn?`!Ag`A;iXkHSLFLEQaNSYdcZrZ5MgK`uk>S_'Mi.hlZLT]IF6s!=1F(cm?!f%+6WpA!07S
%pcAru=/5%=%rbiW$Me#iK0##8/YGrT?ku?P&/#n*3BcZC/ksi?I)e*;mV<5kO#'PH'8P5bZB'oi'FSG>(EYF6m<Y]iPWp(+<tX=V
%-*u)G_4JCuG-l9<FB)QWlmd<4+!Cgs\;\Gl.)aEOT`a-#iM.G7JBf;<$stB(U7u8J;%FOLSRA?Neq@S'3T[&UPg$/gQ=-2n^b_Y,
%Jh*.bIMhNM6J'f\HIs?&@o]:+<LJ8kA0#8%Wr3>Ji6rE2KW?9d$kkMDnBB%]W8l<ZV:,]_0>JQik[arRKu6YpeFY2G8&-rr9qX&V
%^]Q_^+u9rIf()Y?Jk?%<-HlRf=9W7aS7,DrRB23V5TTLI+ehEm*DqMq#!OjFTIqsh3pBN>*UWnp`B"U^L$):)%is"$I;E:"e&W4N
%TU"t#c)6pU@A->kC"ekKO:i[\"R&Q7=]'aF[l8""7_l+(MHbk9%9_6U;OA&pR"3Q*p&N6GjhqnD(8:lE)+<TaXT=&bME4<&*YLAi
%7_giFL2.?V?lV6d#Y-l:OUB\l]Zu*b`B39WDLjNH%(F/4!9M<O$Xc$:[KN?`iiK.aQW<Xe->S?sKP3at]q',%E4V^CiQ!1,cm-b5
%2>Fs4@9a1.)i//AOffC\W0!\!a*6)HY@Ma"-7];c#Hso*LT6I\*YEf%e"BnQ9RAaM_$m#oN+Nu",STL=3A:ccd5[`F!Y\+BTT2YY
%(,XMP5G\!F4F7.U*mA]DZOT\F-8ZkUFa29u5QrE=>sl&jin.kN#hTn17SF'?KGN91)4mNoAAUaS#0@hj=_()L$XT/oIg+/deS9=7
%##AnW75@PG]A\j%2XT.7d/54QMe\&\Ho-UkM.D[G_C)NNgJ/[cmuV8e9!HQ$-)cTH6s:sX'e)J<Qka9Ln^s@Tl],htJ3"j:'(J&U
%g`T/7L8\_rT?m%G2jLhS&5k')R&g>?8=QQD3Ypa=Q;EKS;0nI$j`&I0'!NE]Oe+BZaiH;H1jfje@&ntA"A*TM'ppqj5*UoH#R%Y/
%J+b`e6[^#V1*a^,am.uQPB&DF.$,BG3QF<-lD/sUWfN'P=.#s.R:%q:2D?'mEe9i^>VL1T5YL#K;<!_BO6g)sZ#?)\N,$9mc!1G,
%%ec6oc0W&mD)4O:,;(1h;\1Ed+qmp)[W+!RJ?^\&m:8,V.sO-ID.83_YYE9:6oA0^J8N(PFc?Fl@g1U9qf_;:"k+2O"N20+IsJor
%QDrJQ9uXR&@9"\LWZI"3;,:c\`2lMW,,l#a3f>2C[;<]<c8LtN6?FCJp(8\c;D;cJ%@Bmb.AGN`3#d\:gnZi**Xf^liRoO060i,f
%([W16+rNZ"#'l="BVC])d<nG81V9^nDLGD_f2>]g9IA9.Yk'udgf45G\N'9cB/XbA=?nJ(i6`5q0>q/tf0FaLiC)K[(,F=W[)O>S
%NQ3LL%M[qaN\c"tJW]pml'UHT,$NXfJ89pZ?-cT77g8=NW+MdS;jAlpi]OP!4bmf+SJaanP80LcALSF^FupUM0Qb7G5oK_P_rKA`
%fU>@^m&qqWZSVU./XYc&VI\R:lLU4>.e$2Dhi,&ZcPZshfXEK5lNK0fX7eWS@m]9T4rO55p5<V4f+?&7^E]>83DF%bNucaWm8u?A
%of=O6Z3nI;a"a0^dYIX94VQ0^GJa]U:dW-<[CVp'PU8(GK351U#GbKWM6LA7$F`-b.X]/bJaa_XNgX"t,9`(Cn]a,!@qsg4%]=99
%f(mB0P,jc\_7K7GjcAs7@bF8_6h-[PV^[gZKU[!umO2!3,c@"P>("Q@R(hZV?gp/7FY/qbg\IVn&5"CM>S.5A*KT;^8JSY\J&`$i
%/::->Q.[HG@`QZpkDhI"#GPerCjl.)MAqde;<PF+UZhKDofj%L8T%W1`sGkbRM\p09oK.nOWMNZ[64$o)2rdm/S#[aLI^ei'fpqo
%2<j=ghh8/]D"%aScuNX'`^q0[;'i&['\imq:hZGTI#adSUQ2NGFJF>WR'P"bXr.+&5A$GpdsBm(a"J_L3F/?r-WtKROn7&Apq"KT
%L*E-4*:LhE$blE6Obe]<On@&EJ^ZX"!/D$&5C:)7"pX_(AJ";Wg@F6LK_>CiRHuOGKig_Faat9O=ro57::uV,3>2"<3JtsHWnU5D
%W9f\:7FrgZ!Auu_3^r9<<('+qFPF8FjZ7*r!l9Kc+9`*:/]*VlpR!-:*36r:o4*$;2!tRZ)Q.h>"P7;$Xd)(""qN:=d'nCG1Ae#'
%:b`q/,D$]g`o:4UGSC"\j4GJ'B'Lf9H,qV!OJ=J.$OFG#%2=l%Yi5=S[uVO#K'.YoFu8>p(89SZo,Ya[]6?BCRaHGgl*`+MB,rR+
%:O#Q)F[]N%*N]I'mp_e%qPiLl=d<Y_aIMTVl8YSAcs=GX=(@85l-r#MNM^(^3fUg*N$5L"?)26%/ok3oIQYK7)gDmQSo!a*OeKh<
%+U(nS89Baf$$Rjf,@e)l;/l*Y'@Bp&gnbit;ogI2H]l$Rn[]tc*d^eAd8K#0ViK5'TZ36l7N2/+MJeK#S^;(VhdZNfNppI+0?2c`
%jPo-S,=OX&QGR<uW$=OS[3go-2S,]/OFAO=9juP6I&QA6aeMV4_BTl#8aM<75bjFJ$WaX)J/D5+qAWS0&_IU"<$MPl"2f*D+`Z4j
%0;.8hnne?)ADt*p]FOmlkT.G_NZK9:i@BNGpgNJ#ko`M728t+d6jEH`49tOo0_en?kQHc1E5qBQA&L)M_AM6'@)iP4CLS"/''^:-
%ApcM88*T;4UJ)ASa0$Z50a/XS"lE2QOFd.^l3'oQ85.&L)Ms7]H18'V07ZSi+'>.Il]UW/*,6CN(A]0$2@r#PHEE!m;J*o<I2pZl
%$<6kqc:a5j`+d\nC#bL:+_2R=h`W5UP@kWoZ6U>OZ6XgW7_okYMOp)hSHNIt#e4BD-\Jjfr^4^2`EOOK=;Ol(+]Lo]NhqO__eK/W
%6H5BJ1.@-@!3#:jq2Z@EB9u0B+bPI5ON6Qq#8s;#SW3Ep+cJJ/jd:j(U,.bMjiE6&qp@gAq-%MCY]"\i-0OSL*p5KkK)C_f#,+W9
%'PC;KR<1a[&35e9/j>4\oHFPT!jMfL)orPO$Na'3eE@Ha?fTFAjB"hu8LPid-*k<i1-#[l?-P_5(P7Oo69Zt_8dtT:c@ShVA-sJB
%Y#usKgq9SSn2R#fKE\JXnBr_<M/!'2T[cRH(?%_u_M1,j?H4S]KOkRYfWj]hO'8ibap]u4UU\3O#("5@8?<a*"YQ:!9_l?V^:-u%
%OlsYqO!sfMFR_(t*-I,MErol1;3f8&Hj:pk?\JT0N@_jmoK&4J76I'"&Hg_qbL7@0-)D9:'i,Dtr/NlV+/`..k(0=BKCQ$3g]UgT
%Z3_0lO/\KKA>N7fCf[Q;&q=q<@Daj$d0#?6/WXUhZ(Q.@R<FCfgQUe7)<!'(Bs?MY0Z[]K?kI9q[E.DXgW30'p/P]u\\V,[KG9ok
%i1c#q\-=A]'GE@GWY6A?U4J2S=oIQ<mt)c/bEb\qO[h2H-(&5c`4F<b5d!klk?rP$cV_0pd%#F'ECLlu*(#2+6Id@#[)!/sS7/0E
%6NL\uNg3$H&N,-i@/pV_T#^p$AY&lW/G.\]V[\0L9&3`^%%DdTC^R7#cnA_DZQCo>0u+1$Vrr=N'@!:c.,nAR&gaa*FHFNOa^iEm
%WDF;S2955<kdt*j\jU[o3/U!]bUV:5?XVVReECrX3<T:OREmA%185>Z?><S9#ok<06SIGRVG&FnA]bQY?GrD;TJp]h]nJue2E/Hn
%);(6DHBt0:af#o")"O=13p+M!6u`7J.`!ff,0W%=5T'dYNBDM9RhpL&1nQpg0Cq4%O8LTIY\@l@Q,ICu3?-o#Z\^u3h'd(VGb:uc
%QSlU.g5$pGr0Ud4Gmq=!m08r\M?mhdP.%?0CgpX'_cUF>+%#>[QEDoX>>/OnV_4-,ktDk;#/R>p+82qFKLcd4NQeV`jq3rI-V8$M
%BU<5APo7#s12IKeV+hMl#a^mbfbI4"n4K]^6bnYn(A0:#24RA/6F'Gk1ValJH;5%4nP"P8_)aKu2A\mhc=tG:f1'a,_rRZd5b*I8
%S=@N<bR1^'PYu4r,+`?g=g2\.L+f+;fE>>3SAJuHPhA7;&44MD4EFU44"(O]61Y7*ZZ^nE`k[U0GW,,E\K4oYn8cE[jGkRIN)7ah
%JsgX=<F2.hAt#rqci++=OQ.eJ=g2\]ZYT\FQHH@5ZR$*?3[O<A<:eN;Kk;DQ9pd)#3e7Fij+osl;%n9A^.*)[*:\tbZ`CY)1E*SE
%1GhN-].lfBM*X(@JiNI&b\#>UoB!XoX_\%T"gN`C-a&I*@leUl0?]2f&Z<U(5g#O:+rH'`6/W<NNg#gELb[k\0@Qd1k:2,88>]RF
%3pWS2D+JNd'Bp_uJME!H\]9QiC(mBa&;-;<(+!fb@Ei<V=?RMAWEs,[ka,<3UVe5b6sRYKIASN9I\ElBeq6M=8&R,Xk'L33YD^1'
%Sn@82$A^;K,k:C^P'e#k0'Zl6?RMl[#8[Sd#hqlsR#.Q49LW/P?C0F`LJF?TO2<P%3A-/BiWio$a@"pmUW'Jm*>&m=Tjg+GHi,=@
%>SCk/0WN$\Im-R3bGC,npW<5mH6h$?NCl]T8JQ,7Lm`?fes7?*R+)u':OGPnVFi9T6XImT/AE7(g&!Mc2LO%&s1$-"5V#mRC1\Gs
%7'&`*m$NKqLfqj';-a<_F?Wlj>l:9oE.qc*:sUgMi$s!mL]^uXPV2ZkWHrZ>l5E[#.>9KI',<Apk#pZ\Nal#/_Mi'q\A:g(0[i>%
%'q5Hm?.TuWgIWQDedN`7T4;^,-Hg*?n/fe46iUH+5=kYukjhlj9nOF6IaR*).?%s"i]Z*C1$+;VJQ0rl4eU;CHACiDWClYFjI5G?
%'<%aiTTr-:Vr:Kp!2R/"^*4Bl7kdaZ7S2d2FE=MG1s(,:F]hTfWhp7EJS;0Yc\r(R;_WbiBX=DJO0ekkJa\892afnY:d,&D2+M>6
%%@_ikLg!__(k3Ug@**bTN"X4\ieLtDA"4I+jE-RSUOSc!+3C9*QR#Fa6'+g@0bjKcD^Y2ta.L![7e&\.o+LZCDJHB]_MOA6LF3]O
%AR^e>l^^Tj$#fp)U:YAn;^6eQgaA9Qi]=if=I$93N`/f*<?/pSG7fTfHla\06Z[7lP0N9KB<\Cl2MUF`Q\V.6/*U-ZVa-<)<ihVa
%\7s:-WXZL`XUrpB!@/8Lf>irjXNGH)35V7QCfA:.o/M72U72?jP)UE@_'LLh&si/NRqIpmDt%;QM2M^l,BOoKEfkD#iAJqP6NH>?
%o3'62eN]YaM0r[K&Gp=;/JUi6Rp#=/1;oEMh;!5$<iGUtoShVKNY5'bOJ8S(q)@NB7%YL25()^SJgO]HN@TCP_i4`<SFQqa6c1^M
%&qUT29oe.eb5BR_*EJRrD*6ZgUbOm98\fcoQW=:LRuK7(8V&2q?r&eG>*rUdB^HsS<-`ZR#SdZ,S<5$pMK37F$)YpF8Z)rMre@Jo
%dd*EVb0sOE_B*`K&4<J/!GZ^:D"r#4pedBlONVEe2%49.`C]*RH,?WR(`UOG]bD7Sf@`J5GapH5m0[4DlA0L?'H+$cW6#tXi8c%E
%1Z0*!0([$'"4nq3Ptg2l,AG;;4F+cd`:YmA.!5'j6,rN_#+NQqFE.[m[O-B+L;P`e1@L^8MekF23AK[?dti>u(-7!PC3TsFGjnQ]
%/X+TFJ<]+O+q:`poIps=o6,a-V_ubk9JWJ)W5e@(<mrE<ah;Wg4Q!AN:+lbXOY'Hb;95@RHAR%]dA!&&pn^?S>*s#FPWhTjKS'O3
%R5:6O>-<Ur8XtU:ZB'Pu(InN'7+9Y'?k5D!A0iq)k2[ms\/JY:9n/&MK]3iF8+p"E34L.Q(MOf4*YJT&<u#c#MhSn,gEK87k=U1D
%VnuRL_jj^LeI]a)7p4'O]L&p^F^0l\q<TqHa`8TQ5VpRFabi+!aFRU4"aL1SR1mRM8F!kW7E2LOW+I,;/<8f=@%RpcECms[=Q"pD
%l>[JhVg>?=S`*]/gK+6\@_#3Q(2#V(:,c#>6H77UAsie>)t9j:O<8A]_?-&SAiN8p=GC<h&M051n<%``8N9OoK$WM?nB396-F!iB
%n!9(-At#<XZ=#W1ZBiD674UPfc5R3ZX!]8LiOq434`WCnQ7;\3-S\Jfc.HX0"<>]SkFk]P+rh;c'J<:0&^02_(48<`FqMnCBmbT*
%,nIORl+G*9$WsiIb*E+fAYLleKr%YlW*Nq#/kefF6;ZHfa/aatX'#sQ8lKi_'YKI,\fi,Wf4A&bV_Q5b`6f@@OC<@>R7m\(,>Tn"
%)oi#`+e.uW*35B@`-D8n=@TJ3BCHhEMWJgl;s.F"=V@,9FYkOF/CP40\5#RF_4c'8Og.D9-`HXP?Q5O,+gK5lr>b@=!k#2(q$)Gk
%3\=@+Q1i@*B'"gb==DDI<Db<,&\p.=RH/1kFeEPTTnH6);Okf_+V%#/+A(`O-"DcHd3L&E3K[a76JLU)La^!)B!dTCAU2LUH$gg"
%N+9g<XYn,53(Dp0)2%4S1e&iKS(A6u9C6tm5\<$;':FSUk6*e<kZ1"UZQPj`Y#Q0C'W\Un`?AX5ZYNn0'8t7o-+h0p:qiu4(5i)*
%OXqi"VN_uR/`j#]Or`=2,F-:c.H^gmUp*F*qI:`&c&6+#Z"m6b`25[>kVV:\#mt)Nl13VQla4\7*aN:gR2+c*[6b$qF-9)&;?T'!
%JuSA'+rT!:@AioL(@ul^%hN"DiitLo\2JUuS#jcT(K.h\O9/*fnO#%1n]UKU(hUm^\fEn4fBJ_oGuiAs12"%(1r+pj=>fnk'F``p
%_8[Y%73lkaULo9OatXEpOi!6Xn3u2J";s&9EDuda]gb_YP0foQ1ShSYe12IW01o])\.\_631ds`Gu^_&LE3@7TkM4f?1`+:\\_=2
%(*?=[HCX-%e>R@0K?V<,*Fi92Rd!ioDcFTj51Qe5l+.UHWkeP"ZTcM7Dil?4kuKc:08^LD%U)RAF=U&S;!8OKQ4a`Hb-DPHKi71[
%O=^-^7SHk,gf_4R*G>9e"*5*G*02U]aj=mu6)+i\q(]mm)S?:_H-F@b`SJppAm*EB.G)B^[nq][Q,p#E%[DMp@M-\qco_=,cHM\I
%@hTUb"kSEWM"D)\fom9kEH[mLglUC0%*Q#:cZ\=[odNiX:g#%SJjBkJEdTW\_J?6C\>8u[PSH\WK5MC"/k/?@>1\CeD@r(q5&\?X
%7>2J8@#+@_YtE2L2i:k>jFgRXfiP7Xn5\@@rCK?-9m>&aG;2D.8u>!"9-tY=2FpspE4WF`NkBTn_f7#ErD_o?=jDZj6+d;KE/</o
%J`6uUbj&lX%!GO(E$;/Zou"UHkT_^,U`H<$;#ZScZUso1j'(MjWUM2S!i;pD+#un,W\T09>)%dRWkt3d]@E.U>n$:WV`VLaG'0ha
%s(O)lOWH'%Af&oR,8K!Lj%"E#66=.7e\M$84Bc>\hasoEBs9IGgO=fr#67q,Pl%7?3Y"/!7uiOmhC:UEp_Chm@_%:V:bQB%nXY8,
%j=.Uekd>Cp>&bJSO)`o^gl7WoWneTc]DVhO2u>r9[Zf,'a[P'=QS.Vgn&#6u*c?d\n\T@]kO*51:Z:Gg63$T<;/a4!n\R/uh;:k?
%YEIJ85Nr"uC"G9;5/ETO[;55)_fuE>pWfkXa4C&rBme12iB#c'%(os-)g+[+d'EuCpt^Pf(>!OGBKLY"HF%[5I7EDZDKCohpb"[%
%?fAMUa"#D*aaS_YS2Kf]e-taUp<1jh^0*Ju;AVU6d5Kr'5#/f2D)HX3PA^C'h_.c@c!J$U\iDaLd[.(RZe$2Hkf,Q)jX59i`n<'M
%EYN%E:5tBe?go4*:5Z0Gi6>%ZT:n2<TTDe%:'STL^_o:'F]&c_<`![6H<#$.=:;]3Y<DgW!R`!;O9PoMQE6^=!PbX,caLS.n+F;`
%iA(!u(O]0$T"7bEkhS/8jO)C>F&R$M;l-A8':la)cWGEZY@UXm=uEeo!a->k/.FY(G-']uNfl\HZc</23#s'kG5D1*[h#oUAfQ=j
%6P,n1"enVb5YK:TboodUK+W=k^B$W(q7H?,(S')3"9f_!6#(AhHdV_pg$Nqm#0i@L:@%cY?mtqRnm#+UTQSY+acghgO/E%<Ttcj0
%<f:Q^&P?>,\AGf?]>G2T6t(lt_l6:X-&+h/IRc.@K1>rFdF]tq<C[5YWAWBMcsJ,U_Pq[ds)*j#LUF%N]g6_d8S/5L,jP>'Y72N.
%54+:A<m1.5YgfLg(IQ'fUTRFdTL-[m_8h:?V;\Kpeh3nfWqs662I3Shf7KStj2%DAmXXGGVfqH=YLbl@Sao$NWYt;dZE#jbk1#"V
%`=$T;?FY4L!cBHi)4IPT2+t857rpNu,N;l0egp/HDGY)FXZO+pHTESMHDj>[6]V]$cjdlHNOiO9[c&&U(c_N6$V"NW#42h9C8MK"
%hLq#j@kJOU$G&<I1GD0MhA^'37uQ&Ng\&-X\*FMb5:I0hX>fFL"h#/C'jEq?\50Y($YlfjMQDPd3u/_m%)-SRs3(-'^rA'!ltDF<
%^l68RbT.5'cug7%ltW[hlQ3jE^N]dg0R!W'*?/n_Bjd@ZEE/r-:+S'f6EfA,Ak[qtqK:$P#NO.JmEPUVO8MJ?"aXPZVF[Vi")'Ch
%_`mQ=\/YY]-ul2>\0DQ^K`a<.(#%nA;S<![%&=I+hBSHGJgH#BO7\>H+rKI`&B,?[/rDMeD#-gSd%WMV-d5LB)pheAe/da;!""a3
%!076$%X;oI3l#M2e7,1"YjN)+XR)'`m%CP@K&Cbg2;1gIMd[;=?3H8`k`1AE"Z1M3K<GNU"Cp>.,P5uc*c3BF;97O7Fhe`ZM<M1@
%e^"8(dA7lJJNs4A#%1Q.>`]M9*WY='WO13;"k6AXfg#_aQj*a!?Gu%j$h/hkcqn\>Eg,(D!SQ(7-p4^W,lqGjcJT)88K^6j:a0Ci
%keL^`A"[0W(GD."eJ.59M^s\&*`c3%#W%$i`eF,q`kj,6NIVD\+AW\Q'O-g5..U0oU;rurU'.4c>V9?5\I1i8T#j\(+2n[CMAu3f
%fDWN&d.:MZ31pct5:o/0j<2aS1\IcOSA?&h*I5UuM\eHSpo[PAh5B`>A4UVF0N(Pl$O+214o:4gd,K9Kq]RO(<[?h8nisfa,[iF$
%ejZjBfKr3'SFE1?oT')A,`)OW"%l7HT]@eK;f$&VOc/*?.=uSn,mh_W:sa"\AVps\-HW!EFO=#Z2sDOpc2f_l%J_46a?SUYBfeAB
%FM9S"i?!ZkH%SeJMBe"t"o;=;-#HQXdI:j)N<>J;PY`&6.GC\+'UK2dUEbXJMH)(t689i%0mM'>3/T_7!5KM76DG.OIb5)OR'YOd
%)Ks#5e:E`"0G#/,K16Q+5RJ]"nfekP_SAS*+F+A4+t_l7gG"9u)Y/qo3$?g(ODcI_NN'a)CQL@Z8<13Z$o(>&BI#Y`OrZa.%c$(b
%V1o<I"6G8,E[/GL&kHcI,W@99cn%+4R-lLa![0QD@/mU."'DBpP+t=r9$g)`';&e?-N149cq/C;5S/Yq4$8ZH2TZHUnS"PQ)"\3#
%*!+.jQXkgS63-k<X6)u_1fA&HOef48N%e'lOE?:tYp7<l:WNSFA:Ou^W=.QY4<LNN-Vj+1J%(5_O\Rd.:8UU[6V$=In0V!Odo]!P
%jV&Xp6o4=I_E@d)$tJ-@JX?AQOs>i7MC4978g$_SMGtZ9U;.3!4A8>NEcStJE\U"^MdhMe?_.21N$uJ1!)"BtC0Ug;`87!MIRY]k
%."^-aEr(T+.`E]'cD2$61d&$F$]>-m^0^eaUA1GcU52KKBJC-r+c6ssE\csT8F^PS;AVdgI3]'qiWW,./RP(JmZT:r+A+%S,YCE<
%.3pc'0S=K(DiHKDo$0A\Pf6OXXV=8SY#7AN1[tl\.=kC6Zp[N#-md.GBMU,LdZpPM>Q(TQ`DR'/=tlseB4St]MPh.q.=kA`V3&h/
%/[Fs':eI7C**Z/A6V]&/SYk:RP/#.-R\_RD;B2OC9(A/*B*DHQ4*01I/+Lc"0OT05=/:%;G%>5T6/nq6Pr2I>Qt+GK78t^>mX4#$
%M,#g4IqC3G4`"!@!;qfXR$)9lU0`DW!NDW+<MEO$;j#dqRb0e5&D)S.POO/@5asU1K-%ui.9WH)Xp,oQ8!27E<t0[m`l&m['-c'"
%LpI*u,E??2[\sF9#.P"[&8@!4`!(,"a0]J:gS#,1TrJjM2CM\#A:7q2/OIW5Q246Z,eK5smIY)TC8j8%-a`&eFSZObSgbFB6q,&U
%`4,):+?j6j1!rIn2119bCnsj-YsY6PX4#Q1B5$2Hd!*8$Dcp7;nXob;`_'3._Qfhq0og,-Y4EBtY#sJaif"W1f<JU0el\o<'Q^>]
%Tn9kYKYONF>?.#D\Q)Lr"gM0$P9mo:JhC85P=:HajaW:ggsY2I(;I3Vr_jb-/R_5-8kYp]TLE;bNL-Aa;=)0iP5_03;j;o$M3Ye1
%ks^eB26!IoDR.A"L[o)K)W[Z'8teT&&-&AVr,EL-e7FR%VbZN05ubdE'W8Z'?5Mf5MIQJ(`iPYoXtn._[)LO[d?gX_e]X8V18$GM
%0:C86BJknV?:nuu=a=bOCc*Y"dklu>1a1CY@XEs6V4t(KDC61$,d<D]StqWN[#p#qPg0`8Ip3UqgSYBlWF\k?#[@"BdC':o)i3LO
%`?T<4ceai/hA<&Q/%d=!eSh?L((3'L(7'I4!Q[A(lC"[(iR(Ko1\JhtTtE=5j>O<pXkZeMJ$L-L\7eF)#rin*++&fsT-ujKl%hmF
%On9^bs)<W,6h2QqO&G7E8rrn"/:C7b5N>9NIOFB.UAk8G-@I\,1:"%D/],-%V`o)D)8E*Lm5t?M>+GDTf1^ge%[1WYcsl-Y0%3sn
%</6u[j*Xj0(*.GG@Te]fe"W`+"`FZq`89rTYuB"P15iLV4$@B?1r@mZc;M'k<orOZOP6a=)F:dP0Bf91e4@MTFV.26h];>d`)?d/
%aDjmR(K"1j4DHMEcd6;?M9%.ua%N2.DAlkN*u=L2CtgM`lK%!,@+)$:<jZo=;-&^^EeK_;X.Yf!F>]`$C4i7[3lOn\'H_J5$LkhL
%#XFr=^cI9;PirRO!="%kC=itLc9\!&iu4/rW6o9$kL!*@77Rkj+u\,pC_r"3P,&DX,YP&&F=p-$NE@AUh5l(jm$%uMl1C1SV%#!\
%U4d6;6tqH$"(kI(O=GP<OHY^,3[TUQDPa'u=)[AAPqGksG*K0@jI]D$A^!,+UWAGEYa=X:1^#RhTQI6b7Bo7CY%D_I!X@a^Ec@hE
%M];`M"o/t2V4koU720$eUlWREa.qnIfe"5iWQS@(??u%676_dofn&eibcs^-8@L48-1fu)5/#1h-bY"t:GDYjmif&O;N*o-bhnd:
%JXK*"q("7o1[cZQ`Pi4\F3BaB7pRF$/W60cbjV"22T6cFBI^`#WDI5&_p&.Mq1LP"ECMX5&eWH;c/)QEgeGK4R1DCNCl_'j9stZ*
%0gUc/N5a7U`DXrs=@q4t)D;46;oT5Wa_Ye!^W1`.X3@&5k05CIAsIYJb.Kaphi_*CX3@&5k05CIAsIYJb.LkghQ/JN<gbnIbaVVp
%bpr>I/,tp3`Du'F.e@8;H#r,lS'&9#@/U3r29"pOnbekc##6lX7sNh1K;`>?LlJZ6TiPa83*A/"bf>if-Za;r<Xrnt_@+D+-n-mo
%c`p%dPo2XDQP1,MgK7.;_F"R8lB(Eb4`ps-WM!1e<11AYPA9CjRUrM$P=fEu3GN7\:P4`RI<e#!b9^B38j.J)=_?*ca7^DJp?2a4
%.G"gl2"^:BJ'T=8as?WqNHXRL6d)STI!oEA(Qkta/H-gQ*^EA4KL<a:Z=l^h`[tm$febn/3iSOe+O]HUCV=5l^G$I*:u_js,U)X:
%:jdf?U,KicOcL.ML%p2Z%E85ie]2*YAKr(MC)8Cs1$84,]H8>m-;6Ql`@N<"k8DC!;d*__cZgmb:*u7#8#;5K=_1[TCRlnuCFjf_
%*Mp8fKZ`nqnek]O*%j+,9?H3,\Q`*C>jAjSaH&gi]]a?u,G\KMR70rZ%Ed#Ar-:?ck#`/6H^W1\Z^%jR(G)Bj-bY_'MBdM8Y&`YS
%j&m@-nJte4.5F](H$m_P.ON''s"D94LAPeijQWC967_?/3;X1;2TFl'S`cNT\oK+sB,%NML$JmlQN-+U;Z!9UC&qX%nX_1W`C6An
%?Hj;.Vl\C_>du`#fVO9GUoLVB7f>r5m*H*I<nVu'(71c78bV2Sor.]e_OM'<C:d9G/nYl\79QubX')Eu-&k.7Z=ka)B^m%50!Uq;
%S9JUTq18@:eU2CMnlpM!^K$2m(0<*eL_d`\"*nJo);)3.-<Vs^Cci6=O@`Ko,tkSd^j>b*N+A>V7L"1)PFQ21$ZEbBR4NEC7<\7@
%$Yd&;aAG^=P\$Gl-)-p4LhR&;MV/P<93l'ZF3ZQ)YTb.QM?m`8ZBler15a_Y+ejfKL?OG\To9\?Bl&lPRPg36/G"?COkoB"H+n`r
%f.41Qj"u6eB'kI\?1NBsBn!4OB&mQl\0Cr2c+B7o[PH#abHI`^\;M0ON*8(P/s;WA135@uK$3`BZ7OZ[6P_r%GX:K3.Ts#K5-,#E
%Y\D$n&pD16YTC?0)AX'.9O5:rg"6dGA921'RS8-qM9"%=-skDbIo;\1bqbC7WI$EQ8h_tOWrG0PNT[-b?F.`=.Ri0kW,i-=g)@qM
%7$OTO`ZkcNjfA(&1Zkp&B<f)1=mXM005/$]O$1Zs+4"NM'M!?cjG)>qW]BI@=CYM$C0l7Qfq.<6Vto`,U71,Fk.*"1mUDIsZJBR>
%mqL?7bcbLD]+O2BgM%/1RKoJ2L0&ET797'bbD]N/j7>;%`E`4d`k;)!(8J._.$S]ae](3"?qBnUouJO1AkAtgQ8Go`>0Q0_:+FQ-
%ioUWUka#cPQP[D'!LkPG.[?1U/hbR\p?fKi6&QU.r[roaHPL:Ddjg1EFV+4f'uZo5&ER[Ni`m7U8qo#?dp-?>+2om=(Qi&DiT;n%
%ZLnfs%:eKl/eo\!=-H8j.QHQ)QRuk:W&ZuN'bpID'ZIHoKbY=KlRIdm/&kXn'N\Kuj6J<gM_)$H-sMU,[OOWr\X9,^<uuqB-c@OC
%ZIgMd\JEb>N0j)PC2jE5.+$su'XfPr4'p()^"I.`Hmt*ncRL+@I6nYElUp<ArJm^XMn',b>Hie3;4BM8R^TAEAmMn)`:Fs=fC=_&
%e7mJj3430U3H2QIG]d;9CIZRsC:^9N9A:79>hT)<L4UTB"q3<BET+?)[r`YVH*1H)4_b+3Y_?0DSn>dcoY>Rd\iOg4DT[[:\taB5
%HaP9uVZW^27l8fuP6RYe4_P[?6U4pIZWrj:5gqlc)mJXCGJ:3\Ieu&4ES^FSW2_r:$WEqr4gAO4hgcm+qF1lZ"5ehV"'YU4#bkq8
%-UEu6OtAW(Y.XS<?,$3DNS@g0q<bAl^[[!pq..]Y0JpOQLCA]F_9MMSAhh)-%)HQWbquMiL8NM*-C,9M]Hg>,a9=0EE9/A6Z5U#J
%'+FN=^U,>A/'"e.9)5$P,Zb)@1,sU2;YlaGj4C\C-q[&'4-^o<@Nd1!(R-LWLO&W&[K';g&EPZHF<ULtKc$HrO]'80A]^$-F@Tog
%&IIih^b4'dAXYZ[Wj,5h=45C[[!5]MR^4KG-Bj?0o$/P?7ti5YbbIO2#@.?>K$6J.UkG']KGTihF,Al&@X3iU^A+N/O&qW</mP5[
%=2M6E/XB`CqQ`48k,9:L*N@hjV:A,g8C7pX_F)"&PZoM-ouU`2C..ncMF/aMqBjn+D%kc3)Y$@<B$7;6BO_K_;[p:6#&gFPg'u2Y
%0gnpNgepMNWG.2`lCb;$ML+QT%`FNEl'0cIAM-MCm#i]noYh4-5:.;SLFYu`Y+TF5+iI(2aZ!^VMMi9KQX76\L#UP@''25ONNnZ<
%LI-pZY.h2>Zr\Uj:_rV'b\o'n2rf*25H7/HFtLlt+3uY`cR1B(b*PN/.F((:5C?L<\1q;(++1e9PKS'7pVdNIZLVg];r(L$in(c\
%`Z1p^TZ%4]^:*s+>?"X*1l/^FU1BU(Q0H^jfA'u=DWSH6\al'<hX]r9>(:nhJlmXEOlnSEs/nkm(L6rRFHOTro@IR)]$+7=N-1Pj
%*p.LnIGpqSk,[79hk)3^WFW0TluaqVR6ca7Ra!H@g)GbE,dKQZZ;UTn3Oafnq!%2[ji+>u7'$PqFM>?=AOT!P^LLE<():SFB\*Fn
%.,9c(T^2rGmK#1L7)^(k/lJfAPZgT2,`9N_'1d=<Bh2=<[K^=U;$!kHaB$jPf@8Hq:8@*CRc:=c>/^KALJF-fY7g$+28$MTf@TL!
%S,<Tt\V<DQ@Z]mmBI/:57IH!9_i@jF@#J%0olOJlRC],8\\]NGW?e@+3hfllTS/<10O'"arESm4MQ7M+;4]jJ9BABO1&km7CIqU%
%J%,!D>0Qec2<CG_s5b68)N;7AOnZp$RR5o$B#$F;Q9<'bU[uaXJNW;CkuQg<rO-mr=[fJNZW>DbE7ktO+0'+egN;CY?!X=.lKWuE
%2')Ol\@Ss\,&tFNPi]"`c_TkST=(gN%M_?R0MlT$:NmYLojt+<J=Qc61Y@ES^MMt@<`,fs!3XfM^p_m`.[BmgXGo#=416>l,qI0e
%9V,uE.8_:d].K/XicSTgAU9MKX"(J&$ETtljqLRa<edU];c#2bYt.bFPKXe7N\?YK>qARa>\s?^h]\MTS4ddVoIH,1*#9i/fjqqA
%<%O*S^d(K4OssNPjiR\*7:K<20O8rn>/J1ZH$)KlC#eK5CU1:uZZ)Mp2-J,`3<`@'=Z84ET(=(SHX"@X^+`gOS*%7f50rnr9=s*b
%<G/G>%]+QdMS^7Zq_3\CM)0GRqO"6NiC-n05Uc>IOh80^?7rmSMkBDDc?jiqEY`g>E^X,$W_id^$I<njj+59AHV8SO/!SJLV]%iq
%GB,M$5'/!TLj&n+.5;8hFsG8ObAr-7gl?JZ*Y33DZ*1fI]#,h[\ATqeOA<eAjd1(\E]<N)0kmeajHAW(Up*%m`3;2?*!#e4[Zl/3
%;)rSVgs`]^9fIX"Jb?r>Y^s+)?b44K85TG3T1a"%Z2s0JoH;!!`Hf$(&20k;a-P09(Xr6FG'TZa<%BlOP7)/?BeAiH\l`EWVOQhL
%V/4]4eFf3.Pb@Wb7OG2ljOlkVU7a9/!ok`0#ej+Fi`%Yj`8aN?@$RBQ+Xg=q)QA\>PQ7K\9:.i@n5%$<]%,e.d9dU_A&>rJeE8q[
%MO:$L#==.#]G-L"$1giP4%_]E']G/giL']G+l[iB<dn7?h^#]@EujJd`O<K`GUmWf5(,S%he@IMWY/tB;/*P<COC4#eUtB\*@3r\
%\'ss&*Vf?jg!f-_G!b@hV`!c3Hd0Bn)7T%bY5NFsmD7&Tk%HU8m%'0"iUtnVW9=`rc!m6p@Ahj$,X&/9e8@JPod7A/s,Fa_,]rXH
%G3+&;p,4b\431M!h!CVi3r_mPJdN4B^fPSq();KU'gVOL57h5"<WM,5ko:\'.R51./iG\=GM8h0$IFTTo)bf(pF0g9K)TJf%G_Hh
%P@fFKffi.)QbC[X=96-@m<M"^5MGeB-\orPI5Z>@Fp4hKd]I7I?8S653Z[RXG*?5_R6;>`eBH<2)kRL'`b[V\VoP:/;=ej,KjrTT
%F6!*>q.G>ff,Q.-+Sk=;YZXC!'^F!P\6aZ3e/>Y@ECU2J+k>?3F=SLe=*n8hiUiQJfH;''G,km1=g90WRFGkt>+]GKr+'FUdnom'
%IH9RCPYQ-T9)9pWTK29J.Ng%<3\Mu;m[jtm#q5EnLRhHLR5PBNS4r6#qQ/rR-Lppp*6-ds9@uHmkmokNC=D8Lon#$(fc@RC-2Y*^
%.oU=/5ZjFpM[.PMPZpOSY.c[Qp'4;G<4^EQS`+iKjsjb]$&uJ&DMOK/\$G*r[bT#k>M4$I>OK/YEbiZTYi_qdZ0:mdrI!:>Q,$N8
%HO_Tt+ShOL[h"tqrnjd'Q'@MDrga-O=i&T*NnRA$\^SLr<)T18lLTUCYBr<%;D#0)r1J<r*-Rda?nuh^XZ'<([rrL#eXiPGWWGO&
%[@o`R]qO0P=Es8ahqoM&UFENXM<F^^_7#T7]Sd+6B(NG,h>Z?XhhRE_QCOK@d]MLJ'_UTWEtqRsL8T\&Ah2PP26-bBX1i$LhZUsg
%,\_+e:7=-!a:IEC:K/Gr!;a(W*/+:IE7F5SJSP+F\\Y1D#I*aE8\^U^$,Gni,rI[5/5<0!7#UK4TO37PH=+X[;%8Ka<<2'/F4W.T
%qOQL,Bf3ZJXWQ/SD)#%_$GBjsQ(E%5&u[?Q(LAIKUW_dN0nI<`bd,naB8^d])@*46W#_9@OF`\Z79UEogX.8O8.LCN@`'l+=#h,i
%Ki\&2Wpm!_3O5XHTJJVk:.A4bb"F#ucWdXO%$H(uARi2*g1kdX>)4]f\=?%X=ZjB1R;_[bkd+f=OPiY^V7'<NU7G)-r6ScOZ@'BU
%oBaWj]?VlPPUs?)m(=Y?kiXA9k<H:d,OG0:_&u>K=!8Q/hXd-,oa5KcEO1t[.N"HdkCq]7Vq\9cA6qSao=Ulf<IeLl@^9#'nX]Kr
%&(<K7K9O3%[sq4?JQP/nAAuP(SrK9Gk4O@m?nEiZ/*?LX=a&sN+1BTYX$rZ;(#ggg1V`+W9&iE9n0QA34bjF*.oFllch.VO]M#cG
%^Od66>2?r<X8DXk=>*;lGU`^"/:qNV2^k&XB;Eh=Wll(<]Ir/*aIGjYA+>a5p*u0Sno1W:^mp*_blrn>'r%2V@C+QY]%]e8BiXaB
%NB]0Oq"tJMca1MJrlCV+:"1&PFITDn39cEo2,BN9j;^+P\I,%JV6G(2V[L#a`_Q3^l"kn7[#.=&.kWYK>^0+M_5F_(127:<%/qXr
%(ZJo^B@E6d@e7'$\6/CV;.VKH;XX9V_5jn)Zb?Jpk<1t>^LEYWI](r&Q@[PV+%!T1?IGp:\I=dIlWLtp!if.@?9er4;H[X"eSM]V
%UX&$P:h<Yi"]Y`oVh-7&rg\M+%:?jK]R]AAHWBRdC7QE<:.\!t6)IVQ(Kf66-!LhV<nTKiCX(,tVuXgYrWHC>+$S:\@!,t/cp+\M
%^o?&#i+R<6DLSR8(=4$jbs=c=K58bLZ;e'Xqc3"TrgYQuB!68\M+?Cu;*?lD)mcZWX%\b30[O"d.2/Nb0[&Ii=Cn3XP(0nQAM*a`
%YHmcM&uMD)IPl()F&?-(.2Sff0ZtYdQ95t[JnhhA\L?W-l;X2iMk>pU3`!:7<Ie66U9&B4rXESJb!fGe>A$D,b5'7MWPfAb?IYRE
%>a-_R/;m!2m("O0E3\W5j1ONK[*DT&8eka"A_)@W.*XO0e5X<H)7[[KEOjkok>f[o>%(n92Q'Xu7/YD<bd.Q;CB$X#d;D@!_X)_a
%&(*/TY::U.eP8>MhluI&ClCMY`d5(!Ala<H/:>]Kn[/]kYi9FK^:*$:9>T3u"1YX7f?T_oQ69(,>]%I1rnC[pV6$4<ASoE:<a>#V
%c.1="d-_n5gP[s8'o(XN6aB?"!*i6nZVMfY22s'o_.jmjVGW@c/?NMa8Dn!N?W>2,;sMY$)uItZ[*Vk:T;9*LD1:0/_j\V7UZFd^
%gn2+6a0KR=dcn0'rD%;%%r^UY\k\FN.&sYpKMm##TFF\9B:@L]XnJTZqn=nnq#5#,RPMr"?rIuWb'#D<?"s:4:sS$;/p^7,CM5T]
%K)`4sI."j3*:Lb(g5fAP1-Z0-/3CQsRVHrYIadam0QcKAT3LQ8`g8$/^D]*3`AIQS=VU$Mk#.>U(7gqc3HVY'MracU-iG3UY+)>Q
%ps_7nZ["<X:dVXU>bH\@k\*j$NJ\.G1cM2&!Xt9%8i[aRM[dQL>ifA?kG\A]J>!=V3gq:sC(<;"_rG9,L%R'`F?CKU?4n\ifn*?V
%)>SnC?T],kEZ"rkB>j2c,Qk/LqQ8blX8)-m`dd0Un_g.hngaXN*:_q:mujd3^T7.u.fR&;s%Y?BQ6lN'g*9(;%IJ%%9l_!?>u6U(
%K):$u1#H!TG89^4ZPlZ*['hK&Kq>>.0-^:VFM%LdB7ne&*#t!3_HI=+hQ-]_nU\5bD\[B'cMmh-0F@V>ciJGm=Mrc)F42$WYk$8Z
%5$1``WA7h/_0Oq493OV/k=@"$L1oZl9?mI$LMZ&q>C";iTW3U(Z#Z$[Wgdhtj1Qs%ftV($gcZK"8ae9FM90%b?(HWIh9VX@2]:El
%,ji5B6*iL)Y.aCuc""qf$Js"&$f<H1S!:L*@s;eoR%"'@*1r6<rRbM<K?K^)G1/i"Z=ol).%Y3l9#QJ(;kXjU-.rAV3mXC_Q1JFX
%SI`W%U]ig<i.nESQr>iM!n@Uucf!1iIq57NQ0<)FT+`n*c3.PKaNF%YEkJIn0.Y)db42cX]W<)+/'#h,8VM$tG.\)6%/F72NgBpX
%5Z`u4ZT):R-[a69T$P85OLBkZZd^%lF19Q8R@Fltmp\:q.qsLCb@mK;Bt60lW3XO]C9rbNa<t6fbpKIK@C=e,>\2%gq>#pPcPTo7
%q:P(n[[NbDrq;Ur>[XGA&rqkN_kIOZeP8dG/0(]Hi.[MUB=*>Y7Q.Dm?ohXV0V&6JX50+C]._Ee9`HpG'Q"pMg\nlg5>lRZ<omE8
%F_\<6Ipl<.V-hMSiJ/W3'n3-H.a<mYWk^;[%ch$mB@3Wt_K2p[rr+ShiG9>Vm><H?g#i2Z_>%BE!PScMkL18M1sDKA+3RtnB]mZ-
%>LT])ZRN8=]Ukn.Xp.9/`G(?YPAY+MJ2g6&j`%%2k6=\p$93NZg6E9P7D65\;ZAI9`bMjAF6:NI=+6)SZ>#W]O5ZZ45=QA)<dp!]
%[<.aPcEI-_.mM%J@:nWA=SX\;`/jHGZ-Ytb8f;1&h*0R81g?_epNaMP-&n=bRlMO(o5ar3oprF7(3V3qhWaPW+RaBJji2&sGlabD
%=4mOaY;o;961WWAdVDi;D@6(""^A1F4mIu0PItip%ft89l#\H7/Q[::;lYEsCM@rpWWLCiBD\`hL+3f#C87IE6[\':US0/XCUMJb
%).X,Zcd6sjAuLT=[6Njs=5iCCD-i<o_d/#(oa3oY2<n8JYPOM!O!!ES36S`r5K`N&F#qr8m/jV":8d$\g\mq2>.s-3pCH'OA=fsX
%ZRt`O3D(eUo.*J+mSsFD78NX*c<%;Q-#co,?E)C^+[QL',-j:E+,9fWB5'1q/R,Z&6A5Q.-$7(@.o6(@HK&pjS\M7sPqBII[Tk[>
%>?Q%=R4Tq)DIq(pXLXTR\$G.FX>O'F76^1kgc8%=X0AkG'&%CATN[b).s#T>cE5=$PrZ</kK^Os\#,c"K<?+(Mf-sGkKB[%"O>/c
%>:c!+Fhcft(c8:Lp%*(IS[T\KW*o>#2Ir3TP)G2*ka1@Ci0Jh!M:MTmX*l:[E*nG^!dB*\fD!r@@m83%/gtc<45P2T]$8gRh&9Yc
%T/9cCd?cq[gn;R4QYmNk[AZ#;\uYUIj\%Cj.`/MCdjR]&>KU)jm_##h.I0*Rd3\STS9(eQ$u)KWn9jc7F8pT49JtS,AgKkg=*n8,
%p@i!ljm?@DKA^OoR%apmnUYu%<rm*ra#:haO+)erMJZFB@U@D]a<VXp%ecBoUaf7(X02raDZZ^)caYTe>cRe@[--6'D-,@[.I"^Y
%MXFoLmbCp@=b3,#s497pXV?I]CX*;/&j^TkPNPH8:JlnCc-pD^c!*E<,K'_V$5(%;g>$u*HWHTO6>Hd<qB=Uid1.WSgCj!3B\VR.
%bRM8n6=9Gpn]seAQ^eAtm#dQ2Zr2d1TMi/FM8"=,[`'4mC8L.L\a[r?HgqKH2#P-Oji,9cZE7,/DJ+.s6%1Y);\Bf_=D;+&<<\+K
%EW$jconCtqO!`E!_4WG>*ie_0UH,W[k+FLk4AIACmCuU5o"6::<d.@n^3o9j7U+-_6kaSe*#FtkYCtqF^p*%>YmN(bK]Bp*i.[MU
%B=*=nZ>o\Oj"bqB=$JUQW(PBsiJ#I-O!!)6V5/og\;/E+qGm',q-.d<*G.m6>J;\GAo?J3`&cY9DbP9.K]Xb#e$'NK>d%k9Pb"XP
%Aj]4h<Ml+a\-t0/iJ#hbG^;=q-#JLL">/e^2JoTK2Oc[5g<k3%ioA(_Ln!QI>5CB;egdW%$bo9Qg3M<sj2ZG5joWij^U,&*T!Np'
%2jlXL\TMO]eB[12=b7b&L(Y&rSTD=\n8]lgS..Cb5D/SX^C\&BqQu-Y$EFK"D&+_:6@GHd&CT:%rF?I`#'9Ed//j75c+PUZ>mg%r
%;6(7m+b3p"F[,#'c^C9@VnLZ>V.:h6M9+8=RT;N=AG0D"B(I?*rVSIX@'7TpAE)O1i130?2r(V-9*u%toB4ElEAf[kiO-reY5qc5
%`s4sh?VPk.qC'5kV7cW[m`NEB>'aJN=T4[%b9,5d1]@[.(&sE!m5B:XoZ*'WRY@)OTD*\:cjK.pZmMp\a[)i&hRRmiq$Gkuq;,0H
%'`R!c+(g'6q<e/f;@<],_o(37B!6KA$u28a2Y;"?bo5IKS)%uFJ-C\+]$p+lDqD)Ea_8@'GFPA^f5']H$de9g#CZY,'7,=[cMDXR
%dXs)!Qic?r5>f.ED`tht%n><`j7a,IgQPtDmiHnp8U'Q![sNGVkqtt&m>n'tmJi/(gN0"mSt*TB4st(3gVi\ZHgU1_Z*&e9btbI^
%<FS7)#gI3`k>qCggS8BHBZ=OJF4b3+YNkl9Vk)52qKHotCc)Hm8aib/e`&ZgA!W:hPfKt%W4:^NSA;Wi:8)tX8,1e";`ER$FmY`6
%RGn>3FZA(n?ao?Kc$&$W"\0TIMe=$-`a>YGgp#bm_8,h@B@KWYdt\`_2[;&,qaZTG<MTW'qkFs!Wt3[[9m=.B5WZ^Tio1,Y?*igf
%B%5bWWuIK4-a%?sVMPDbmTHu6Rs7ZY13M&#m+NC#SkV#uhL*.XO5]F=<&(K.hf.mamHo8&f"MF!?QbPb@iN%9Co@OT]r#n,=d_%3
%13OFUL*tg>(]I&"XP3%X8[F>a@'Bsj\+'@Ul3ekt?8<M_0DiEb[/C2da'TL=QYo768^_Ab2bS&%8>&U0?$?'dcc`f>dd@-0kSF6Q
%SQZM^=_)\[jT[CkfB?hL$Rn2J4Y4B1#$cVAb$gW\o8TNTk[90d1TrclJhB/@A(jYT889:m88[1'91VZFHI<-'V%?PUb2giDLI=h0
%WM"XBq1^]J_J/#_FVj5,UD\$ro?Df2L6m.N_0#9bc#J6SF=YE%GNGtIq6"QlEDrk]7n!G9*0IM>T)=dGih?Wt72r`\ElkoNSAYhu
%6TX4YQ=mVH:@[NjMhQ3WYNq@Jg3aK:Z&'R'Ciqd6lZ-#HG<<i%N,..YDJQhrhVTE8E]X#ohWX#/F)!"eBUY`reQCr_ClFX`3L@Se
%FW"_ts+7KN:+R,me[N=)<<F@rg9m9bV"$J0D74_F4drP,m+\$ef1H8PX5Ze\p2I$:HeCcEZX![uCNgCV\RBP4f0#YKfm8M5!1saQ
%gu,&8R4hu./%YM9F<R&tE*,j[VKQ6RpWGiG<ooJ=Y'TBMj15r>qK;$8q*>;c(P`1\A]mKd>h;]:/7R5=oV/a0HA7HF%)]%HWOuqo
%eUX6.<;pH5m0?AdGc(",dQ5@mn4i]\mKF]a;p^_CTEo[;T6[cQriL[j]K?:EIALrY9n']7:"jM'Q#E7:XH7LN]g"It\)5V<[77KF
%36c7q%)pF*Af7"O2IEqhfqo(&fhcPIl5"7uX<ZCU0]/S9]qGj8nEg6P]/T:1li32"q/A91[U]eP.m3;khI%2m8'Oo:qZ::sZSsGK
%(F9<=,T.A$C\HK\j3IZA27fY"HE`YC>&q+Din[\H];@8W:--(jIRdX:+#r\<`qlH=$(S1kiM9[R42#/ahU4d!-$j@qoJl30FOGi,
%\bOtrJX;R3=UY+Z?8<AWRnlL<J>&<*d+l7Jbu5p#.Jf=pW\_f?*)UjZQET56eYf=:bmp*rVpi_!-+m9qCS`d%fZZ8Pp>nnH>j0kL
%KV"<r^\ZhApEk^%B[AuC8Koep1?IXL<Ds7,1T?E#:)]V@?T4Tj6ee2B)\1N@[UU2&@_.kX;)-,`/.4gQ(]gu4MJhXD9ii`&p?dJo
%CiotC*Ghq6CJ.ZhH[jZir%G8AShrP,O=fefO%$$DI81!A>f3]&J-Wn_V09I233(&]s+B*PV_]<a-FKu<$)KJ\Gk?k`In/+]V\tq[
%gr;2:DS;&O43+d'FQ+1H<d/5qfB\mcf$TCgkanoeF5l=dgO?b[!oJ/sLdgcMogU7t?Qe5IY`s=ufkGZ[@;`gI#4]XiY9Q^O/W50a
%RM#mLd$%:sjdW\dFm\=i\Ll'G;j.g.X[2M<)C,LD_#_S7D[.<9XM5c>HK86A1u5%\?F^2g5M:PYh`^gCf_O(1L0knFX.rP1hn?Ej
%5HXtCI7gQYQd=!,G#f3M.IM4N[iH8TW,Ck`-XZUQ]<7nkf/1b%:r7Q7[u?MV;"ir,C?@+nbe(<F1XB:M]RM/\s+A4qWsMi_iV"%1
%_U\[G$2:VNSiYF(Qp5NJH5!7S]k[F\GE,J1RI)fXhsfWp/aJ7-G,=5l96!Td[nheFSHH4GZ0^1+#H";,eaX#pi7s&+0L["LU(0ji
%a0EB#H>(+@$$adne63f4CJhM/5Rg9kpUe75$S`R5[^$<Op3Mb$AiCTe&dDi]YBmse]mTq-;]l,Il2>`CJN*VHn]ft$G[[WVT-3Go
%qTcE!.sVJ]IKfRgPaqPS-Nn_7j7q`:=,QEsn_r[!IcZG*?/qF/?]OmW?#8g+WJdS[=!t[I$t.S'SK<FMN.>-Mp"eBn!n&cObq8n+
%ZCAGM*d%:+c0gMNjKq"5fooK\;st;PS>?)bIg,OG\cSsXH`)?Kq<$.:5PM+f+L._LPF)#0j`H(2^X^PPHHW+,GZT'dY+rY8HgPQd
%\GNfs(uCgoL_;2tNL?7KUqIZ.^FoI]m<*_l!.4E7fMEB=F?:@'V_P/)>\`s#8]4sHCp2`c]ri.9Fo/;9AEJq[;bprSmn"5N4qLYZ
%Wa=A\L?f?;_GP#Z<5J"XOahPOE9D:b[X`K:K?+YMf'./'5@+?`pHqOEcEN-t-OOd"1t=&Jhj?@WZZiAH\,16\VXe^+mffBQ-/dk%
%DPqW+fXRWW]=*p+p6ps6C+*F#VS-"hoQ<gugmN-+g_??+nRY#EWb^J&VL-lfYRV='Q7B]tX"FU,5`_@Jc)/Or471FkT6/5n-Yb7:
%Gc?%3,$]Kn&SN(rY&4_1#ICn8U!AT]ZnP)UED,/B-U9'#@V?K!lkZ<;a2t:%T'^IaN;(Sf\_ItGRS#E7e<^(L?Hi:;f5%A?#LoQu
%PM4Jtn)1QuOOU`8-`8>GdISH*[H:l(f>e^u$\-F!0UK!F-0:aU#P_5<[=^cC>oUpW"ML7:("PK5-Q1]&54)qiENe_47br#2^9M;"
%p9KgJ=Vp]#.lTR]burf,9P\ZK?1#PR\nW=!<mLQ7gSSb`<@+6RB('e^\=F).Sdd-AF)-jGPJQFX[ZgVFW\rM$;0/qim>OrJ=Ce4>
%ROr^2Cq#=93c5FgMXMFSoLHlHc#-%WX"<&U53].A@3O+EqV=G,R/WkLIlclH?8RG4A5GlE!0X/7g/5'23pN>t?pOT<D,.%a)>:]+
%RbbmVLKl8=1["/3Utn$oY.[B!_Q!$&VfSeQ7c;/V;:5P=V6M&k'Xs*oA^)ART-_Cm'Gr$.jZVnuA<1PuN_TSK)%YglU]JRKeONeE
%-qa+JiVEGZM5[U@9g0r\P4?t8q^HJ<Y2)i+WJuFG8gpaAlB"oR,i1+3mH%A(^u*ndKX_9&!-V5p2?"J)*,%rMEZO<m?dnCb:c/qD
%*VkcUdr&52l4l,V@g.'(&U?ZqDC=7qbn3&JK9coe774Xl/oK.L:]%8+(NH(JXk),jCD1&\1=W`fIa-`J;Zk6#LGK.Gea8k,@mE]e
%+(,K^!0V`Jad>WeOT?'Bg?/T?rRCP0h'W(OhUL/I8=n6/S.&.H>*.Eh\(-jV@:[DfQC/k?$Jk1TCO6bDXk]?;2VI$U9P:s8WP>nP
%>QuR*6$a8]%?EOtHS@XH_.E7=X=9Po8@F.RXjZu%]A;f%]/Y<i3>a)kg/r7DqbM/E\hh!'p33I@=qV;^*dlc#Hdpg=f+^iJ2:/n<
%Dcn`5`"QlPjc1YC*0.VrD/P8X3s0f10'XlHc'5dem:4Lm]"RCB3,-]TQ$nNmbqc)dS.%g!.IY5Jik:KgHIfZqg/,c"W^5^solY1^
%c(&LH:TW,-##\Xn!^DuNlg+6.Pt1e:P\ZaeqT?2N8iL"m=gr"mB7!0iHD!#)/FD0JQWc3GM(k;^DYUkr@]eu;Xl9=UY*Bs=.?4#>
%cYq'CY#oV$%]C9patq[<3uN2OHE).)9Ukp+_JYjs-IqJOGIgA2MTt*dB6;okRE;8qp_X7H4'9P&3MT3Ihnq;YW+/ST"08<I$CH)(
%BNjL`HbDYZ7'U?1V^egZ%mi3\>X<AudV?/hE/B<-ro/S'knGNqaXE%P'Y%8)f'T?:c)g\c#,K/f8[nA($G5:iXkn"H/OQ?HQl)f_
%4W-jW=LWQR@5pZoB`OYC*$;;8TaN@%<47b9L2$Y9,QaiXbeB@!0r6L!r!8MWjK!9eY;/S&Fb/SJ^0KSbj^$\0"b0RLet@LJWt+D'
%*>%hKl4&ujS=/h7)g/>E(f!G+"pV:t<Rb!H4]:7-<EU%op;H7:c,%f3d$"gEZ^t-pXS/H+*pr\klg=*Km`1Sf#5eAU<7ZitL8TC_
%S2AEn2$@kSS$,d+)6WF*_WNbO&(c0M!U]P<]b]<M?pkE9ck'4\dF4T4>$&c<RONdKHk%V9&"B4U-dtNmCF(44Fj_l2BKSoA.o^T4
%GlKuUlZoN\o61nK%0f6WT%jK\<=d*L:8fSZA)9bK;NX]G)-+;>C"ri+oM8Z>p^#Ce:.$M]BV/=H_A"&]TiZbE2QS#+W7q5bY;M:B
%\<=(S;_fci):`TtHDrQ69!t(160hY'NNTs"hd3M":A/F2+3`A\mG52;f:-"5Y1GiVPO,J_d+20eY"VQC8n^e=HIHP_>%2tHlhJY&
%[4861+!%55ga$a"e]9L4T>g#82F7RjS?$#>qf9rR%[3jK,0sH'_<f>mCD34"<p%ZZlMQif\!"RVdOK73H*psCo<Qk,4nA#s?a?Wo
%TJUE_UT%#1]\<a@XQXTndGL0;BrWhB=q&g1'FJ3rMk$tbXR;s)!,gs>JD-f63uPM*h,[L1*M9fJZ+hb:qQ"XZ2iI+'.c/t#f(KtN
%$Z"',/oJ#TG]Diu".$,L@DoZR`?>mH(<7uhZK?.T+ICJ4HYq`ZT'E`GVf;[/RQo`..,$BK<;p1YTejHB+04n>fhO)0Q^ld]34-h1
%)tn5$MKcNphgUg=\&[0dX=KL-Vm*+)<<3#s6JW@-'tP?Y.N`3$r.K7Z=BBO`l-1,KF_B&`3LNlGkF.t%B?7>.&(jh"CGhprEY2@6
%G(WrW+r`>hErA9BRb0V'ISsqkOr?m,RW.ZEJAkp5rNQ"i@FD1cS"GhUR_9WfhfX6?;B\[!>'#KYH#jC=:E%/TYItoR_sm\fT?B+i
%V12Z1J_=DrpM.JKnIB\o)a2!EJ"7WF=&VZi<XiB*2UI'gW/^Z+:b/Mf816?2h'PA\"iG2-dVbu%TrI!blOZ/UW#(S3.Vk"#/D^U6
%%Uuishp4@5):hQ08%@hrIDVM<(ke2ZK?hRID-16NGjj>LkXF@]2mM<Ypadh%Y<'e_'o53]?Bp(Z0M]LI$--F8ac+nBcuVSd,?);'
%(@-(`K!tN+K.fZe:hZM:,cKL1Oe=i&p\M#062qeoU;)&FBfaPoB/,`,ZO'&?Egd3!nh>*T`pe#9AUjFZ7k1sEP78$BmLV[E\OUKR
%^s7BV<D4e4\737Ugien;`ZJW\10F5f#4"jY-[F;]%&K2%e*&Hc3p"3Cr0,Y4fCc*FJ2EH!^a&L=qg8:fdnEPo2_b;GY9Nm)69cEk
%4O(E]VBW'g^o%e;"/HJ^a*%qgO8!tF:3W/]Tn&.D,q#RA'Etp@QH,$N<]-s]0L>A"9amFNagY(?E:E_;d0i?ePl\tR\2%f1*[k$#
%6Mn;5PR607Oc;%8INkNG!6hHM$I)NrO$f$XDg'89[`X[\(-[28&K"N$hl+F)TA3,-.5L!`cY(3g-h,:sT'W3.p,\W#oUI7&e1!>A
%XVB,=bu?+^Ztc!dZO$Ol8[0a+k3NeOBlkS!Kh&flkT=F^Sd?<jS9MsUAYTZ"@uUG(_c4l-P,ai*)YEcmUSl?i8SZ;q.oBb9pR_q0
%T)FWLHFJ&,C9c+p;r_lQdbeqk:2"t[BZ)RbBjAht!,`([9RTflLIET;j8NA%PAdGg%*-K%=O_'mC]'XF)DFLi_pNe2J!sQ.dSKS8
%G>uJFa17_'C&:KOJ(qX4p?''?^]&8_q<$7<oBPIAYVCBAI!FhIGNj*pl.37L_G50#pp9qi@Dfg,BB/*+qp4QBh0JkbQY.7ie!:Y+
%N+_Pn]jAITBuB.5FDsnMH/n=Joc"kEDOh1pL/3c_n=#?K:G3/fXiI3pi8O-#2t#4[mBH3JrDp;>rl`.1]:QJ2J/:7DI-$C[kCZY(
%l$ZD.F7#9Cgj_?foSj?!hR>/1`_l]tf>4BQ0<a=ldD#=!YI(^0*H0h\p&!Kfr_C!&C@YTZH?\4agcLDNDql55+5`#p>rdnJ4_X<%
%CM:B?O"aq9rV*LdTY&U"F([]s*/00nT6bBC5$j4PqU<2;meuk&CMjD=4UaOpI-AK$e\@hKm73Lp2>>SGrq>(-*d?U<Z[E1anNL6j
%fkRmqhlh`hp"d7Sr%$p[S&+]#+)c%M^V#NCjRgIj=-#!VhJKZh7sNUqg":e#aKO1&gJ)>-q>''AcA0I-TR5e0?e,E?hjsU>\$,db
%!*nEkqtSNkf@Y:S^#/=+X^@*,rqc!LD<L]MY8tZo4kr!p60jY^oB;4+2VEs/%q!/o3PQibCK#$+l%HO8J7SW3YLh?C,sg/93bB6.
%G^<pGI!"iJlc(O&_T`Rb7rRe<pRSPgiT@gTmC.:u^!#lDh>=l9!7H;m`aqQ]>Pki,HOknsIW0Db?5!J<Wr5oGhd:gJh/;)])IL)O
%k5\k!j,FT!$<;Z/BR;s,Wmd<(pZ$V[m,%'J'<WG6C4,*nN'E7k5f%BGS+lA1DAgi?#JZ.N?N5??DYqoS%tr37a3`[T@*."cXl+3Q
%L%e^doP;4U^fj=#Y$%*CBU=Gm1kX]Np7M&VQG4)]\f'nmIe$R8g&0sp^tsG6]=2qEbtEOB%(;o/mET&XJ%`U<!3Z^oJ*cOmJGs8l
%s(q&e2dZa]2u[D/I<rRGG!=Tgn*V9)3JbTO)`ir:rK!!1U>=.%k\gECr5@K?HK.R:?#Msdd?.q`;ZKBsFL(oCc/2hbs'h)XgMV)m
%m`t#DJ*6@cF<%g-i$orpOn!%&8N*sc1MAS_h%goY[]^Yf+7K.DC%8eEPN^r]a*Ve/1ihX-c(ONR.,laA\12MF173H<3ujj?3$C-D
%:d':(^u'RA'A_HUH#iXhHu8o*]!'rEq9ukQo7q\JPPg6hV_>\.^3921H?a,<3,75r\fPMV$M32:4u&Po7N2YV"(p0T<<2IXp$gnD
%0m)il?G>p"5E48`4D[1I^</>4dt>ZoXZ`ir/`'@q,_XeE43uV>J_AiQU>Y8X7qMXqW_0r0IlR<ZGoDEL4K(I`-_JdeI!r&B2iat(
%NLTYaI)Pt31=-$(epcD1/17[R2I@'b=k=b0\j^OsDLXdZ&UYM)O+V?=<Su[oI.K/$n`4<9^e*Qes1&_K?$"m!0D5p+J]HVS%IBQ[
%%gD:3*ps!ud"_Pn&"+_%?G1V43BFh3anm)7hDk<'%J'CWd9ce@[K#eiCRD;LeUOjq[d/D-Y2(>jQH9;X9idtf=M#@h>s%;hpE&PM
%'NY7sM]5B5=?s;CXBX<M:)hf6rTeSQGm\bXTWa?F"6a-u4]]DtGk:?uiBHc"en$AY:V1QDm>m;qES'eHDVTRUY!\J8YCI]W]c-*a
%T'lI0V`XS</lbB4#$6gD#-Bsg).i)$^&?!bh_rBDj#h$^efKn/DJ2hK*B2okG+_"GgHM5mro7&jcJI?3CX!=]RXPgp'DNKRC/[7j
%jOumJTDSh)f=`bb83AN^^^Y:!-Sa-Jm00#.MR\PBHm2m\FqAGg%FJsOULG07pX:K2+13?@*UXU7N`q!/ctaIrC(e.$4kSn4U,@O\
%?A":T7k*hInZ>UUM:$nJ(n.qK.??\7D;KnK07SWShYQMNdeg4rfT62\mrr=SGY%l4jgf3hK:`T*^*\oCEr;LD)$N]EY;%XmOQ-LM
%(%pJ@QU@#W&[%IKAYL@=_,l\A@M1LtcpBGUR;>dVc$`%7+P]X5O"%I+kG>(+>T(56Nu-WFf9D72K1gh?7mqnH/!l8H&VpLr(rL1:
%ML`T3ie;(cq<fZ;PlZ>\5PJ2pO5Kfr50o],AU2ern6qMc*sSKVb(uIBO5W2t8X80*8`0e'S9;>S&e0is)[9'2ZkWDj6TcG$_QP.Q
%6Aki2#E@k&^AYXV.F/8F"GC4^j]u1?]]&=lHI@^1IS"^u%bN^>q;M-4OIc\Qj,_Oc\.`5\Z&W9f9D7e`;?L%u)>'?\B]JdIQNps^
%_sU!hFnF9cQ>MM>@?%]BRldW&Eq;/V4(tbX/KX1lFKfre2qA;E*aO8^$,)ilVHr&'ouf3G4?S&^BCt9,?\&P^YabD@HI:lpp4pI*
%._"5n@m0j\Rq,^XH*2:6n#_"sqo-1VJ%GUp%+SE,NRk5&gOXdr=Aqmd4kMiPOrKC9RE@r*eDjI\)]PKA]lQ+IlV>t]^j\]Sf^$QU
%I9,+B)L,29a4C*rT=oL4A&hDs!aX[Zo370?$C2&K:u>s!<3TW'3g^QF)?Rs6Fj<>QE0OKZDKgNu:uL<oPp;t\]m1TZL78WPf$q5d
%4NQBF(>$HJd?DBF"l=3H0DKtUm>^&u/+6!(.Vk(ekYB5rWMU#"s*addHM$Ebe'(8k%1aF@JHEU\d!=/i]&R_CHidghe!+Q'lcCEA
%K89*5D;RnI_1SCr+1roS!+(kW#NK)a2PULI<t^m5^Y_EQ7gmU[N?4Vf[-)]nn(+,ogO2-!L:R&:?oAPnmI%tgGl6JQ^%LBo9k35F
%,u9o74#[chYG:q&kCE*cdH0leh5*3[j5"!4!q4_Ai-")^_9oTY@&Ro/f@,Rs#OR6V_3+9RV<gZDo@fc/EE>M,4jI3YFqEPH]N\09
%ET.MtDd8;A]i1Gm`YIspAbs"2oBj#idsCjMpjHpfbIIPlnT3+.dm(#1^H^V)KdO@CnbSFuL:Me6F,j#i[^;q[leMf`c"'Xq[@EhB
%[t!jJ_eW/mN&Lrn_jC$XcX-W@Dn)kHG5!4"J>'F?Ko_J<2c#$\62`XeoNNu(QZ@=qqn`$p5$:Nsm*u&=n+^_$2/[7>IX:oG^2a*P
%*E^p/0S"&KHQ]It`:<9g98<eR\T)QV6Z;#Xml.H,3P;oY!GUbG,'$b0opDf?iEGkuE9!^dZuN[fe@<h)e!Z_AXkGTiD#YuA7.T$T
%R`T1(Vjor1Q(Hnj#&CKY+*NAZS(nNiDaC@9r"U!9XPaOagAUs_#]i"c:&RBQUe=_UkjG;1a9AaHYr2*Er1US;QbP_0hN$=1hCV<N
%f7!dBr\lD9+'rR<[+<!6J"7Saltq+JX*#fcGVp(#ol05?cs;-p6_iC!dRE(Or6FIYh=lob%p.USpCAlnr"XUhQAVoaPkon8gHT%r
%_=/M>$p&(gh>XaEf5-7m^EjP#M"%;IW'EAHT:Kf]jZ-Cbm[9'1nR6KW(GqGiaF!Wa2d//JGCKLZpH,Urf.Q@oir/$$NI/FR]G`po
%m^s"1=)Z[ghf!<Opb-f.`].n>4F$;t7s]NT.PND]I_?abHMd==C*51.$Lm>-gL]2bGHUqX*Ud=KqF@n'6Pae"T5R/ZY?en4.Sn%f
%8A.!mEWhWcrH*8`kO$0M\(3jH^)/bGhQZ`SH&)/UfaU,]]_Zn18mhN2d!TfS*^,M1-k*2JosNSg?S6&RhEJFsg.4Xbq/r<Xg>BZo
%q;q?`T^1G)j62PZ2p-Zoe['/1C[Sq*^O8&CeuKb8o@DaB6C#1)L[.IkGJ!JEi,5H4X8f(-Cspc1D(C)8i-9A((Td?[AN"&*FEn.t
%jk1fX2o"$a*e_kW=2,IU7)V7nQem<drRVFmoYt6qg*iE<emX5=j"@SN5:OFd3_\$N[f(">f>Dr4pSjE,a9%JG/mjM0[m0T(c;-Z/
%5i;6/^N]]T^Pn6[2b8:brRQi"D#^s3Dr,1jfshukW+rm,gV%AAK/N*33V8'p]Pg#qp:ZNr)h030X+__i4q2to!F=X$++F6/o*,\.
%Sn(_NMS?gJ\e!Wnm?'^bpOBTq1+MgSr5OccGV;U[gl;#W+/4j/Xs*Z=n8]NFmgnDsj5@noT7>B5q;1K`^V#GRj3u#KSO^s"?8PQk
%"+9q8:E+La-O1UYa^CH?R3f%N(tW[;^4;NX%]dIhqHpt%HOm^6Nc3cu*]ui9o@KUYs%'D+!nV5sdDc,Id)`,c)mAsZ:6iifgQ,.*
%ob[#'NB>HN*@[F=r3p29'_ap+\k2)P?bV)bLu9-2@1EIUFDi6J+$Rj+:?q,#4PW&Y*e"q9UK`(bj50I$YIk!qr8Y!=Gk8X,:,K`c
%"QJe3:K!kRlIURNeZXK5[rXXbh\gr-W9kZW;t89)rPo.Ei_*'*#+%Q5UAb(!]nC8dOJ<'40f\eP%ekH/ZY:]P)q5]EFPjCh('"3o
%;b&XFUVl<3r@83<*M1NIgX`DiLM=AEj(j_0YL*>uLYUl`Phc.dL;`?$bXP:D7-9JEf3N02pGF?l%mKfYH=2=^rr8C5f.P6al<O,]
%)'f0T"$$L:Ha@fs=qVZ]]58W&2@10]`["fI91Z&l"J#5T^[iX`5$D1@h,UjaSHFheY,@V`VDKrp\kW.@J%ba)GQ.5G1s-RSdBDGT
%"$1JubM,6Uht\OHptklFHTu&-i?m*r=2O7K5Ooml#H9A)FT23US+Uj&qYBBX8Up^;HeXUrrt3B3ZQHjSa7k&WeN9e)hZ$orMoJgI
%W*4ZMc0p-Fd+J3b=8qoQ9Qne^.\"$YTWd*'IjK18q"+4qrsp4MOAtP4bD/$KrV-0)]ANS9TA.D)s,dDsUtYHj5(!$)[NA_pnb$i#
%dnfuM3f&NaT=o`d^&*"/e#44[M0C;TYC46ij%&!Srk!CR]=/O,._br=\!Hc,Du]IQh)lc9%>OF\J,&?kS\N5?^621d&+A?RlF4F(
%nR^SD=l0&'+4#H8i9c$io5@e4oj;'J[YOBBWqjem2d]0AURBEbrqAo)jr]"q++a@c]0A@"FS]4VHhir1d-U`rPD)PkW8RR6^HXi;
%^q#n8"<-1ooY[m4bMRf?qXE[o?hN6!^/+It]t^>B5<@&hVJ:GET>(3Jm72)'JA.rTj1>b^D>DL2rqXJ&9,V-Orggh%[$[V!f?(/k
%p/cb=en7*tq<)\oiQL,+VoH=8X,h^Lqi*uR1YodWrT*\p^6elG?iJ1el-DTjl9@H3f,*k=Q[eh^Dnl+5Qdk:B]nKI9kKbe-]G(nT
%%l_6D?0<$mj^8&PpFnpiqu,aiJ+[(S!rocXlZZ_6p:p?^plAeZi#>LemkKa_n1)JN?262Yj$3P,UN_2`b5UES55rgmeMt[p=F,R3
%$/[*NqUAH*o$7!eqsiG0P&,UI[EjVC6q9JSq;P&^GV;9GI>L>1Zr8^uT0E;BqshFMo:,BUTD\%_oC`\J^AHnSrp;XOi[NNHhL4RB
%iTD;1msFMNWUDq;MfG9\dBC:TiOe"Dfd@JrDEn'qinsb,%6=BZrYH$]^\cK,5It,b*F/0=Ie)o6hYP?\55<u!"k*B'^]14"GAW*8
%IdkhRj'R3(3A9.cprb>)rP@sSoVHcgro2i8OM:>LYC/sjUp'amUN\o5WCkil<HhBd4]S-JQTF=)_,nAMm<?#mI3=:WLm+IEfREaf
%5JG%/qOdcTkKe!6oUEVkc-=;doY:7V&)P'LmQUV75PaP>4t#%]omL'Ednfu=kJ.#UUL4#eMuV]K*.KW*Vrs\erG`N[TYM@8l`Urs
%h)CpT9%*b#X7(K9leh`=qmh:=ci$KS(#drf5keV7Y5S/4e;'[pDfTh^r5/H@C>,TSIJh4\Z#sFLYBU$<9T=Ptl*/CR4oNQ"C!?G&
%nsB*:GQ.D6Y`L@5p&<j`oC3&mqnk@1hKf")n%Ja-Iet4ThH0]lXV%W$ERJ.+hZQnG^CMd5HN3-@J,.rFH/J;hT5d[%JYsT=M8kG1
%rnFo2p$!RuPGbqJq!^NJpI?<k5Q9WZTE!t:4sAhTr3ON>^J(9tbJ4!gFZ/EDrr#UO+2.@!DuK4DS+P;.rqG;rlOVb5s7jL8bCk;Y
%N;Z,$"ht#ahih+@h+p7_r`T7!qsi/)*)ti,5C`S)msY,M?bVj*r4QJ9_ma=arDf;7^#R*>4-d!tS*f@ihu'ZrJ+0d/I.h,J[n]Jk
%s"jqn]Sf8SiJ[_\pG^D_prD,*TC0RH`W,Gb^\lJ\^\<1hg&0d+DuUE\?s#]jh+.BokG[^%^]+#Ge_K4^ohRT8q!N'2V7S=Vr3XQ9
%Mp/!7nsaWIk*mIllBhPHp3WG3_r(IOUL/KCB:b+Bh`pn6^\utt$o[+[q"_DunR'$-U\)g'I.D&fc#5hHYp1]&oc*q<n,b>bIrA0n
%s,QFCl'l&Zfc-Jc>0AS5ro*Ud?HDuWr\iHXa+*pSju_HH;P/?u:OcG0q=*;@Y5J8tSk0T6hrQ`oe'HqKpciZqb$=K^9'p$BG^St4
%p9)i2OE$UXlVG:lr3uRa;u7PMqGuhkDL_=>S4M35MYg2!r-;*:nu^"o6$QgMpRoV-jsN`fUVD@m:#r7M^/oq?F`$6.oD+e:q=AE6
%o_`KRF+qAXk2(E-r`fpI^A$N7S`OD]j<$U2p<@7Hoe5NEmCVHro_BjtpD>^_$\$Gl?Inqos7\JPlO3MqI020XeZJC7iY"S?[tri%
%1V\/J;t0_#bph^"'R>Nk\?PKB33IKYFjEPX"&7CV>hl[K/u6t%jS\?jU!B9.-je8lLmHMuX\hof?t`g9WJ#-%)[3g>4:qA$^\M6/
%fOM&JfiR'Wp6/:WS&/2uQH+L7lD9g_kN0Z0?Xf--N.nm#]5+*Igi*+2e)I3jU0CFKF]>D+aYQaH)>'h'iX4led5@I=eT$?''*ucF
%5s)q4kE)<!:\(/YOEN2@C!EUoGXcX(-bj3R\Wrap;"uKo&Pk6oc+A-uE+h`KVmti2a7L(Qi_S5?lI0\qOU@+#fhPa&4.^)P'n4#C
%CuMa%hd@uoE+m;S2:M?9oGk6t:Y?BG;u1IbOp[4$8OVA$Gb/>Ep^,];WCuL)YoO8ng6%`NRbY(;kF`Q>b*Ji%n9^!KE,8*.jkt>F
%cS-mIK^C2;V8_gId_N+.jlC+O^LMQo6Lgsi$2&$'4,Ge5BLrM0D;=YD_lW?+[Y).Jpq9'F34<<YV&8rt56\1a'=Ph21o=,,3&[V.
%k7Mj7Z8_/45V)l1NS0[khD_=+]>gY1bNf>lF4;U#ATJi6D-Zh@C$=1h7qBa3mMN\@2%!.5*#dkm\sH/ZGKkuBc)7p]I#],!VehBk
%:NP5_VkL`bd.F,M(NPn;5iG;(6[cRaHg*A/ClT#RTCQ:uGG%Fa8XiXRMpE3fWT^KFgM)Xo[V(tm^:Pi^fmA4SpMj!i9N[\S@hZm,
%;s9FC5t`7$G):\to>]-2@pV_uSDVY[)nJ(Z=a8]G_Ih_qc@LuRdh6,0bWOF``[%W=98k'a6BQJ$`75sX$Cc*,)?X"Q$o_WE1sL0b
%^cLebD=BCSXkPgH#EWTm[:'&5ETtl%k!eZUU3;T4-:R?uS%c"BBT!cg1c)<\Q$kFhZt<'!Uj5i7/">5lk6Bnn?mf_S93N*V:ct$,
%9@_B5Y>_bZ3k(qc)]dLnfG[Pj,/6LhNV4WQihD!:"Dnag9$]1>9F^fdC#YnY66Nu9@:]Z'anoXJY2(Nr1<^6"&R<r:k!EXa'q^(S
%r--r4+)'\-@*PM3kn^36\ACL[0ICGj)8UGWdDWo0^=2(?&;kO!I57-M@:eG_5.KHQ?jO<#30dFqOt))7Vi?RUljO_N?Ii,GdgJr;
%."-kOn(K]OF$;jo8L%/:ii(Mj6:+i'W7W*n-17UBfR\oSq@Q:48&^L[-5WC)T\(8Q*U^nEi(UCc,ki8LW7Y'QU<,^+4,>rQMbh1h
%B,#]h_(,%k1b*\0d:(^BFpCm&HgrQ[jJon1'Y[Bp0W9/P1oTIjWceV5NI0n-G+`SgR79H.8(C?KM8bQHea=PpEA'KZB<%NR;[?g]
%Chfo,+cVrH5uciEHA;A_UY!.8Qa\a8FlFf!YG5EJ&664VT7TkAf7ehH[T_JZRKBCH!prjg3s[n&9@'gEopY0e_7<FHM8:Km1?rue
%;2'Ae.6,fBS5(R<&#3U#Hj]dDgn<:?6m_9?Vr7S*WZ;mG,3Cil<LY(NakJ_RFpC<kXnWUCT5*gu43XTD+3M$2)0W;:eqU:T!,^0l
%MGM&9grZks#[>`0.r:&n^pFiKJkt'_4re$)qH/V,0bB_\i`#=q>LFN7[\S7GCl*_YZk]3b:T@\WJ^1pbi"d5bPHJg[)Z$1N9&$Z`
%H&F8;mMD><nQm0\6"8oWp4hA,1%?#OM=?oqkF@YK+l9a2<PHftV(8imhpCtFigL?5?..OW;RgQ$POpBE1_dp3]7*J2RM,dF#*#8p
%;1oE(^[!0?_L=).#Pu]\\8V^MJ.s5-JKObhd-U>UIR&Ze+N/BqGGEfoQOS>ub0$L2<+qYU/"][Y4Q=!8dPLi=i-><J0d*qOKO0+f
%)M-MDK0=s9l7]V`gQ)5eNr1t:"rcIpS5)qSE'seAAk`!&qa7"g^[/Ph5jW/75=^e%I]E^ch`/UCLIOR""/f)ii9jqs%1d@.rK6B(
%3KDp6+Ek,WT;0GM^X[tmDk(;26_g<LJ^Z(EqX/j`ZmsIF+:6LO08obL'M``A9LEf[iqYU!:3!$7MgiU0gjY5u$4Uu]2@e^qn9FJD
%6s#prn@VrE'nM6Lo.uD68t^YiL^-:2Qp][8W5L`'GJg[FDbtKD$C)H-\Ij^RdZD$lFeWe&O(42!p.B!L?V=/?J=?bVd)`8.hU&iU
%:n).;XWr-<#$#PI9`+@F_RsBG\V<LdhR7:E\s"P8Xg@Ug!F//DP2'Z)K1'DRhpt*c'(Z:d1D_TKW5@Jt%RWLQ#(efDC`R@-FE&-F
%-r&_?V.n3?`M!rK,liKQ0Dk5^dPQNX)bn+--<kM46%4p5idF/Q@njOY8Dio7&oU62:o;[::h>n'cn-0-^>,K7LKfL2QF!iD*.Sh`
%(lETu!56auS8HFMd'gm!8H<AAl%ekJW!":&VGaKD3O4lY?SjMp-4638&qW6*;pTu`#//CW<R)Oek9IBk<kNX0<J$<Oo4$F7O0Hrc
%CaG80L>ZguD+i\?*RNeE(*.Tr"\BV(,6gG]qPFsWWfkO(TqQV^-8*t]EItia#qHl9iMKMS.!8fObQ3[Ua(J5($)05.E\td5Nn2'R
%h"m^G1-j)<0735G`CT#\#sRap32#!C>GU+OK,b/sIL=%b,=clt-q6Pp\dho*RH$'daoIhH4,RK8:j^j[k]/@h:lNCRMU>U@`HsgO
%,ma1kntHrh-cX>KW/5V%34rG5S]6ZcLjt_M#"ja@,0+imFE,:T;=!:L_NJcI4.r!22!OBI<p?-K!?4CT;(#G=.Y&OC7Cq&QD_"T0
%ZDuH^8d;5t0EB6_P@#7t6\?0qZV"n1?:PbGfl<ru<KYkH<n9=*<A6\TabsjT5/o2s+N08:!1TuI#]W+Fs$l8r*Ep#g9LV7'QfqRL
%?Z\l<(T3oOYC<DQ+VUTD-q$J(&?V*FLr"t;&21h6Q*#J:XE?k5!22$`b<C;_+]?DD2I3m]916-j,)nKpnUi-be)Ij@'B1<A!ssi;
%dni/untmX3Y6:OO6pO%o"'Q/Q.V[IEb^_#-_)g_ep9h3W$,$CnbRuT*n;2j$lFQI5_u\EfV6R\/31,j;msZY%$h16[74NT0!.nI9
%K?#%+/j_fhKEJ5;%$adH(b[5P4]Xq?f!\W-3hV[,W!i+#ruNf.BD4ET(eQjNP3Y6B*U3aRT4fRiO]cGB[is,j-#uNI$;;uNeVUn^
%il;re*f>17etI=<e5Ggf]b5j[)('#>?Ni!'NRpFaeo-\KmCeC22tGSn)=Z&sl0Q]>6dOKK[Q`N)>;u1H!)dE8bkggK'1\CT\-0(J
%-28Yl<?t2IEiLb@TAgc#BoMQ0k(e]>_!J%A(t.4LL(X`#4D=>t!^Kb!D2qoL]%S@k*3;!iEQMG#3WQ2(]MNlTPX=&g2gWese1F=>
%Ap&&h\An(JG\Kt`2CdSn4_pO&"+,%RL0hn##r=63^%_l2q-'2KdWol,4.--'qQn,S9\"H[TQLj#7@@`DF'RKqAq[a<*JB`r.5)tV
%MI@&%bto,.JCY4tPutM>DGY)f3D.PbfS`s(oL]=d9C9#,+$5C2O`0bYc6',M3L''[AJtO#IHG]8TcR<4;l!8\rK,>QqGF"(6mY<1
%B_>#(VHf;&)Ypb)If,_0(V1_<92^MqD<!4JZF8`q"napiOoZ25lG@1$K8(6+4Xp[=Z')oKBH]#1e:kBO[:!Xd>2ut4F?h'75f1Ku
%C&bke5p&kg4EtRikk<(FDdVqE?-q:sX",]n$nYd#O<gM-`WhFYhU&O^%J>+q#:o>B]PU$N/$eJc"`)HM1#lRufA"#9_#RWi)erZ>
%BPS[=d5p6l%q!,o,hA_b[kk@n_U^MefnUnh^(;Ybnk%S-&0GZ'VH7H_p57G@LIKhj>Ofq,r(Ft#(b2Xo>X**S8;GT_CJXI9H<hSQ
%>Q)o1pM;[;jLs:eDFLV=>8&NE*C8%Q[V+6&<3L)L.Mr'Yg>c:ZN`$r]dU\f3Xs`CABEE#lUnTrc&l1@D]@O6H_AkE?&"^6mWa1HD
%=Li*H7F1k^b0cB1(<fUMn:.?AUjb&:ICgtThP76<M\b*%2@<75Y4]/Vk[>0QW?G'^"bIsGTJfPJq&*e@T<_1OVLC8egVgqK&2'JC
%eG-ND1[IDE\pLFLrXfdel$2*$;dI&'l&Cn<4sQTA)_WS+j.m0_S[2JbFDa1chfb3pb4g28RYPR7HgF`pC2N%V!56Y0B'f]1jr-VY
%kpq<uMGe*S4Hp[.XlZqlSP3#TXD#`pRIoL^WD8n.*Jh)JlPSNVdOVL'kdJ,e6i'@bOWbqaC=94X=7fb\!k!0a\Fi.k"<h49`N0<:
%H;BCBV;G-e>=nuG]dm%D(f:EH!%tB8!H*>I&Ht_h\i#7K9@Gl^h)<b;5ZNI;Jd_l`q\SO2;?1;oLrMBp&DG`/>;,V0&F)$`kej<)
%oe[]34k\'ij^hat<.\QrXAG%M&Lt;s_,e#!;5]H\o.erALT>9O&jZjWT8iIZ:@L%0+jeL=/%W('?5u&"<\cpg&bVmuSpCL\'F4h$
%U=-lNV,[eubU,PNH]oP=7k8=4eEIK?PMgt7&WWf3mnecH@Gn!*&@q3Q*#_mO@i*WU#,lH1?1d'm6jVi3_p?S4NY;#p`QlAk7hc3@
%MnsD2j"Q?c`nGE#fr6rkK[We517%<roA\`knaKlHNQI<hQVZ_e+#P0q^!P'R`]Q@=roC5`N\ssLGu`48mm,SuVEhjIj$PhP:6-gW
%IG,In39oE>_6)ohi&m6rUHmc1-Yaa@rXr"e(IA?")gL5Iagi^(1-.^P^ai4R5@B[kj[5I89j$SR^me#!p`q'.'Gt("q0ftKftlD\
%br=k\BDPue[hY(d_fa_TR?D_<Bk8KKS>FSmC&qt61uF+qHh?Jj'/-i]\<^m]?+%OW/gJtg;SnDe?]oe-GNNk%O`tc,0db-MD$SK*
%4:mhW.4#jPJ[%k2fBu?s7(_tW'q(A&_ld0SE5sgFKF84h,M/8=+4?^#e&M3+A5-aD3?W1t6<76?281LRQd(T(9rMC19-s+-9KS0a
%MVYFEAMWXh??WccEe.QDIHBs>kB55YXVpL(<HDUnMKI!tH9-BCl.d,jnFF??cald8a:7sU>jmAh&=cKAFm4Wegu1+t5MX1gob+V+
%+ICdt:LS"f#[`Y/o+/RZf)FS)[[VQ_KT$+M_D3s&@Y5tnZ-=d.4+71GAQ;Wp:@,q?rqM<!7@1Es*8GgL1/e.kL^i&47f(cmN>F>"
%asm[WYYr&SNA'^=j@>(%P(T+=@*faMVm9oN$QnTbgt:]3SZUIG6#`Tad\UH%EQ8W1KS2!oIlRolNCgkMkco7jdm32AmH'Pc62RX5
%i0u6r95jdgNmZr:&RTSJEYtGfU\+SX:F9:UaskB]O)9&uVsbig)Z=t.2KACCmMNKp&G)^oQfGm5q:n_L)LRm34?;l!mJ,OU*^A`%
%BLP^QO>VAKmN%B:cWI*4mhC#-o]6W_=7E@X)p?Q),B3*Z`]MTq^4AsM7PiE&=1Fh7cY3hN,=o/)\ELrD'q^(SHq[4S^XISp'Koeo
%o+X15A6u-h<68%H%DXcO/tUL[lNU$54p@X)gZnO);qONUJ<0)`-b0suAF/4l6..Ku$$+&F;\4i$@b:Jb3#V;'A$!sSCpHZ+Gq[cb
%Y)r`iQRtEH,].p>N=i^g_KX7ph\;3_kXGp%,r,LfQ)J]*JX%lAH6;ek[jSAlLo(`H^##=CK+"Yf)gQ)m46l$'J>@?8`-IdC&e[.4
%8[49;h-6]sf!%?u,njDrA;%[@N.b"V/Y(umb>IoL3p6[F)Ym@Y4(#Yub=ILC0sYL8"MKQ9j\id6^n;p#-:#mPG`j2IKc>QX8M@H<
%JUE$8l,4jc*U-W;67L%?`EE'nBq1L<4(A\F:EcOs"Gnl>YqeD(0lL'qg7=/!NmdWT/Z]:+D?d9LH#_kndCOT^gUi>2dekR"Z@f5d
%i.M0;JEn^7\Jugq$lP-VGqV@lIn!&kI&mSa+b:Hh<.n3qkBZ-i$1bFn^Ns4B?+Tb"%FN)o.<PN!9.G5hf@AEC-pb3%1U0BVc"Uf%
%ijMguE*I#^-GD6R6jo1Q5ddn)j#9_e5lhRIk#IHJ8BZn8Y))dQ%5d%MTL1Ju=+)G(.):B@LceOG,%p1\<okOA$L7s0*>-&'TkSlZ
%,Ms%K;U-d:8"-s-TO$UN4@#0JOn"C6QMW(NN$W;?bfdR'Z:Ps*;=CmBE]%OkX`hu5cTMpXYDD8Yk2,^'QBU]Im8=R?C)05r`pup9
%>2<5BBLEkO4^[AZ9X:?Q"$Ml"-RQHn(Elct6VcC<W_$_5h=PF6E6n<VlRF'^po#L!aL\oY$Q<,lX,'>e\3L=tnq^U%9P[(coE-cD
%PmYZnU;.S3AYR-r-7.VM1Cu>$f;A.g=XtgHaf)P'04'c`>GP'*('3KpQ?K7R/h"e:?EeBrC]IUhQtoee+=b8iq<=Mk/_\77VP[`c
%,.@WL_H=AO.VgUa6K-KKV:N_e`dH4p[0"DuroU_t*0"s,Cl5i<<=bS["VpQ=>GqOaO=o:&.Cg7j$Lb9h/(G?U>e(pEC,sD4`2loO
%+AWrtH##]dW2YAr6/'p,-rbqsMIJY%22"cDBQ)"tX=@s<2GK<(,pgG:gJ/(Z&1s8p#6@"=I#_lU2+I+"d4_o#S>oDrf',1Rgoo^c
%RL`*QkK2gk%b*G@M\*Vr\D;J><^'bTQ;-aM,o[!]Zm<NTi->;]9eNR-ecC/UO[7UKDGYQbP4&ZjX3SC51^1!@R;\m7oM3amK&RNX
%S[JC'_:[eZ=sPR=2,^dpP!kN7L,u&lGKQW]d;++Z=sX29F;cXYi$O7s'Bhd(Wq]F^/Xj&$4h]W0kX]hLg[GpgiC^hU46PREOWchJ
%h'9$hGid+?IO4tE02(D"/<)gXl75fo.]_G9Mms7'J`GsLAQ8:P$A_cPYnE4i%*[3/$O<2*OITBQ0_1=B81>:9oQGc75-4u=\8&02
%55_5U1/\7`l4C3Sa+S8l8?+OeX'">e[bNaoAF^0LP!G(/U^ju`Hi/gCYZ!fiYHb*C36\1Vo#W)?]5e<Xlm_Jh-Mb.g=a=C`YEgHJ
%@Qm.sNgF!\eE.I6p[`$W'IaF#;GeYr_jGQ3qaRtF98l;&6Nb[2%.nJg^$eTO]n';u+.3Pih_02HS1N\d:bLEW<?F&HnWK9$&WoKk
%?n&ZaO@"=4Z(bbp&[$D;R"qI_+Y=kRD6\Bb>%:HF*&4Rp(9DS8AW9^Nfir^.8jpK97rbK;ptTD_Tsfff,1UAXnMBn$1?(*<=(Ej8
%Z<>@AoVI7%1cMW)o;$nh+cRJ@c&lQB#j<soP1Pr9M'Ct,.=^LP.?"BIV$W8gZE;!?RM&>22[RQI)T9Y'aEU^J.LS\*I-%..Ej;%3
%`8'.b/G!%3_Br!;=`)1MH-@&)jA_,n9.)8Ok9464TlTJFMGuke\)Ct($eU/X&Xu?bW(:)b=.,_a.J*VOBjY8&#@u3>f6[/2c*7p0
%iT"*CnrHAkUp<8kM'*Y:'30<Y8eB&=4LduRS=Uk>[t';47f.#Ln3iF=0X0V<K#$S]cJ&otfK,GeT9YkG=suCj=/u:3A.*6h7tFmE
%S;PeV8X6Kl'*Xeu;(u*4?+k18nYR6ir.5$CB]UYRejj1O,of]QR[60X)\mICBOu<:il\$$s(8&PWYc9g!1$Lj)H`L>-aG-c83HG)
%4kEb':C0RMDo7Y`N*oKQKLoE%*P0BMLhA!&%go\::$+&CP:2Qqabe#Y3a7^pgPKSr,BYDs23Rg$6l^"[Y#S!*0-3_dU(""o,i\7N
%X1B,K#R0Y\U0Nr]DZ$U/n>c:A`;:E$h\8QJ)_8ukdW,V.COC+t1"+f]Gh]N!DWO'>K'MB-P,jQp)N-PNibh;83N%I3-$LE3Vh2B6
%PJRL74pPQ!ibj5p+ALAnJDB@jrLJ(b.B9a;kDN$oe;6J2k.GRUZ0A:_Tn-t\ijs&#jBP`^L:,Qq0t=>H!HGXn=Z_ALG\]iQ3u?nC
%).ZAQS!P#D)YMMgYg:DELUAFP:aM[@b1Gc`\O->I1*O\gTBO*Cpfl$B%Rj::*^@cX)C56,M3jOI[>$T+9b'_BIL<#\Kbu<\H$E+S
%QE=1?fer)C.4hms@FN=qN0TLVBiY^:jfs.t*er:S3XB'h@RMR9CZlPg!P)-/M`"0Da+V`=kq#+Jl^CY'<C$+ohV]mKb))sYcKSh=
%PiPGB6k*-pf<Fm9<1QJk-nu6nV1*3KagW>%44e>QF$0KXI+-Uaju^=VqOMK9H3Cm%^Yj`+2[sT8].F3OqREW5)L+@@nlD-gmreV)
%`G'MPZ+^R:&Tj+!XV[U];#K2)-Urep=*o\MQtYFFm*!HB`0th]g".V0ck@qK(e`Z(7aF@NI`O]T5:."g?.LIrlpu4>:r+r>1hg=&
%qGo"/7tJHQk@QJD02p'Mhfrtq^c4Qj^c2-\(?[(WGf,<>*dmC@n&<Dq7^LRVk`X93o/%<c)jkm<X0_H0+DD+n/C&FSB-KB-A7``I
%O(2%CPpPdfK!"eJ[T__tVbR[N-Pu^;]W#e_2L,<fkq"&],.5bRf4-Y,:9,:X7POBCJNcKS9@#:?I,tSNP1(^TWh\cE4RXTFE)fpD
%i#+geLe(9:*qnSl&;mqnCR*/EU5`?nVPfDu_N5?l,=khX6H^7):I-E.l:DmhcsA)%,L;DQ7=Fa2bGJ^WZOa*4I_;%oD=raaQU>U)
%*4fTR)WdY69ee0rL5,3]k:.+:4;+j;DoC.Z@Q$b1-VbS)*^IpD"3%12'n>VMPLkZ*7%,guCmlGiPt_10>lk?Kgrn$Jj/grd*)t,8
%(RR(p+07ghfVO.,_,,T@:(3V!,-FsbL<[Ek]rYjuB`\WBC]pWn+f5^=J8KK:JJh7t]U!O^Bes[;_@4pJ1Lr%"8"\YRMnGZ=g,GXb
%b1Yn(64l(b[dl6@#lCLgG$3D%ZgWX/p?eRqECGH&0IV@>IIdi(WuK<q@Y8eb5*M^:3()pjC?7+.47GkHhfd#qcr'BSn#Gj#G_SNK
%6VNu13Rm:Z(J_kcVdCKQg3iP/XWn>`U!E/T'VFs!,O[mEnL(e]5.+3CDM&*OFL5hHmTSek<dod+kssM$k)'*L8&NWd/Ok>')@.[+
%`M_X6L/$Iakegf[)i&M]%!H>%=KiO3JsTN_YC1852!XGm"::$m@qNBekQErbS3%6hbU*q+gPZTGA]mQQ>;@nZD%SJ.=t;\PT%o>b
%hMKl(1/4AW4eE%H#b[S:'VBtY1h<")VqhV1Eu.u["\UZ`Ct=J>_;br,k.i`l0gh6E[.f2%)?r*8Kr<k*+j6t5NJ9"5k;8W;a38:F
%d0XoN+a5!COA-p,ZkjfjbE.^&2e6<h)^Aa&ZrV@)4h2`Zr7LBF=f0'A;?N3jT\1k1T7UujaSVgPf+-'mPk;QNSf.FQ8FhnG?MQ]9
%2-83B8MJ;6c\;!4&6gjlO:QNdJ\'Ge_eQ;TM)+r#-u=fm<]sdnWr&kr&/Hu0X:=@E6<6*7dlZ`ehH-R:Qm\kZ'0-dj28J[1k-`2Q
%XhQB27Z^u<Mjc3t^n_c0#*@;TXM.7ql^;0Xbr*HD/aB!/D_d\gclN1hjWHkQUPl_PDUD3i=!%2Ohb=`Lq8er+$k8jLO5ksB)>=g-
%@3j,Y<D&g4=6)gZ2fGufg-:MVB@9$POenZB"u)2&EDj$'iZkR)2q1rl)qeJ0N4$ujq*sYDNNZUK^KT7O;dE^^Scqf7,ATn:kV:r-
%Po0jNXDCBS!-:C'eOU-?CF4S62iL`%0rkmIeei1pFl"(6I08s+epD$-G^NC.5$jfFm56mE-k?>>55uN%4X95N^>dLG^MXbJ-rP;l
%.W&s)V&eXbPI`#WbF5tF)H>BAok2BUi-,L]RIA!?(1%LK2"XNqJ\iB1$J4Cq(Ch&#]&VUm(jVbI4&D<>pYc#']sbZ,T]aV%@S+,?
%l?W5'%1HP.afb5#@?(DCCVQW>$l-Gn__9iq)hiZS6kAWan2u4Xf9"8<o2'mr)M+K`Qk.?8[d,KB3pT/Z1!?tgL7SX7chk9&T;AV'
%jsX&NomGfZ$2+0eT#M!qf(O())hg:uT]E)9A2Z88*i*2,2\9P:jlbhqnt6a@GogPYXare/L8'Wd_An!6jBil!q,.afR&l\PV=7pg
%ZBLrTJ^\BlB@JBS;4qlFBtHfpqHCq]D-NI'X`7u[J;2#:h<QAQ:19.aKeDkk*j.7=OY5\#@GBXO(`IG<XD?p1(mMbkZ3#r%amJrE
%&sR#EP2$[,oQL)u[FQ*_dV[0PA>=#<,0Gb*6>8L5.*U(pgW%i)\Iol(2Vo=-?VbBq@:p^;Jgp?_1[IBeOP>.CNlD[lalBeqI#Xh5
%#"E$]cA]Z;IK9_5K.j8Y`UAc':br5)5JrL9%aTD6]cW5dCNXrW*0'"LgT)445e7iRa@9*F7)9:^_Ap8#EIa\E;\,qsB#@0ecuJtc
%lOEjL823Pa_K"T@YKnjphMiTd*QJ])Hk:FW)+TQ5$5=iI8'6-4E#_(\3fY<JVE60cBJE#._BED[$8fY#^;3N&oQL)u!FlB_'<1.^
%7lK)s:.4E=s)GEU!tB0f6M+\r#TAPZ(2+sIZC!Z)GVR#E1_B9O?m%.,J9p7s!i>sm`>"j\M"uBS&0!4J5R^([0FDmn(]uK_$O-[8
%)@bcugB5G-0T_EVIY&J70En+'8$?eQOme+.DDr)_^-21EJJ+Ue;?;J3H<dB`q:9Ui[kZBA2JF0)A"WrQ"B@]qN_VpC.(O6f(nu^f
%;6H.%Ln4jYLK.0"L)gnA1&[3p1(Jt@;6PVU@o,&Yp0&du<nKa@Z,.8)+_j:X;OF4\&%/.42n_ZoiIbiUh9@5G7:S"YF7_^2Oc3j+
%lqE)b>VtaXRY[YN$q=Zcc:hbO:[?k&*8b@&48\67R6iENM&^"D$X\qE'E);W,TNGch(3+-mF=m?W3Dc2:gl9l5f!_V_Ap8'Bpb6B
%!"6dQ#a'("Z![pZM(*aUO9Jr3Jh.`d+@O($`PO&D-`6)Qa9#-J5o,Cm&0_,^i=o+UUPAtTi/Su%!lk]-eE#?d7M#j2`X5q+KW'T'
%87@Nb5KGTUO(Mj2"e#aV.proB<_UmCc,;_-RYd"=BI5F9J3gtQ0h#_edX44s8KTM17QQ@Fcq;WgA'Dhq17EtY?SmheD\![Rcod$i
%]6OA`L&_qMkk-=fEB?VPh.Rj\6`%;bBEO,jEhb<Y&"KZk<?uicH'kU1W0HChdp]7o-r.pE_Ao+@eN#T=qjBLCIS/@4U>A2+On[j6
%n<d@)f]n)(_^q@b%;FB+S>BSAHaR#Q:goum%i+e@3hS/K#7>PE8.38Y&?l>j$o&GT5)d>u4`EakoUD`cp$j!*Ko1m+Jm0<d@?(DC
%9+-kb_raDrC#EAB[e%lS:EV'3m9S\4pgeO4)hXDk41ineo74,7;pAZd']pf?\GGHNG]I6WEtoL7a$1Jg*`/04?Yd7<:19.aKuj?,
%Sb;3g"0]h-4*Vf3P%AV*>uiI?7ub=WV7l*qYG8Jl]EV!_cp=h*_Ak^8g2LL'Un*Z\(E0,e.*C'gbgDicq:sr7mA+Ts4$_L(U0Ohu
%*.:b"5B,]$I81_8E1camgB0o/gufY,m/*<'_N#s>R%r7t"9@Ht9rmkdFsC?]a-"\Zc+uQ'EH;gB*&mElc*9,9HkdXA4i\)R\!WnV
%T;+m6EnCaWNVY?q2/jE+>TmJ+,+_h_$:=8MbX8]'a),H1%DA<]H[pB\K$[E%*"<Vi3gp:dnoi3f1P@hdUMtYQE*cmD*6k7PK6]H5
%jDP,nV_CW'_K"_S2p,T$48W^T?m)Ukrhc549L14ZBckWk1+s+Hp<g[l5*eY3hZd#HJl)@VqcM9\g$2+DC=U\cl*goM#<t5t_g&7:
%pFtINob>%f<MM6<NP`*i,6o5Wa/&rg5^)\p'**dH,(`[ZUB`D''Rk!DiIMifaQ7R.*L@NM`C0p)0LobK$e2OXdtZl9!agc8>b8I8
%?mmWQ(kjtrbkaZ*W<^K:"hs`,O([GJ_WA7.1R!BsV,9T</<?6nY`\u#k32Ki(I6)NI/s`Xee\b6Pm!j97h8j3!%!En"Y^3a?SE0q
%&ra[ISZOQ43o^9o)$I)r(i&@C<doe:nKPjQ9`ugfVM-uA\bu.$'>]OH^darP!")X7TJ/m>57mo"LPZ9R"&))k`@6R>R%jm]6pSS*
%+p,2\'+k=db$jDpk[Yk=q@,4mYQU>N(lHcPUG,3!R>mRHiG?H^&8*5Sh]?/M3#`afkd(jd@GV#!k32JN,Hr-k2?HNQ?mCE#2&M$-
%HD$85Eg55_XB_0Q(l6aNjlbjG7US(\C]meA^d\`$CG6*:oGAMj?K>+Md7.#^"DY<+bAXRr,6R1J,6Jn@7K<U-!"*f>8/n7jF^3Ps
%U2NC()r\>QaP/UV_]2)Pa4UaCXf;01OYh0a&tYW:]24,CbYb/i0b^!`gF@J)#JikCU"Quh1GKfc*:;hu0p%)2,$;u_1E1X%rUp3n
%=a2Z2h/f:JH-_r6;Vi;.*G?g>2=%L6.i:Q[Ws_B.6\hq@;ja<bNZbQSAKqKIFP-q/+H@1;IZ@/m&D4[J&Hm9g?j&1u`sSRq7unNR
%89S..KGd5jIN'g(`eqmI=#5r3_ENP[(%r4B:`(^5_Ak^H">L@@&Ho097Z`Xj@n!.H7unWU5f[:9!IK>/Unbh0d4*;ekm.>_hFA,2
%LH^;,L1>q&Stef7+Js"n#h&AQ8!(o4%knP36(gC\5mA\4=>;Kl6a&\*^apFJ6srIo4!G[cp-(Nk3I9bH#gBV`7g.u8YTqRnh#-@=
%VVlPd"K'kV,m%"cfFotRpHOVR*'In<`+H<b/Rid0g_RHup4.u\DMnp>oPG1*@06W\bgH<*M`eUQh@W;:j7V)>^=ScGJ(hN/B>3!^
%i9Aod$Cs7TUN#%"3?(2)`r5.BdW`Oh_I>\\9?r%p4%k">dM7$jX\R2(KfKJSY+4[1+,MO1f&Pc_\Yc([aB#]b4!'Bs*'K7%8-*;u
%6<lGS$dto^Okb:443`"U&udh<Qd5P^*X)`SDt:R:b>B-:CG:kX)fJqKd@*eeU9`Q9*TC/m38N`*iccN<7Lc/g[GHidj6[n:CV(8?
%"FZg5%4Z3+(H(XWLX<7pm@p_$OE^,\rmqTVViW,Qj9\3=;d('h%6Y58iOW7UT2&gT!eoOfQ)O)N'\l-dQLNJ3DuBC6s8@`!J,el9
%n%\nZc-7%XJ+UdrreeI=le1$Sdd<X.>\cPrB!lbs#;?Tmot``['#%rc]F1hUc;V<XCaCIBpE>mD[.9D8TAA%\]:,S>MbY_g`f#SC
%#8H$J!X`u_-sS9b+%23O*V"EH/E+foIYN-McSE(*K_`DW"4%8DKW=5\;-&&O6LiYS`Hu]"BZd=cTG"#(CC";+.B-h?!SdH$Pu)]4
%p<m"_I9`QSCZ<=2b`A7YK\c0fM@2W_95[Y!;8$P<h'qhthfH":^R`cb]e\2'B+cl\[KN`r7>(/Io=uK.LcNC6#4,VnHmR+V'P_V\
%&qaQ>Z4o%k&gb8(OG;1XPUSW5O*h<7U!tpV0$n:N0/dj[(O;qkd5.MVZSN5]Jlr#[>5nTrq;KH23TiA'kc1s=cZr#?JT8TQJ44q8
%?2:bB;\2R9T(@Z^(6`@3*3$0U#05%a/*FH'gZj7VmW_X7;dRB`U#QPEWoNQmr^9,l>TLTFS9K;.;;cPr9QRmo(&O%jIe(b/V4I."
%E36<nhp/aFSJ?VVmrBhGQTB,92BNZ^]<^"gi2!ZZ-AuslS-m#<ofP`m_tH3scak._(rM8N]M;%,EiMc)(F3?*4']Hfnt\>hYCdV\
%keG2%E8YfoU)5bGn'Lbkaa:M\&^BQFne:[bQ\5c`Npq5O0lL^$halc<Ab3cqhk/6lj_&B-;HCIj.jL'=-(3@Bn;Lc;k6B]q$r%im
%3\EVQ0-FEmV.mZi>7reYf?X<Ra96e-VL`@_.9u+?7XOYS#fYOJUL+'s4a:P/k'ih49BtPiDk(@?@V<XSh:0jkh[3.F.t-e(>,F2+
%7NQXq`O:C93s[V-V.\GG"<#XE_eg)45AVrjWhUCmL_?bB-dYP?r*D?9A"X,'!G4M\N$@U*8uic"Jd71[dD3Q^'FI'a^1diBap87%
%'g!Y[C$:0kI5PK!g]TBINtJ>R]oc%dKVim7-s?5bp(!Z+PRR>uE+6ea+;F9RFo4F5@'fO(_J(3jMqi%.BWm&$"=Z_]+'Mn+MGHMd
%I_DS-&.CdBTps*8B<FlY%5_4a;rm&;^$o@`+letC(tOL_8f6t)X)?86%;<VrFJ/<kTE@POG9%OmZ!q7eNd?buL29Sr`[sh%GnoC0
%ji]ABHtM*^8/YlbGerfS]f>NJ$<bn0DZ!h\TV[YjM--T0_OPQol\(4uS0J[AY/j=CAoTijBA6!UM\r9R(GDqkO>_pD(s"?5hupAp
%\$HT&jLG6RXhhen>'V34$na#ShGq$]QoRVP'+>4T.2$ZK>sYqQG[lIt#Fts7Vmp]UhpM%GP/'\<HjD.E;5!Cacg*PHI9NrigesWC
%nd`(1iDoM4T^on3=rpM-UHkO+LZ=//='Z:]/*5e$>\i=N"'J'1k]oGhJ5C3mdlN1C$5BY@ngHb!iIe9SU/3=c48njrC6-:8?^]R2
%;5i(p&9Ie2#F:sVXo,R@Iq,r5B5^W:2i=M+hW]Fn;8KC4*5.Nho@"&ZL,,bl5DlkkklOh26W([Z_Ao,GrT7h"^o%8=[HA>B;ViiS
%TW$d<@?)D(p*MuMHB8GHrPbZF;L5"lQ/3p5SMph=)p6IRCTG)fW#<6/Zc`^nA_HC^Tr?g;@?+Ycl1mkDoo>^;R00q*m?HI(<,\Nc
%7qYGd2i=$SS^-hpRO$XoW:Pb<G'=!dn/.,il%.!06pTie^O;3h"7`Pc5e8I/@%cCRHB,^GlgMMNJ8q25"[M!in`>B)5?iGaaNp.d
%+S*GHHBa2T?%U[hrVD1_>u+,=AXn0-E0su%A](paTp;3X;"uNHD5*@a*%+o))s1*SSALH<33Ad(<r-j:]gc:Y+/[a$*2_G;PHeq8
%S5i?N."9F?G*;qK>A+C<?!%iSSUC2TrANJ6qFt90q9j3?>&F0gCt_V2V]_4Q]\U'^aT8dc<ir5'hG-7^>d'6e(IPuEBc-ONNEBtr
%4_9>FTU!5l$t.KW6;rstk2!tKTgSIsCM3=-4B4Y*nplI&V`G!Dk]NbQ7'JZD=>8EDkV*/cNg?+7_?`h$/3fO&/pmsqf-k(-f?dq-
%W!fJ6SEWa6/:YX;^kBXL($fD3e/JN""L1hgm.7PV6,'j%jE'GH?mD%POH4PO67]b-m@ao-+O8]KK/sG>%GG4dftld713(QJOf^ki
%JL+Zm1#%d/Pqrlk*^At\1fC8eerb<6GFI+ZF/c-87&*j/7tpW6,Wi*H;.rN'%<o+T;C5qJm__f&aGh["Uo(BBW(o?kA>Jp(>]h>&
%?,E=[W-7$qU:8Ti+1Wr-35';i/ke+o]WZ>^D1r8KS"W=1C5WaB^5,P<AqoNF4,U&_9>p/Q+#foMlrl$qQ5.b8gVO*)k`2BXG61]^
%lCr,m!F<&a9;%42.!gYD?j[t9U.n&6U:3B48-.U]6>I'R0?"`OML2??*UNE]lkD^EHc@,nT1tX0T2"V'fq8\NRh]a7FlO9eq>%Ab
%GWW7qT/YV65kf)RF@r3<er>$*pKH-/^ADPD-^sGk[$CB,nd8-7j2b"Sgm[92:'Ua2d2ZTNd#CtVQ]1A.JrAskB6+=9T#'lGHbT:I
%Om?ZDSW,NeB<8=aiISHUH@=[eb8TT7D#ja0F%9*2H&X!8r,=#E"g@$YD>ajUZ`TmoGO?lZFsesIVr"tfJ"^qloeU^8*C\T,b0R;E
%>]U\mGikMR6^IO>'3TCQ(IELhLU<so@:5j#5Dhs#/i\3^CGnJ1CGq;b?\9DeAp1C=<"]L7#=mQp7F+YV/-Q0-O[]Y"XS:]X^O$]Z
%=!l9OZSM&6cr!g!.=3/PU%5LX][,2XDXV*)bU!.m3fdWf:5k9cdKLH=Fj8hQ^c-o#!T/;#m3<End5_;KnBOCdh%:1ac-WN'B2=/Y
%%`u6&iVD+Whq]9\-ietg%%o:EYHu?epLr,p$0*@fhh'^f)7CpnL$];A0LmL[*5i$b<GNIr3Og:ZcG3-]"(=7nb0SI&Fu`BH[`a4G
%Z2KX'[guZn"#=_[""S3"'StFk#*tjU=5M^'CT0="#IR@'(Epehg)GnVDA;6sQ.2BT0Ck@VT_;?E"?<11)i=u?'^"UQm1YI3.Cu)(
%o/3*j8WZd;%7M!j$?PhV`<QEqie(&mnLqY*OQ$A1Y4th%=+%eK`M)oD]scoj^6P>g:@VCe;hYX;D^_Wq;4++[;Z,(;6=.-li^\#2
%g$eRIK;d^/IZD_'51Y)gUY;oiDV92[dX\'D)hg:uN7rpZ5j^i_T_=`05"P'l9NQS>YcBopT\rXmNa>rWD('s<-k&R!@l+ldGeVt&
%;BD00N9V+idPMX^'UXVAN!%O"6QqCI!`O%r%>>&kk+NRM^dPJ\0\*De;t-0".#>qkU1A(dI(=kPZoW3>']Y+`"?onH%Q8odXL`XY
%-+r=+_8iNLQo5Z_Z"&99/f:o8X:n,?Ml*psP>#I%k+[=*WT!5#j.qf(7I(t>_=14GjP_#IMi(""F^-i`qDUukdUnRl>0X>"Asq#h
%2Ap(7A@]0eT<7c\;^8\_j16V<_'R`E'YTQ%4"&oL1*24m-rt%\acV]Dm2R"3U">oq>24a:g*.p:dN(dDk$2/=Aq'q&eL>_p05U_I
%H>*c/d7\Zt'tb3IJl==>iA>jp$cp^iG8+=N-SP]7o$\p2nC*54Q(c5TWAUl*+ibCC8URNW#'PUd<0k+_<\*"4p0]grdKDLGEej'P
%AO'j5>ImekRQ*#71Y_kHB,9;[oj^Rei+JUE:'ri&3c`R9:=6NKDS'R]n@MdIXmQ$Uo<#rC`a'MHAFS%<3^a;L).2;."Y&iL\?;/&
%QN1>1]FT8ObASI_Gsj:p<J$PY)!V$E?t>!uhb.1@NaCE@IItr.7HKPWI<4k=44Pd)/MCu45P3BP!f9[`JZ.D<p_97pBUemmO1*^d
%qWNs6J*7$4i'BQ\6j,\7()e%ZE"WGYq:#d,^:6hoF4KJ^,8`AQj)1,gnFg6;D;k[Gh;s[QD7X,V2QXI>aD:Vk7`_-!o[%u/F'BW3
%Ao';%W+Wd[0=]i;RH"^$K84&eMT[Wti5]Wc_4"^W\bb[>pKAAcM^D"lhlZYk?Q[8Y:mZ!'f0t<V!#H*I#@-o_[uXeX5Sjl0Jr:Ze
%l-=N]A;8sq76`j%R:TWDJ`]t%*_s0!;&qf\-mn.4$?O]F]I*6mQ.)/cQ!1Xb4`ikud;XK(IreAG1G:=]i>c\KDPqSp+6mr!AK#\r
%EqMaUkF9g$\.(S3ke[X>f6u)T3=6Je[([c&@dO4Pd4rsO"4%(ZX;$lKM\T9ANZ*I-2tn\b[\Q=unP8^!Blg;3+;6`!2KV&P)gWRd
%C)#go<8+2W->h%()Y5@.!!g''L/$'N8GgXF+j?ccnnB7A)3'kGqL\;R>aXpY*+cR\91H8,NWQRg4.sN68WpkT6Cd5/AX,qT'*9_j
%$q5u]U^gQ_K1jJV2AHcAHdK*d<F]@lWEgP+FC.Vs[,Yp]lQWlUb%]i#<0Hp#j]$kcjPnXpb;udfdbdD0\d`jp\?tNO.g+EL.)R's
%ZhNr;5NcUSZ:\;:d;)'i;i"aU<>haE2W;W>S%11;D.'t_0#eGh3E@g_oCe-0Uc)Kl\iNlGGqlG]eZRjEaD1RnIFFgW(2[h2RE;,+
%,ul<nW&8XrDAlSEW&/ILcrOK7jH[n?;C?1sZgra:r$XqMc@GH(JXYi)Q^qP]p9g6lm_ppRH&7]]`Am"udVBh<m20fobKd=Nicp8=
%f.@-aHcaY=q6<?5S&dtgRac6=)u@l:c>Y+_[@E-F1hg2fN<l:dFgW?^P$_8jcN%jq<9Z:8m)>kF(;FbE6QM1_ZR%R$h8&V&NLBAt
%U&$++^Wp%QEZB4WR\d^^"#SNe(`e->!/oGZ[:^mN_m&X?nFGf4/P>m*]%n=ILFCdDpK@Nnfk&Br'>Bg$@9B\C^VJagHE4U[9o^9/
%m^7cLi#+f%E*f.HC8GP[(;=shYB<bK4@h="Wa6",:c\m1l_S7HJJ.&P@3KK_6toO=3ChdGSdp>lHg)D+PATCP-ggCsP:a2kl,3!5
%Sdp>lHg)DkUhlUn1r=';'J;<uD.OXiA138^#Y`&:"mgU^.E!o4fZ>tsn"aJBaO:Dg_3pOu@GBp7.<?G$=PYAS6U@T_r!YYbc@r"V
%i;HEp]TA]9SQdud,hgGfYTnkGbLjPqbdd-sJSjR]4,D>O`M_Wf`.^uUV6UahYAD6jB?>m[3.(H=p)"B+HD)p/<&AA%Yj`#[e?G0n
%MO`jIi#+g_d-mfD(_kgU_#<jVB9"*GE.I&cZr1PJh.iU6r7Vl]PKm9X$B@c1,&r(+Yq@>59c$J<k#D(-4*X4+[XbIS'SPIa4sdml
%YOO\#lS_5@I.SfJ0SXu[Os&5J8)&@S)>6O>Xh3`DBaQ\fOb^fnethNc7;Eg/oS'aF:j`W,,>N`)9-br\8e5bF'VC!OBZU>bdFHJb
%a3R+B4io^717@0$33/nlj(Dh8mS=,5h@h"je@os,Mlb\mORI"C+uW%!8:=[C@Pf^Li19t?_!.mE<`]k_#@+[_N:T[,Z@Qr`JBpT!
%1[+.n6UqWZ2P2f_kpXr*.$FV],KA)mnW\ZHh*,%=+hEW.&F!J7@-^H1<BCM%[(Z[_g1SEQ,B_DR=8(a)ZfV0^+QSfo*NV-+HVgWb
%l%1n;j-2+-.nLBI$a3%if6jt"Img'%4PIg^PBjaaQ[YJNiqDZ;5EihP>K`<a*sMLso04?DGG<G3=`p^j7k#BQ9Smj843].JZ<?sR
%ADM<lkNDh75"bCe-A<mhh3_PHp-I/jY8aG[e[=V_72es(_c.;$>O*_sP)*Ceme(nX_XB#KVRa[pfX/f`mC$_\I/T"P=6BGL)\V/%
%>h=+sNZUGhjGmm7M'!om!OsI!\\)(oDF>gKe"#%`?O6)+@uQGF=n4ltY;FXg?QF(9)l_mb=jf&Bne)3/a\gP`^nN9lM^C_k]343s
%-!pB-[7rio]%0=,^aI)ZlJ01em=j_>8bU`IR&RRcQA\:1hRP17miN0=GJlZ?+mN/^jn0WnmSX@o2h&'7kgmIY@prc'W]l,8:2?hO
%Q"..'kDYn3hE'on&ub='/?@6$*(nM^;Ta.$T^O"fU833>@g/A&_+Xdd$><`9P(J,#8#T&Y8<f5-`u!"F,Y([1<HU']-+4L^V$Wln
%<8)SjgoQU-&taYb%OK^:IT5UK_+#cXFiCU<G3eu37qILK]lK;.V6WdL^6I]6FqLTCP2RXX-/3b5T$1[7C$7p][..;8f$RGuee8cu
%'\V%6V][WFjjms/Pp])XC18PU7P@Stgg1S1qBOQl5f;*$V*PQs9G=G`a@4+pkgZi9-dslcE1aG)!9p^[M]*8">/AA+j(&I)eYW!l
%"d.AL>q`@okUD>goK]nCoV;Su7=/ardk,3l&+k6-oi0AA8(!JgO"SPF@?"mt>#WltQLe5gH`\[GAbSj&(frT;=J+"dKh`f@_rX>9
%l')+0qlE;=3%;VnTs+'Mm$FYrs7adb;!j:pl(53dMg=tsI%Kc+JN8_^Fn$rHrjoW6p">^eh.uueK&UQt=_Q(YoVqYQaG-@+aN))9
%7PX6<=GeppQ6o]c$^c":%!R:gnY0W_,sP][cB5TlKSs]t@q3pX?+=_')6gX8k4BP6c7g[$f/P51P9al?Zm9:ZP*M/-2shQ/7PGT`
%#WtK=)$Ye%4\PdK/MGmhrL.*Mi:2/r-U_8JVXLE<`qfA\NCP]NJ6OtY_!8JJ(iWWt#_$Sf`nluU0cJh-$(#9paT/r9PrBmS2LnF8
%NY48FLnbJEou7!XA^XJI'A(3>;(4\:/;"^ZaNkUkTkari<dneEU)X58`uuTJhsrh6&4YBW=Q]S:`5<Kp`<eS]F\[J,o10(A(CAK6
%>Af^MT6SJ8@b\gOP.^G"dSO7.#=.@;+k9I2gGio-m-ZHo6Bp+71:kt#5^a]=O&i0OY;Ahlcfa-mlPfkUGP)VfIIQ50Mhnj`[8f%(
%aSN=YBb'eF%:/%#=DE6[O)q0M4::T;3\S<_#L^u3$-!$!*+J4]JJ2G\Z1_,s:f0gT)>Js-H2r2fCg4qHREm+Bi?J];6NpKk1^/U6
%9<P,B(b8)7%]bbO\bnD$?:]U:@oQhB[?(ou;Wc#=3?)Dd4`L[NlGJ-&WO=jP>"Z'<c9t@;gI-a5-Y<FGci'N:k1cZFghM\B/&Z:(
%:,p979f'>2.MK"hUamh@+bK7S?#GbJQl'5I)?4#+.It5o(oYWcP(k]iDJcIkP5VQ5^Ph`C*o^fTjOS`f>q2Q#lo3LVf\7:m$uB3I
%RF@9PQF*ZV>U@:)AqA-.Ka(MYODA+j;3jHTJ?m+!WM9)t+*$G`eh4[X[`V9T;kkhm0,6?f_73QKpGk_+-]g@]%6KqZF6CO]KX0Z+
%d#WdE=gM%]>nX'"$4hf#hhAQ3[7lkm2VWVTW&DaQMgc?h)BAh0bdV(Jj"V]%C(O-V-rO'm^I-C=;ja,m1EjX5U/aY(`5RKU3+Cf8
%8V#*(/,3/&Ar>m113nIaE`7OM"VW"6ir7t,P<m#5?qad)moZBMkN6pKhWb'bl\;D9N_qY4`KX=<g;?",7<oH"0<Zqt_B!ba@BUL5
%ChWLQ-?18GibigP`Nln6'$"(S%Q8^RR[9mW9EoGb$<Zm$=CN#KJE'3*7;"A,b36aS`hbYdX+T5sC!s>mg9"P(iJY2KKG(]!6\okk
%]Qp\55[KK0"VN#SK'!beZE1pJ,HFIp3h'`R`:GP21X_eQdq2Y8TfKk0JG)Ho@@N:E49bIA0jp4-PW-gYfI/DKk,gL5qMWm^QW^jL
%2Q">pb52LY!ul3S>:-'urM*>u`(<!cQ6)MBlSno^$t*M?TTn4uo0!Dkpn8f:&SU%:,*o>\p&f*4/$b1.,78A-Y[/U>S#g*]kI4]@
%ZH`:5^=ltnac^mR#c.0k?)d[V]aEW3(<L;tW2jROP$WRp4'5fY\YS)I!$*LoX>[btT'5+>L*U,BMm&Xg66`?(Whs"N\YU2n8Fq'P
%M(]Q3^3V)S=LpP6Fua`Mls6VNpp"Jr,>K"L10`2$OsV+L+Z>us61XeJY,PNk1`r&WEiDP-%d^u1?bAMF9MO.H"XsSmFjUaj1-ume
%*K+%XUC[hn?<glVb:biOU5u`=5^qCo\rouBO:-;LPr2=[4Kp,GY'Sg0L7a=7-#V8IU+3NcIY:c/'+^"t3mB8+69;ek.j\c'maBA1
%l2[s`\jPOB:\[Ljqf,5nmu$UXSMlTeD-96TLilXo?9EA*Bbd$;LH66OGBMft?5d^dcq@O&P2"b-0K!CC=!,boVFBos]*"g7Y:C<H
%I"cGkCOGNNkA,!brbCcZ>NJI9D-#it^hLi^NNK,_Kbr7AaXUXY.S3p?9X.n2-L2uE,sD3goPNq<QmYYEbh;pTJiGhmcEMaBgUkWE
%X7p14_e[L\XQGO!Y?+^Zc"G4GG(af/*a>S-H$n^brC/]ncm4<GqT,^P8;bk9gUs8p\]A\e`hHdMc#lU@?$&q^itkuM?W2)D4QDb3
%pE6dS*fAQQL]is]Zc#7(Q.9*^n<ld:SMa(h]O]:KC5aK4UdTLOZ2+SDG^/I,\/%+o.9"fl"*KiNbXc5Vd+Eq:8S'=@`hQ:Y[E&(4
%L8;.M=Y,bZ>$pG(X/iq8EOk+Q(%,WOS06<(d855"%Ij]G/<Drgr?FLidUq@K<5E=RqPquhKrP?'/![B`4[HdKK@V?l$^h+1b+CNZ
%7PmjN\oV5_>LN*EAZ<#sbR[N\T#"tD,;Ysfc=I8+RE9#[(.N=#d^""^aE[tgNEE75A0o`5VgcMOK194]-A<_HKQ:^n]dE3TW=le(
%eYST^/Ubr@ipm/#Y<"A9oI?_PKDFt8-e2F!FXJ]f$+$]Je=*\l$*^q@baXDSA#`d5#O!8"%bY&F'"R'M6T04=DNq6m8X=O+\k]i<
%X^cNgMNZ+#lBiTgpF)9P2B3C'#PDKKk2_dG@CD5;I@l2oYCJaP.Wf0:R^2$Dl]MgChed@%8,A4+esksS;h$_>Is"IuaBJ\Z)HZOb
%Kd3.'/'[r0`\ST?;(eGl]/gP6`-;McP<\SAhCbTcYge__=P4SC8%-9cT:[8bVY"KRQu^U&=*N[FfR;'0?ZcgJN3KH*7_X)`qZ_FK
%3-b,!L7StdERXIDN"kD&;L$G%q?&ZH6QiMV/9RD<OEkARKBG>')8J%Y6'gm0k`h@)UIa>9Hb9%/q^;9?(U6L(3IXbDc[S:e<]c!q
%H?96UW71C4!Q"#ZDJVR.a1cF*k31b5+Qps)\6T3XnX!AO%;=tHC83IQhk1"^SZYIb6d[bY@O:<@9@R[XQ_c`h*ml7T`m,f[.;7fR
%39_"6U<E70&\4BWZBOGG'I9X9<qJMK1p=!!$6t6bC(u\A5jt\^n:n85#B)c]dIW03]E16>oc9]j5ICHG!MT8[0H_4D'N6KV0Lq0G
%&3,!";c/018%obMm-V?YKB77`F7a.$'XL"'[qc!4ipl)CCd:>m<]c!qH?97"h^%>i"(\`V5GT2Yp3!,a7h9N'OpH!H5:9Xip+]!+
%7ntRc.JT.f!Uml>(O+n*jO98RG7L9+IOIA`Nu\[??cT)#BFnnK?c%7K!#5>p:me#uNX!1pL=)Z:oIq+!BPnoL:VgP]K&0/<=O?qj
%(^ga@YAY-;ki$#;>]d_p0]^=Ln7BiW%FJ"ZfhPo^*peVh)E"bFWuoXSfl-)iWD1^9kg9h^Z0UiAfDqg^b'"5-kh+FF_Ak_O!UH`'
%-12[:egQGs@fnbQZJ$_Nd3fnAiY#!Mk&Df*Nj$RCh,o2@p\Rd9L)i;h`5Rr8[QG$'1mpSi\F.4[7*Xs@KfOJC:s_927fr!go]:mP
%[h%S5fV'O@FV9];f$3F!!<o)+'^"WLZN<=K*Sc+0?YGHPalS8EY+nAZeg\hjULV^bq#\X/s0Y#l3qD1TJ^[(r$6IJU*u,%tloR?L
%5&t#HOj@'WNZQGoVU/Vs\.7lsVMH5S)u/mcW$dSA*.>si!FL#lac-Bg-p51[TlL[p!4<+5&=A'ic3j>56.@bOQkf+YInBMobR+?(
%p`Cp.d:6em]r-Tf61=&H=obKq!J%s"4Eb&Xqe;E6oU[,d"bu"F^aRFS2]<,H*n:!S%qn)gQp8Tm/i%a$k1n>TLr(8>']u>k3+>#<
%'of8iNR`$6[%k,s@he(h_824oH<fWYo]5B7`W8#KF8#f?T5*S85bV81_Ai^dYAM(-ZS2PHe&LQEK,fNk_dl`]*l'Z*N+h:1'mt5d
%$j<FMQJ^dJ\CZ.k^_cB12,+Dr<F$7*d0Y+g2"9<nVs,osJLQE:H[[)/=>&2Pp]?.UHK%,MlQmQ6,8djUe*8FU?@In9JbpddGdt-V
%JsJ#D4]L4-_Ap7\^hJ6K#OVhR>PFo2U&S!"NPZ[+b.K5-MEKMOH\9BY3!e-#C]_>U^oo"u'.R@\o/];25t3kIePWPN)LhJgW_;Z+
%EOV+T"HR5ka`lG",d13qaW]a2I]0jMY(&IC!]321JS.4MN>ro39KjcE`Q5-XZjeQ:El3#i^$uE$))mNj5hN%PD!sKJSCZs4>h)\8
%go3.Q$'!q\U7PNIWqF.bs,uF%aF8hrs.s%CYRgOXYZIcc]3sd/Bg"*hf<b@MdU]de\Lf+k_6kc^JBB0JjaRl@hO7k1:N?rT6T;%C
%nk'%4a![JR)RrW`TQWI#;*M*LF!%%j:MEC?W3nt*H^2;<+Z,oj]56jRUqaEPLO-Wp^$AK_CPRXj$e[Ru+Pg2:roB:KMelbTGHka+
%")8,7%L'4`JW]7=eZ6Y!2>6ljeqd)gU:%2h:eZCZs!`ZWhj6@<>C,-M0fY_$'"X=m6L*-c5tb.Z<gK6>pjehB0q<,n>pV-]UL%gs
%n_jlmj8.!:986=e^P`Z\Ib(!$JB"DZZu/BUe*V+R6uE\3fUALuq2BTSWbuV'aH#+lX7\N@($G2rP!T6n:2gd(829Z;J!.eQ.5Io)
%'0<.EEd#5V6FD5#/YX#fou6<SekVE$jP!/n>)))V^<,;F.dL:U\/mDrZUXO$]LA/CTZ\ih-PJLSk>mfj=(:Q8^*/>(m>2W_[%aZM
%c6LIZ@XX?tBb_WtI-.Y$<=*rGO!-]VVrQB,T7[C`ga#Uj-K1>p6HIqAMY'Q'iM7^45(qMp^8OqA?EK5K,7="G=D*A^/UJ!Z,?3Fk
%6H`E:otu&C[D*Pu/n1_RA>0/Ir^3OXEiQV3l*pCT/M`UPU-Wosc6??i6LeIbPT`1?bE/70(44PNM4p;gC-tYj.i.&"2)D#<p3'.B
%"+!L7OjFO[lYTVRICn:*N<N<M[+<0W4r`&J@7X1*GK+EG>.<0g,DSk7cl5QsA*gO-kIrjaq;R:*H<t^$lT(S6h.etRNX3Va(j[6"
%^Sp$N%i".S:q1jdp=1)tO'#lLZgq<8[Ej!`:)oP,!.#\_?dksDOh_Zao(R%V24DS;2rngImU`r%hkZTL=,nkIMd7H>N=+*E_mfR\
%\IThd6;<Rt+o?aXGatU%B+[Mspc@*:B6e0s2%LY^HK(+S]j(5m&3/9WUf8pQjK&.^fse*CL9aM6D]\qRrQ4kgP.DUH)PZ8OK'*`I
%"Z^jhQ[Lh<IDNhWJa"NuVrt6,;ngT#pR]<HADDO2W*?^qBdFt)(7Fi/2P9YaFjl,*:N"?3)EC+4GtRi2Nk]:h<"."j)U_b0)Igsd
%poc.MG/XX@-dc(+Of$kGT.bLt9q&EP4X!1Fh#++uSP4G3iQF:YC^;sP"Be!'k]oR#kp4rK!`j<_b8]d8F^>O8^bPYeNZ4Rr?e&/-
%i8e'-6dGiaEP-L44g%\MUHmdoe44_j!)ZlJ)^.e!LX;o$rbCX1q3J<aXFV@58cA:on#/hlTj%%VGMWa>8beGiKhXn_i(uP5J_"IK
%-k20)OR,)K3M;6#.&=IPh_Q??lT538SbYL*DO50e;-+TU1j)nW`=oEbknQGn^U!K>s,OR.psRQ&Feu<uq-8C#kl'h:SKGD7c>i-o
%NUPgteF0CJ&_&b(h4R*>%G(I(K0k"aY/)if+h=8EN:-hi-$bn0b02]sb_%_,l.niN!OIt7M2q2GYcm$46*a"%5KJX0/#(_)YHm"7
%Q.8gDoe2NYYk!R>eLai,-']?8FX<&/g2S10>'>fUG*XZc6!f,/h0$JGN_+t_A-641(2mRD!c(A"dII&Ef:+UZ"[]JrLN!^q3j>]-
%A6n)lM'HO;TrEfPM#+2J@Bunq-Q_RH6-sI6!VsaL"CI<cLE2cF$l.2s8I30TM,12N>aLnldo8%QOF$qaG=n^F/72.S+\KQE&?C'S
%>&#J+&\0$I;FlnR2U*)GlG]e:l;7e)Jb8Ogq=G_C!1`>SaGC\H6+?(NG""b#H0$:$XKquM6RSQl5cg'rpb-X<8D05n`4q!jUe\)1
%c)UMG);8Pjc:Chl=\EqLCAFCgT?,PfVH.1[?C-P,B^/2*E\9eI5'`>9W4E1-M8Yl@+fX]$V<k;1lBXJ>>.i].(UPqFa_(b_,'f2s
%G`JpQ6S009?cEK0LX>'T"Su6=m7VI1XY\.,aehWq70C$,Xg`'a@PP%HlWS_!F'\]o'X+rF`EsqK)`N\dVT)i'RB<3GhkX^O.sWq)
%Q'/!0f%s7q3kMh#?IU0<j8:0/65R3'0$ocj,(6P<F[c:WgoO,VY,O)nWX8m,i^oT[B;/3uU&46i@7SZj2%bq?hKl0"ShoJgkPYYZ
%9X7V?O=W9Q.^o&^jcP_6h`=i"C*>.5>W%3LPljJ.'.GAD[E3,P(e1"[3R1Oh75K%8M,uC:3+Ad/VE/2#&De10.mY5X2r,d!6+.`c
%RrZN+8S`6N/KU6<Fk[X0I6LV$(55t/BIN&6.6;pZ51E\NOa3dW&e1j=Wl%@,:dh%!mm[d0#l"DUoSO3A$V;!36+m`-@]BjjLB/_C
%Q/"fTheYLHao/B4?Qo"3WBCk23Qg!+-J[Z%;0%,rJS+sojgaN281QnpOhdI)J$48JOcrJ>M3Y"_ORUHH.9?Mq#a-iH34mR`-pL4Q
%^m1O[iCZ!KED'#i+fob+>RI.e!DR`L'.D(%T[7$Z@OIedbEZK(dBO?7J=Q`$Tr1YpT_'4Xnk]#jY)+[\a2J90B],Nd*"lnNGN,3h
%5iD.`4"+e$#B\s#U\TSb'&?<Z%0c,&$?L==l%>JCad)MN#W@H:W8s+bbqTnM2[XWu.@W[LF\U2:c1+G"ac=RFMS@%Xbg@eT%S];J
%ElZb@Uo>BTeej9lG61_48_YFL/(VCI!jA;nY\T2kaL>$6UJKU68/!Vj\6X/bXBDobjqru7)hg<KUs7lZC:_uMc&msmgWh5KMMrL.
%3VrU7]P=SB?4j:%7"_d[_q.14Vk^2cfjVWA,N'G*39^k5k9pmd_q!Gl^:Mrd5.T*D+"&d>VBZd"hl8>eZMBBVj)eftYOGKm[kk%/
%7ca*rQ63j"oePs4a@YEH&?2ElLr?Ac]$[j)h<o2"3h\VEOeNg:=S;(KKf@LMO:A>ap"2`=Cu6<_bYb$P]f3hL-\BhVpaBT=;4<j/
%Wo1#t_"7th!2cMY!7TU<6BsW/T^_0SK-u!DE^3uI"4ueF*mY8.eg$o_f*oXt0a`!oR_?_WEQE.OCOi-D$(NkODOMaf3N:<LF%jY]
%eXu=DMB=t$979$2B=He-R(Xg-^#LdJF*-D:4J*XU4bUYBo^b*,$igIO_7ZT1pZNpZX1Atj\O8)?$p[[WQeu,m0Pl80_ls[QeJ_7<
%!MD,:YA+mjCAed]f,;AH\u^[36^RHgETf/FZ#bl@*.=S7]C%I?M;KT+j,?9&rmePOY354&H61FUdG:kp5[fZSL#_3%\I>c,]JW/d
%$GO5+dmH&qCg_Sr9m.^=I=TaYYIBWTGTK+aWDcl3jl`QSG_4%qf8!h2<dAjcHr-h]H$/aATY(`V)enJd_Ai^d:GN_joG31J"T5g@
%e07\UFn@eh$g4s&;feOq_Ai^df6sBQm%C4ijrGmBIP%=/5A8Zqo8%^<?fX<^R"AB<b+/'=%!npe:a05%?fPIL$k9,"+5/o>'^"VK
%/((^#*7",&nKiFM`7=r8(Wih4PLtn9="_%XS\c@pK588`h^_7q(=lA>&%$EcgsohU$./9o#(A4!h]<"0Etg$-HaeP"fQA:!T2=Ir
%%hV*AS*USI%ql5VSXmV;"U[D9Q.Nl06]]\0.5-H6Q\LMN0nFDQ2bi]SjsX'9mfh\%:Jt4V?9\cZ<B`m')iC@I$?Pi)Jb.pWns[`E
%E5&]Jj8]5gge\]e;4++7Jb+L3WXU(hSp@6H'6a[YY.aTE4Asb#iHpcZ=Hmr7l73<rX:7Ut)ML1tTWC/;NXhR-l`KArPu6+eU/[,h
%*1b2T%]IK).ghaa][TW$+DjJCZ:88_*[u("](/mHN]V19d*\>dp%=rJhk$Q-iAba.%r-lBkKOr,H?4?HXcGKeD9kHq5Omhl9:uR0
%msKCJ7pjQP:tt7<GjQpe'Fscs-uSY1-uSPD+B\-e;tN=pS'ONCS(C,LK82D-K%$<B1N@WBMph#g)hi.s*MdFFHNkN?C%Jh_C%L"+
%C%1R6;t/I=oKZ!;a$iRhcULKYIlF'QbFX8@8XmI`;4GTq=bCo'\UqknU.:*qr,%:gXlctjO5811O-B"TqhmOs4[jq=EIPR%RM9Q0
%isd%-3'ZKK03mmlp(RZ;'2M@tlVCt#4/)UMD"-odB'ITR:Jmd(TI36\S'OQTK7=-RK$U$_#7B76/dgB]2@:H%4,=Zbp(X&(]_c!!
%GB_diDKG:i=**+Pn46]OcUD!+f1&nqLBjf1f:J]Ab1aK\b1aKdar3B)8/;'r'V3A"]IjQGr&..dHosq8r:Ugf;W-BsEk41iUc`nn
%NfMtdP:*63O2%S@;E2miF!]S<LW@YXGBEK>AWt/lG&DX.@eiZ(*o5O+Wkdar6UtKipp%?Rn%JE'71.*2nj2'eCCfD/%hF6qY<>76
%'R0;^K=JPF*lJL/hBWJ(HNHs]h7W.umH1b\@@MTKWLD;-J;6b.He^p8h.I7]#6,/g"eRqFO-Fb\\:^ThcQ4>@rnW57/pdXp-/JOe
%+R8C"#?c\'#J#H,StU'NmbNSKElW0MCH0Z*[pr-af0-kg\8LMU7"%k7L_T!M;0[]kfsNulJB\ZJ-82$#ErZB`J\iCTb3"MJ/aKQ"
%@]4=b%@[GJ0FefZkYjC[P_.e-k4;<BZ8H`'2L`'(Ds*-qFU)XqSl47G3Moj0*'f'pTJ/m.Z8ncrfGmg?C_!,R3)H!;:Y?^d$@XYZ
%@8*`r9.DtP)a@iu0@lBV5`NWZ.N::de-_ZI-nl,Fk3,`%a-6Xp@qp_B!>H@U$?PhgRq!*P:)P-Z*gNk&k7LG\/$,LLh1Zc$-WIOJ
%3F/bAjo>aI",/c3Pg/Gb0f5f/e^,:$JT7>:7pk#@:EFsPF?#C!C%<iMhNkt!J*;[B]HdW>.IcSbV58++:1sqS?1D/lL!/;kVmlW5
%8M4R7-_E9Z6c73*q3ibm4HuG4<rU@H5Wl[1OVTrOcI4VQ4hEWJj'1r!EShL+Brj<Jq$MmhhO^L5_X3TUm?LK-38TIW[kNqe50)k4
%P8Z3u9*T1kRDg.7-7<nBanf"uG@%3W2ebu6nctpB!/PAGeZal[^>Wpt`ujL=of3T()1lpc]*8;*p?a0tlWp-+ZEJ).H+s1=qBbt'
%).2AGSsH\G*@FaJaD$rnYC=S"po8'UBW0O!*6jrL/^I)$YOlthDO9Nf<sn-V(tuqXA)o!:_!A@51e=/_G6E**K^?CAjW<^3*/u%3
%P_E22[ZK7/)gtl%UZVZ;RB/_.:\F97$qft(AfdITJ;f$DiUfKPS!@DhD\4hq4FiPqZ`@K8r#@QqrE:$#GaA\,Jd5X@Q$]4^iq+.8
%*me"K`Ne9@2[XU?.(o@=N!EH3l)J:oIdR=$U=?p#Z<Q*,'JmK(Z%cnXP(,45H;etMoI*mL*,"n[Fmf(BLCUJ\.]q;m>o@0]W,W<?
%hH"a20-Zh.Qr22QX<[08h/Mg.8`U<;!B68\+P*Z]9^btYDMEB&Xf<e[a@;^I1o?YJ_I[l6CT'h)I,pE(Fi]#aKRNj5iHJ8-Ap6(H
%Qd!*#/b%<_QX==hemC70US5n8Q=o6jj*-Mg(naRf9Qi@0EC4Nn3I0<;0!l58Z+fX<<F><A*Gs)j*L=b^bo^9\B[S77d.<%pqg`^e
%Tu_Z!ca4s`ZQn$\ffl]K+jl(1<&P6DF`nZX6a2(7>S#O^<8AmQg[q@M]g8W3V`K.TX,Frp.T(JdKsb&*QXiX-pE94E-i%1f/nt^k
%6V^'#8_B$X,rbQrk=8(o'>B"cWF:LID#<FX$rfH:*_Oa4.stUQ7qPENp#Xm7kFI""_Mq]Dn<t:mPVA6]K^&`a;S=_J%-RPcSj[Ip
%SnDREDFO"NN.n@V0bt\',H9q-N^e:D@Vf<#I(EfX$mLkTABn*p?J4IL-M7q"g>448$UsHU!hquQ^0qg^pmrr[o&^H-U#ZL+N<U&c
%Uj[k+Zf[E=C'N4'CY=G']p=Q:<#;cB7;d2IW8,q,TEU>)AQ.LE!LX2cBrK/Ea$)Afo`@F51Km(OE?8uMru=(b(DeB%-[\J!8tJTV
%EX"h-!nr"<aL1HAC9:Ec^%Rl%U!pSdlqtIMa'PB\]W&eU*RbsR*mjeCks43BPEe?.Gtr1Ej)3(Yk\bL^;6LM&1D%^hQmt\Vl!MPt
%En6%)VTST,Nh-JtL`SU23=6IlG'$-oRfc.%)`l'M;ja>TjKCbd[b4S]1h5^l@I9qc]+plr>i4,=F]Aci'I[41_2tO3EejPNX;cjR
%H4SRKn8]'k$Bo4@r2d]DRb#i*I1R0eB<0/gWc,iTrE#N?U6ff:j+aW917RBo(IZROb3:.GX/EKhKfKJSY3#>D\fCR45sb'G#hPJ4
%,S$WDk5j[,R.[-\TJ/le69dBGktWO%1G;Y()Fj<MABe00dIVm/o(T5Hi;eQl$5B)InZceA1>bCmjK.pXjIPcL755a83B@NITX^GW
%&=+ACKXb_X67-h\$_ZY`AWGLK%&5LHJ\mQ:+SCr-6&0V[oI^Hha*&:\E82nddAL]6)?211cI:(<1j!ghe0;L>f."p@T^Ypm5V_K*
%`cJoa>#`aA.aQ=T!1j5Pn7U^qp5J+r-k^d,BHFoQ)UiEj]^X"I?GG&/p]1DEbb:fp&Z$&@<5ATh3EkoUk8db9pXp]2+,IT(8Bl)-
%CVK;Rg)rGu#8ZEL(%tbr]dUh?+kNV`8-Lp.FA7pi4),O](Ou%k3/.4gC;P&FET35hYKul%c*klX?V1YG^@^,cPiQI(,oYo]]JN$S
%B3TicK'ZLc4FBVjnZ&Ljfqqi",E\miEN-.%nG^`5&FXGnZ"ADj4N3^khS#tVWWPJ,6,YPA0p)#>S61qe;AUAD5Hdi+c22%J4>LjO
%`DT$Y'T]KU+Rr;ZS@Y%8VHF[9&gORY&-5]$UbD((=5TL34ah?f)hM]&q>D<Sg3_cbKLK5iA)3bs[u`D*HEu*]G8tk''ZTtY2+F_G
%%(d&EpP[94alH;u%oYWY\VBf39EWT@%Sc3Lk9psfFE4FdP.A$1`l/&%0kqW*,bJ`PcNpC=E`18A:I-CXjn%A/a!RuEnGCUUp>Alm
%RaSu-Jgp=PGqV=uTWk!b4tWVeA+EiP$':con/Hmj";@t]e6FiDp_8D@f086@4&s8e`65c@1.ah.(^Q;3i`#>+nO@u,-*<qiH,j\J
%h$/EMXlpIh82p*d^*S`djlQ<Jj\\,EJfq2j'Kf4'AnZm*]SLG^h?FJ0bD.9.I6+JHT7To;.-'E%YY4M]nMY>?hHZsJBW*]q$==])
%[A^e[hQ9bN_/O\]JD[dQCig$X_T/&r#hCO@,\%t<d#(W8irj.0#*Ng]$DM5G8C35h_22FA`4B3u5.bJ:!YJV`.<q4b]5^8@6Wu>!
%%Lr\Iq#.AlNh"eb"N9:))/ODB5b]kM2;@KU@'ISCpR6'AN:R\"_A<F"/TR@C'hu,hK@(GAn7ntC1XA]&$Qiuf.,8^4-loO&P9\`C
%"?]Mjh8iF(eO!+qh2Y3e@%S*O-JNEK.,/X7-m#VS/k7VC9C,4&3mZ-QX_A3>S1f""!^e+r+_h&cF7ctMb4/BDcXSZj3'A?:9+<$V
%TFa7(JLNPbWLQ(n^0p_8qs-!e!Yb\aTJ/kHN2mp?e;\?!D7?*W.!oYIMK1Q]F7__3]6%4tfYu-Rg%\R_S[:J7EjbIZF=-F0+5'f+
%S[bY7/uL[ZU0rtt*'I3TAqU_5JJghj"=V2h5[fZo(NPo]6HB=B%"T(b&7ZT/.6%XH^^,;J"\.:B-bpkKK$n`4YilJ=&*7U3N,gfj
%-#+.Vk^db4"%5G!$V!.#&1))QkNGUdApu(?1LCg&@45#(4\(PHF>l;j`QWEYQpNU<\-l#TL)q1lFjn6IbY/h*.Pu4)^VG"?i%-94
%j27h>bSMKS2"ViAU%M0r6R/pTI"SN4q$s\7;[9:Rq9I>3A_kUL&9bD;6.TZ4+B:,Q)*/LU2o%`3h1Q#AK<^nN_1F&mOhra=,kp7O
%/1]frEn\O#b!66IHKc;j?pM.s_no<kJ;b#m`#-L=b!6BKXSa'/"D#KD@L-k1a%0A_H3DP"6JQ.kVr3-2=I08OcmDF'?4DRM\<idq
%#EI%U$Q,@-QnYlcLnh2>T;.UTfqd#NAeS_t=Ufs+fSWG?_hR8"$$=[&N9Fh=i9$+qNgJC\0"O[V?$$l-H<:_<3+J'0%%Xrm/dq<u
%?'OP\60-i:K-W+T,J>nJ=qK^T]'#?S'jLOOk$\]%=)>jRi,K5f,uV5NB&Y<'JC<Xf%0TIC`M_Y440Kp;io90mg!e)HH$$4oJg7_`
%;t*'@SC^]urH[rRJ\#%r>&@"ff,Am'E$JOT5q>,&U%jm!SC;21o$Agm$hI,0R*UY93AJmr1P2Uu>Rje^$:=80@;:8=M72"EQS52/
%?Jcgt4mQ\"pkVT8\TXO0SRG@g3:hj/f.7Yk:BP$q[Gk-S\C&o%%0g1G<#@\+KONGh:Vk0"CSo[<?F/*EH5Zp]X;.:X7h34D;70a,
%"o6%2/gFb:^nP,&\&)&T8fob\L7"N4Ou;iSiM7;3YVT`Cp".?[oGk:00^tr>R_KWOJ#NNgeeakqGXdekV!.&a.m:eCn,\iEPJ.cJ
%dTnldKUd)c!>u0;[,P$R3;KH$'!@[J=$Fj3,@21I@3A)k49[BlbKjKHGoMH1c#c^A]U=-U1dP=0)0W*#eV.Jbgc[>\^>Q%D6j=/a
%!=oU/]*lTf\U.]mHbicfKFAoH!m[P&mRApGmTp_4?guW063\fbM*32#^Am:-:/7*tB:XLJd\<$#<cJ;h!/;\TjD/.t`MXgo^NPj\
%QY`"70XN2)Tn'*no";-k[raYH3"^a+IG2li0IR;0<[b[o;jQb4)I\o@'EHGZEd*a:+%#21V]Za>12F`rqPDZr.]A\gak9IUe*Z5.
%>N+o<''&luRW>O\`Z4JrIX/c3JS+s[WI"(`LrBn7Jd#o72_b1g=@ia9B4"uGs+#-e,$Waj:r1OWdjZqrl5tmZ5qDq&QSg%,KC"\=
%-G+SdAcRaZK_P/Z2Q*uf8T<!(RO)>DjG"#QHICY6>FHAnU_&Y,Drc41"8T2<+l=]qd*.oTTYcS*3TI/gB"V2;(G1#uCXJ3OZZlgc
%EFZ`nTQGonO"Lo'9N!b/4SC9i4Q(:sc]Xk*#?$AbFonVU!L.>S6&!mn^fUEWGd!>a>51S=c0p-$-.U2ar0C+5oGqHB3@k[jpS_e;
%q'B4YOhs:=+efF@LhldEG_iXDd7=:9CXa:P%HL.iX7Sq/7H#ZP'n@2AEhgXMN&;06YG<f*p`qoC9,i$EZ6mg]LmXtQf_F=6#2P\K
%/df%m+u_8bq7J`cN!Ms8*[?Ap<-Y1U9F'[N"csoM\SYpE=$^_We&GMe%!YiGqZ]5UYL577(3nCQ#9LES]jC!f(r,Pka[oUk:9HN!
%dWH$c\X*SdoOS'(:&hrTTOqt8Ut'BsL,=uXUt:?oX*:]bV98P8D)\Z0&*6RP[VR6QnikR2`56gIP>%#4oVl`H()IX_?IGWRi'[MD
%k,tQ"D&<Q9(\U)gP%0(q=UuTYfKpb.*kLMI;Nhmi;3KAUJ)>NT,A3Kod?:9>BLXd!H)slE:CL2):E.\8$W`<WW4/lm=p!,l#t>SK
%+h9XF+](=)g;mC@C?D[i$k%*?5kam6&Jj.6RG1gJX"9aKSJfopX#D[<R203\6jIZ7[_i*5[V3MYgGPii#.@bhn-YO@MCU(YU=Eb9
%WB1Kn<CN)g554JUAGT<k*)o;g&K0A.8bB=&+$_)aRDCl/0/I.GCT;/@'re1NEb<J%jRMFA3Tn,qe#`Y-4cOQ9oJttW6192!rV3T?
%6Jj/`"^r`JG-[X:a7$!i-*Wb%8=E\]Ju?&$_J9Kjk[tO!a_T\sSJ&%rS"#k?K!J-%0_qeZ>8u(B?i'9!Zll'.MGTF01!R"aQCW4>
%do6Fg80]J_ADQsB4$RcQA6^*lZ1!GH4Q8]/N]n>I\XoOF2oT@>o]gFjIE"]H4[qI[7pDW8FqIqM\s]^BT-gQ$,R6Xn>q&8hB@D-g
%d[79(TV6F;;X]4@OdTjC]Oh?a@?,gq@1f\#\_O4:-3]fA?4_,1,UEq5B9H/H?rCGo=6GmD?;hD<&42?j6RT]!KW:UD?X#4*n76VB
%1:a3Nc6GA0&'@HRF/L!s>Ck]amd5dt:`akGL)&5F1%6'mGf`m\hKa#X38aD:#">=4R:$>WHkD2<71Z[EVAN$7MQic+1Gp[@X/[Dr
%r^RELb:2:nS^N0WDJ5H@Zi`=R]2f7BR&bRS1IW`GBYtIp)1!sF*>`HVO_]<3B+alQ`l2t%?AJMHQ_H#8[0&!iK'NGs77PYb.+cAd
%[J.T`dIHWZ5dG1=/F($AP,%<!9K-H5_6uFM%>0OJ%o85[,rL`9]OnrdcO\m,=='msM>Y>H'_u[<L,`8?_l,t.ef[-brmZ.d1;GPg
%gL3RrT]#Z"Hju-6+]nnDABB=erM<\AJcArc[:"c^_^%9`!/m,&18'P:=o1bfjp=i$5I(j8:EXDhf3A"OWf*S"jC'G]#'d:r^1J3(
%$E/-NXn[P,EsO!s@!iATZXJfR3(n(#]bf&J=i;Bb+#j2qWI-\k[fF'd+$O&fI9CK;O8J#OJAoRRDZ$m!I(L9jQP[9Ok3(B5md;b@
%N8NTlB"&im5OS8UF81(]$P=)A";Zor&+;,(rW&#bM51~>
%AI9_PrivateDataEnd
